
uart-test3.elf:     file format elf32-littlearm
uart-test3.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00010000 vaddr 0x82000000 paddr 0x82000000 align 2**16
         filesz 0x000015b4 memsz 0x000015b4 flags r-x
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001410  82000000  82000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000001a4  82001410  82001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.attributes 00000039  00000000  00000000  000115b4  2**0
                  CONTENTS, READONLY
  3 .comment      0000003c  00000000  00000000  000115ed  2**0
                  CONTENTS, READONLY
  4 .debug_line   00000512  00000000  00000000  00011629  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096d  00000000  00000000  00011b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ad  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000c0  00000000  00000000  00012758  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bc  00000000  00000000  00012818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000129d4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
82000000 l    d  .text	00000000 .text
82001410 l    d  .rodata	00000000 .rodata
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 start.o
82000054 l       .text	00000000 _saved_sp
82000058 l       .text	00000000 _svc_stack
00000000 l    df *ABS*	00000000 uart-test3.c
82001410 l       .rodata	00000000 .LC0
82001420 l       .rodata	00000000 .LC1
82001424 l       .rodata	00000000 .LC2
82001438 l       .rodata	00000000 .LC3
82001440 l       .rodata	00000000 .LC4
82001450 l       .rodata	00000000 .LC5
82001460 l       .rodata	00000000 .LC6
82001470 l       .rodata	00000000 .LC7
82001480 l       .rodata	00000000 .LC8
820014a4 l       .rodata	00000000 .LC9
820014ac l       .rodata	00000000 .LC10
820014b8 l       .rodata	00000000 .LC11
820014bc l       .rodata	00000000 .LC12
820014d0 l       .rodata	00000000 .LC13
820014d8 l       .rodata	00000000 .LC14
820014ec l       .rodata	00000000 .LC15
820014f0 l       .rodata	00000000 .LC16
820014f8 l       .rodata	00000000 .LC17
82001508 l       .rodata	00000000 .LC18
82001520 l       .rodata	00000000 .LC19
82001538 l       .rodata	00000000 .LC20
82001550 l       .rodata	00000000 .LC21
82001568 l       .rodata	00000000 .LC22
82001580 l       .rodata	00000000 .LC23
00000000 l    df *ABS*	00000000 uart.c
82001598 l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 print.c
820015ac l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 _udivsi3.o
82001200 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
82000338 g     F .text	00000038 UART_getc_noblock
82000f10 g     F .text	000002dc print
82001200 g     F .text	000001ec .hidden __udivsi3
82000794 g     F .text	00000070 UART_puts
8200004c g       .text	00000000 _bss_start
82000d90 g     F .text	00000180 printi
82000050 g       .text	00000000 _bss_end
82000370 g     F .text	000002a8 UART_gethex
82000000 g       .text	00000000 _start
82000c58 g     F .text	00000138 prints
820002e4 g     F .text	00000054 UART_getc
82000618 g     F .text	000000d8 UART_gets
8200140c  w    F .text	00000004 .hidden __aeabi_ldiv0
820015b4 g       .rodata	00000000 __bss_start
8200005c g     F .text	00000288 main
82001200 g     F .text	00000000 .hidden __aeabi_uidiv
82000b88 g     F .text	00000040 UART_sprintf
82000bfc g     F .text	0000005c printchar
820006f0 g     F .text	000000a4 UART_putc
82000bc8 g     F .text	00000034 UART_printf
820013ec g     F .text	00000020 .hidden __aeabi_uidivmod
820015b4 g       .rodata	00000000 _end
820008b8 g     F .text	000002d0 UART_goto
8200140c  w    F .text	00000004 .hidden __aeabi_idiv0
82000804 g     F .text	000000b4 UART_clear
820011ec g     F .text	00000014 raise



Disassembly of section .text:

82000000 <_start>:
# File: start.S
# ======================================================================

.globl _start
_start:
	mov	r4, #0			// r4=0
82000000:	e3a04000 	mov	r4, #0
	mcr	p15, #0, r4, c7, c5, #0	// invalidate i-cache
82000004:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
	dsb				// data synchronization barrier
82000008:	f57ff04f 	dsb	sy
	mcr	p15, #0, r4, c7, c5, #4	// flush prefetch buffer
8200000c:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}

	push	{lr}			// save lr
82000010:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	str	sp, _saved_sp		// save u-boot sp
82000014:	e58fd038 	str	sp, [pc, #56]	; 82000054 <_saved_sp>
	ldr	sp, _svc_stack		// set svc stack
82000018:	e59fd038 	ldr	sp, [pc, #56]	; 82000058 <_svc_stack>

	ldr	r4, _bss_start		// r4=bss_start
8200001c:	e59f4028 	ldr	r4, [pc, #40]	; 8200004c <_bss_start>
	ldr	r5, _bss_end		// r5=bss_end
82000020:	e59f5028 	ldr	r5, [pc, #40]	; 82000050 <_bss_end>
	cmp	r4, r5			// if r4==r5
82000024:	e1540005 	cmp	r4, r5
	beq	.L1 			// then goto .L1
82000028:	0a000004 	beq	82000040 <_start+0x40>
	mov	r6, #0			// r6=0
8200002c:	e3a06000 	mov	r6, #0
.L0:
	str	r6, [r4]		// *r4=r6
82000030:	e5846000 	str	r6, [r4]
	add	r4, r4, #4		// r4=r4+4
82000034:	e2844004 	add	r4, r4, #4
	cmp	r4, r5			// if r4!=r5
82000038:	e1540005 	cmp	r4, r5
	bne	.L0			// then goto .L0
8200003c:	1afffffb 	bne	82000030 <_start+0x30>
.L1:
	bl	main			// main(argc, argv);
82000040:	eb000005 	bl	8200005c <main>

	ldr	sp, _saved_sp		// restore u-boot sp
82000044:	e59fd008 	ldr	sp, [pc, #8]	; 82000054 <_saved_sp>
	pop	{pc}			// restore pc
82000048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

8200004c <_bss_start>:
8200004c:	820015b4 	andhi	r1, r0, #180, 10	; 0x2d000000

82000050 <_bss_end>:
82000050:	820015b4 	andhi	r1, r0, #180, 10	; 0x2d000000

82000054 <_saved_sp>:
82000054:	00000000 	andeq	r0, r0, r0

82000058 <_svc_stack>:
82000058:	82000000 	andhi	r0, r0, #0

8200005c <main>:
#include "uart.h"

// ======================================================================

int main(void)
{
8200005c:	e92d4800 	push	{fp, lr}
82000060:	e28db004 	add	fp, sp, #4
82000064:	e24dd068 	sub	sp, sp, #104	; 0x68
  char *ptr = "Hello world!";
82000068:	e3013410 	movw	r3, #5136	; 0x1410
8200006c:	e3483200 	movt	r3, #33280	; 0x8200
82000070:	e50b3008 	str	r3, [fp, #-8]
  char *np = 0;
82000074:	e3a03000 	mov	r3, #0
82000078:	e50b300c 	str	r3, [fp, #-12]
  int i = 5;
8200007c:	e3a03005 	mov	r3, #5
82000080:	e50b3010 	str	r3, [fp, #-16]
  unsigned int bs = sizeof(int) * 8;
82000084:	e3a03020 	mov	r3, #32
82000088:	e50b3014 	str	r3, [fp, #-20]
  int mi;
  char buf[80];

  mi = (1 << (bs - 1)) + 1;
8200008c:	e51b3014 	ldr	r3, [fp, #-20]
82000090:	e2433001 	sub	r3, r3, #1
82000094:	e1a02003 	mov	r2, r3
82000098:	e3a03001 	mov	r3, #1
8200009c:	e1a03213 	lsl	r3, r3, r2
820000a0:	e2833001 	add	r3, r3, #1
820000a4:	e50b3018 	str	r3, [fp, #-24]
  UART_printf("%s\n", ptr);
820000a8:	e51b1008 	ldr	r1, [fp, #-8]
820000ac:	e3010420 	movw	r0, #5152	; 0x1420
820000b0:	e3480200 	movt	r0, #33280	; 0x8200
820000b4:	eb0002c3 	bl	82000bc8 <UART_printf>
  UART_printf("%s is null pointer\n", np);
820000b8:	e51b100c 	ldr	r1, [fp, #-12]
820000bc:	e3010424 	movw	r0, #5156	; 0x1424
820000c0:	e3480200 	movt	r0, #33280	; 0x8200
820000c4:	eb0002bf 	bl	82000bc8 <UART_printf>
  UART_printf("%d = 5\n", i);
820000c8:	e51b1010 	ldr	r1, [fp, #-16]
820000cc:	e3010438 	movw	r0, #5176	; 0x1438
820000d0:	e3480200 	movt	r0, #33280	; 0x8200
820000d4:	eb0002bb 	bl	82000bc8 <UART_printf>
  UART_printf("%d = - max int\n", mi);
820000d8:	e51b1018 	ldr	r1, [fp, #-24]
820000dc:	e3010440 	movw	r0, #5184	; 0x1440
820000e0:	e3480200 	movt	r0, #33280	; 0x8200
820000e4:	eb0002b7 	bl	82000bc8 <UART_printf>
  UART_printf("char %c = 'a'\n", 'a');
820000e8:	e3a01061 	mov	r1, #97	; 0x61
820000ec:	e3010450 	movw	r0, #5200	; 0x1450
820000f0:	e3480200 	movt	r0, #33280	; 0x8200
820000f4:	eb0002b3 	bl	82000bc8 <UART_printf>
  UART_printf("hex %x = ff\n", 0xff);
820000f8:	e3a010ff 	mov	r1, #255	; 0xff
820000fc:	e3010460 	movw	r0, #5216	; 0x1460
82000100:	e3480200 	movt	r0, #33280	; 0x8200
82000104:	eb0002af 	bl	82000bc8 <UART_printf>
  UART_printf("hex %02x = 00\n", 0);
82000108:	e3a01000 	mov	r1, #0
8200010c:	e3010470 	movw	r0, #5232	; 0x1470
82000110:	e3480200 	movt	r0, #33280	; 0x8200
82000114:	eb0002ab 	bl	82000bc8 <UART_printf>
  UART_printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
82000118:	e3e03002 	mvn	r3, #2
8200011c:	e3e02002 	mvn	r2, #2
82000120:	e3e01002 	mvn	r1, #2
82000124:	e3010480 	movw	r0, #5248	; 0x1480
82000128:	e3480200 	movt	r0, #33280	; 0x8200
8200012c:	eb0002a5 	bl	82000bc8 <UART_printf>
  UART_printf("%d %s(s)%", 0, "message");
82000130:	e30124a4 	movw	r2, #5284	; 0x14a4
82000134:	e3482200 	movt	r2, #33280	; 0x8200
82000138:	e3a01000 	mov	r1, #0
8200013c:	e30104ac 	movw	r0, #5292	; 0x14ac
82000140:	e3480200 	movt	r0, #33280	; 0x8200
82000144:	eb00029f 	bl	82000bc8 <UART_printf>
  UART_printf("\n");
82000148:	e30104b8 	movw	r0, #5304	; 0x14b8
8200014c:	e3480200 	movt	r0, #33280	; 0x8200
82000150:	eb00029c 	bl	82000bc8 <UART_printf>
  UART_printf("%d %s(s) with %%\n", 0, "message");
82000154:	e30124a4 	movw	r2, #5284	; 0x14a4
82000158:	e3482200 	movt	r2, #33280	; 0x8200
8200015c:	e3a01000 	mov	r1, #0
82000160:	e30104bc 	movw	r0, #5308	; 0x14bc
82000164:	e3480200 	movt	r0, #33280	; 0x8200
82000168:	eb000296 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, "justif: \"%-10s\"\n", "left");
8200016c:	e24b3068 	sub	r3, fp, #104	; 0x68
82000170:	e30124d0 	movw	r2, #5328	; 0x14d0
82000174:	e3482200 	movt	r2, #33280	; 0x8200
82000178:	e30114d8 	movw	r1, #5336	; 0x14d8
8200017c:	e3481200 	movt	r1, #33280	; 0x8200
82000180:	e1a00003 	mov	r0, r3
82000184:	eb00027f 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
82000188:	e24b3068 	sub	r3, fp, #104	; 0x68
8200018c:	e1a01003 	mov	r1, r3
82000190:	e30104ec 	movw	r0, #5356	; 0x14ec
82000194:	e3480200 	movt	r0, #33280	; 0x8200
82000198:	eb00028a 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, "justif: \"%10s\"\n", "right");
8200019c:	e24b3068 	sub	r3, fp, #104	; 0x68
820001a0:	e30124f0 	movw	r2, #5360	; 0x14f0
820001a4:	e3482200 	movt	r2, #33280	; 0x8200
820001a8:	e30114f8 	movw	r1, #5368	; 0x14f8
820001ac:	e3481200 	movt	r1, #33280	; 0x8200
820001b0:	e1a00003 	mov	r0, r3
820001b4:	eb000273 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
820001b8:	e24b3068 	sub	r3, fp, #104	; 0x68
820001bc:	e1a01003 	mov	r1, r3
820001c0:	e30104ec 	movw	r0, #5356	; 0x14ec
820001c4:	e3480200 	movt	r0, #33280	; 0x8200
820001c8:	eb00027e 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, " 3: %04d zero padded\n", 3);
820001cc:	e24b3068 	sub	r3, fp, #104	; 0x68
820001d0:	e3a02003 	mov	r2, #3
820001d4:	e3011508 	movw	r1, #5384	; 0x1508
820001d8:	e3481200 	movt	r1, #33280	; 0x8200
820001dc:	e1a00003 	mov	r0, r3
820001e0:	eb000268 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
820001e4:	e24b3068 	sub	r3, fp, #104	; 0x68
820001e8:	e1a01003 	mov	r1, r3
820001ec:	e30104ec 	movw	r0, #5356	; 0x14ec
820001f0:	e3480200 	movt	r0, #33280	; 0x8200
820001f4:	eb000273 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, " 3: %-4d left justif.\n", 3);
820001f8:	e24b3068 	sub	r3, fp, #104	; 0x68
820001fc:	e3a02003 	mov	r2, #3
82000200:	e3011520 	movw	r1, #5408	; 0x1520
82000204:	e3481200 	movt	r1, #33280	; 0x8200
82000208:	e1a00003 	mov	r0, r3
8200020c:	eb00025d 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
82000210:	e24b3068 	sub	r3, fp, #104	; 0x68
82000214:	e1a01003 	mov	r1, r3
82000218:	e30104ec 	movw	r0, #5356	; 0x14ec
8200021c:	e3480200 	movt	r0, #33280	; 0x8200
82000220:	eb000268 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, " 3: %4d right justif.\n", 3);
82000224:	e24b3068 	sub	r3, fp, #104	; 0x68
82000228:	e3a02003 	mov	r2, #3
8200022c:	e3011538 	movw	r1, #5432	; 0x1538
82000230:	e3481200 	movt	r1, #33280	; 0x8200
82000234:	e1a00003 	mov	r0, r3
82000238:	eb000252 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
8200023c:	e24b3068 	sub	r3, fp, #104	; 0x68
82000240:	e1a01003 	mov	r1, r3
82000244:	e30104ec 	movw	r0, #5356	; 0x14ec
82000248:	e3480200 	movt	r0, #33280	; 0x8200
8200024c:	eb00025d 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, "-3: %04d zero padded\n", -3);
82000250:	e24b3068 	sub	r3, fp, #104	; 0x68
82000254:	e3e02002 	mvn	r2, #2
82000258:	e3011550 	movw	r1, #5456	; 0x1550
8200025c:	e3481200 	movt	r1, #33280	; 0x8200
82000260:	e1a00003 	mov	r0, r3
82000264:	eb000247 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
82000268:	e24b3068 	sub	r3, fp, #104	; 0x68
8200026c:	e1a01003 	mov	r1, r3
82000270:	e30104ec 	movw	r0, #5356	; 0x14ec
82000274:	e3480200 	movt	r0, #33280	; 0x8200
82000278:	eb000252 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, "-3: %-4d left justif.\n", -3);
8200027c:	e24b3068 	sub	r3, fp, #104	; 0x68
82000280:	e3e02002 	mvn	r2, #2
82000284:	e3011568 	movw	r1, #5480	; 0x1568
82000288:	e3481200 	movt	r1, #33280	; 0x8200
8200028c:	e1a00003 	mov	r0, r3
82000290:	eb00023c 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
82000294:	e24b3068 	sub	r3, fp, #104	; 0x68
82000298:	e1a01003 	mov	r1, r3
8200029c:	e30104ec 	movw	r0, #5356	; 0x14ec
820002a0:	e3480200 	movt	r0, #33280	; 0x8200
820002a4:	eb000247 	bl	82000bc8 <UART_printf>
  UART_sprintf(buf, "-3: %4d right justif.\n", -3);
820002a8:	e24b3068 	sub	r3, fp, #104	; 0x68
820002ac:	e3e02002 	mvn	r2, #2
820002b0:	e3011580 	movw	r1, #5504	; 0x1580
820002b4:	e3481200 	movt	r1, #33280	; 0x8200
820002b8:	e1a00003 	mov	r0, r3
820002bc:	eb000231 	bl	82000b88 <UART_sprintf>
  UART_printf("%s", buf);
820002c0:	e24b3068 	sub	r3, fp, #104	; 0x68
820002c4:	e1a01003 	mov	r1, r3
820002c8:	e30104ec 	movw	r0, #5356	; 0x14ec
820002cc:	e3480200 	movt	r0, #33280	; 0x8200
820002d0:	eb00023c 	bl	82000bc8 <UART_printf>

  return 0;
820002d4:	e3a03000 	mov	r3, #0
}
820002d8:	e1a00003 	mov	r0, r3
820002dc:	e24bd004 	sub	sp, fp, #4
820002e0:	e8bd8800 	pop	{fp, pc}

820002e4 <UART_getc>:
#define LSR_TX_FIFO_E	0x20	// LSR transmit fifo empty

// ======================================================================

int UART_getc(void)
{
820002e4:	e92d4800 	push	{fp, lr}
820002e8:	e28db004 	add	fp, sp, #4
820002ec:	e24dd008 	sub	sp, sp, #8
  unsigned int c;

  while ((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
820002f0:	e1a00000 	nop			; (mov r0, r0)
820002f4:	e3093014 	movw	r3, #36884	; 0x9014
820002f8:	e34434e0 	movt	r3, #17632	; 0x44e0
820002fc:	e5933000 	ldr	r3, [r3]
82000300:	e2033001 	and	r3, r3, #1
82000304:	e3530000 	cmp	r3, #0
82000308:	0afffff9 	beq	820002f4 <UART_getc+0x10>

  c = IO_READ(UART1_RHR_REG);
8200030c:	e3a03a09 	mov	r3, #36864	; 0x9000
82000310:	e34434e0 	movt	r3, #17632	; 0x44e0
82000314:	e5933000 	ldr	r3, [r3]
82000318:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
8200031c:	e51b3008 	ldr	r3, [fp, #-8]
82000320:	e1a00003 	mov	r0, r3
82000324:	eb0000f1 	bl	820006f0 <UART_putc>

  return (int)c;
82000328:	e51b3008 	ldr	r3, [fp, #-8]
}
8200032c:	e1a00003 	mov	r0, r3
82000330:	e24bd004 	sub	sp, fp, #4
82000334:	e8bd8800 	pop	{fp, pc}

82000338 <UART_getc_noblock>:

// ======================================================================

int UART_getc_noblock(void)
{
82000338:	e92d4800 	push	{fp, lr}
8200033c:	e28db004 	add	fp, sp, #4
82000340:	e24dd008 	sub	sp, sp, #8
  unsigned int c;
  
  c = IO_READ(UART1_RHR_REG);
82000344:	e3a03a09 	mov	r3, #36864	; 0x9000
82000348:	e34434e0 	movt	r3, #17632	; 0x44e0
8200034c:	e5933000 	ldr	r3, [r3]
82000350:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
82000354:	e51b3008 	ldr	r3, [fp, #-8]
82000358:	e1a00003 	mov	r0, r3
8200035c:	eb0000e3 	bl	820006f0 <UART_putc>

  return (int)c;
82000360:	e51b3008 	ldr	r3, [fp, #-8]
}
82000364:	e1a00003 	mov	r0, r3
82000368:	e24bd004 	sub	sp, fp, #4
8200036c:	e8bd8800 	pop	{fp, pc}

82000370 <UART_gethex>:

// ======================================================================

unsigned int UART_gethex(void)
{
82000370:	e92d4800 	push	{fp, lr}
82000374:	e28db004 	add	fp, sp, #4
82000378:	e24dd010 	sub	sp, sp, #16
  unsigned int temp;
  unsigned int hex= 0x00000000;
8200037c:	e3a03000 	mov	r3, #0
82000380:	e50b300c 	str	r3, [fp, #-12]
  int i = 0;
82000384:	e3a03000 	mov	r3, #0
82000388:	e50b3010 	str	r3, [fp, #-16]
  while(1){

  while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
8200038c:	e1a00000 	nop			; (mov r0, r0)
82000390:	e3093014 	movw	r3, #36884	; 0x9014
82000394:	e34434e0 	movt	r3, #17632	; 0x44e0
82000398:	e5933000 	ldr	r3, [r3]
8200039c:	e2033001 	and	r3, r3, #1
820003a0:	e3530000 	cmp	r3, #0
820003a4:	0afffff9 	beq	82000390 <UART_gethex+0x20>
    temp = IO_READ(UART1_RHR_REG);
820003a8:	e3a03a09 	mov	r3, #36864	; 0x9000
820003ac:	e34434e0 	movt	r3, #17632	; 0x44e0
820003b0:	e5933000 	ldr	r3, [r3]
820003b4:	e50b3008 	str	r3, [fp, #-8]
    UART_putc(temp);
820003b8:	e51b3008 	ldr	r3, [fp, #-8]
820003bc:	e1a00003 	mov	r0, r3
820003c0:	eb0000ca 	bl	820006f0 <UART_putc>
    if(temp == '\n' || temp == '\r')return hex;
820003c4:	e51b3008 	ldr	r3, [fp, #-8]
820003c8:	e353000a 	cmp	r3, #10
820003cc:	0a000002 	beq	820003dc <UART_gethex+0x6c>
820003d0:	e51b3008 	ldr	r3, [fp, #-8]
820003d4:	e353000d 	cmp	r3, #13
820003d8:	1a000001 	bne	820003e4 <UART_gethex+0x74>
820003dc:	e51b300c 	ldr	r3, [fp, #-12]
820003e0:	ea000089 	b	8200060c <UART_gethex+0x29c>
    else if(temp == '0')temp = 0x00000000;
820003e4:	e51b3008 	ldr	r3, [fp, #-8]
820003e8:	e3530030 	cmp	r3, #48	; 0x30
820003ec:	1a000002 	bne	820003fc <UART_gethex+0x8c>
820003f0:	e3a03000 	mov	r3, #0
820003f4:	e50b3008 	str	r3, [fp, #-8]
820003f8:	ea00006d 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '1')temp = 0x00000001;
820003fc:	e51b3008 	ldr	r3, [fp, #-8]
82000400:	e3530031 	cmp	r3, #49	; 0x31
82000404:	1a000002 	bne	82000414 <UART_gethex+0xa4>
82000408:	e3a03001 	mov	r3, #1
8200040c:	e50b3008 	str	r3, [fp, #-8]
82000410:	ea000067 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '2')temp = 0x00000002;
82000414:	e51b3008 	ldr	r3, [fp, #-8]
82000418:	e3530032 	cmp	r3, #50	; 0x32
8200041c:	1a000002 	bne	8200042c <UART_gethex+0xbc>
82000420:	e3a03002 	mov	r3, #2
82000424:	e50b3008 	str	r3, [fp, #-8]
82000428:	ea000061 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '3')temp = 0x00000003;
8200042c:	e51b3008 	ldr	r3, [fp, #-8]
82000430:	e3530033 	cmp	r3, #51	; 0x33
82000434:	1a000002 	bne	82000444 <UART_gethex+0xd4>
82000438:	e3a03003 	mov	r3, #3
8200043c:	e50b3008 	str	r3, [fp, #-8]
82000440:	ea00005b 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '4')temp = 0x00000004;
82000444:	e51b3008 	ldr	r3, [fp, #-8]
82000448:	e3530034 	cmp	r3, #52	; 0x34
8200044c:	1a000002 	bne	8200045c <UART_gethex+0xec>
82000450:	e3a03004 	mov	r3, #4
82000454:	e50b3008 	str	r3, [fp, #-8]
82000458:	ea000055 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '5')temp = 0x00000005;
8200045c:	e51b3008 	ldr	r3, [fp, #-8]
82000460:	e3530035 	cmp	r3, #53	; 0x35
82000464:	1a000002 	bne	82000474 <UART_gethex+0x104>
82000468:	e3a03005 	mov	r3, #5
8200046c:	e50b3008 	str	r3, [fp, #-8]
82000470:	ea00004f 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '6')temp = 0x00000006;
82000474:	e51b3008 	ldr	r3, [fp, #-8]
82000478:	e3530036 	cmp	r3, #54	; 0x36
8200047c:	1a000002 	bne	8200048c <UART_gethex+0x11c>
82000480:	e3a03006 	mov	r3, #6
82000484:	e50b3008 	str	r3, [fp, #-8]
82000488:	ea000049 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '7')temp = 0x00000007;
8200048c:	e51b3008 	ldr	r3, [fp, #-8]
82000490:	e3530037 	cmp	r3, #55	; 0x37
82000494:	1a000002 	bne	820004a4 <UART_gethex+0x134>
82000498:	e3a03007 	mov	r3, #7
8200049c:	e50b3008 	str	r3, [fp, #-8]
820004a0:	ea000043 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '8')temp = 0x00000008;
820004a4:	e51b3008 	ldr	r3, [fp, #-8]
820004a8:	e3530038 	cmp	r3, #56	; 0x38
820004ac:	1a000002 	bne	820004bc <UART_gethex+0x14c>
820004b0:	e3a03008 	mov	r3, #8
820004b4:	e50b3008 	str	r3, [fp, #-8]
820004b8:	ea00003d 	b	820005b4 <UART_gethex+0x244>
    else if(temp == '9')temp = 0x00000009;
820004bc:	e51b3008 	ldr	r3, [fp, #-8]
820004c0:	e3530039 	cmp	r3, #57	; 0x39
820004c4:	1a000002 	bne	820004d4 <UART_gethex+0x164>
820004c8:	e3a03009 	mov	r3, #9
820004cc:	e50b3008 	str	r3, [fp, #-8]
820004d0:	ea000037 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'A' || temp == 'a')temp = 0x0000000A;
820004d4:	e51b3008 	ldr	r3, [fp, #-8]
820004d8:	e3530041 	cmp	r3, #65	; 0x41
820004dc:	0a000002 	beq	820004ec <UART_gethex+0x17c>
820004e0:	e51b3008 	ldr	r3, [fp, #-8]
820004e4:	e3530061 	cmp	r3, #97	; 0x61
820004e8:	1a000002 	bne	820004f8 <UART_gethex+0x188>
820004ec:	e3a0300a 	mov	r3, #10
820004f0:	e50b3008 	str	r3, [fp, #-8]
820004f4:	ea00002e 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'B' || temp == 'b')temp = 0x0000000B;
820004f8:	e51b3008 	ldr	r3, [fp, #-8]
820004fc:	e3530042 	cmp	r3, #66	; 0x42
82000500:	0a000002 	beq	82000510 <UART_gethex+0x1a0>
82000504:	e51b3008 	ldr	r3, [fp, #-8]
82000508:	e3530062 	cmp	r3, #98	; 0x62
8200050c:	1a000002 	bne	8200051c <UART_gethex+0x1ac>
82000510:	e3a0300b 	mov	r3, #11
82000514:	e50b3008 	str	r3, [fp, #-8]
82000518:	ea000025 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'C' || temp == 'c')temp = 0x0000000C;
8200051c:	e51b3008 	ldr	r3, [fp, #-8]
82000520:	e3530043 	cmp	r3, #67	; 0x43
82000524:	0a000002 	beq	82000534 <UART_gethex+0x1c4>
82000528:	e51b3008 	ldr	r3, [fp, #-8]
8200052c:	e3530063 	cmp	r3, #99	; 0x63
82000530:	1a000002 	bne	82000540 <UART_gethex+0x1d0>
82000534:	e3a0300c 	mov	r3, #12
82000538:	e50b3008 	str	r3, [fp, #-8]
8200053c:	ea00001c 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'D' || temp == 'd')temp = 0x0000000D;
82000540:	e51b3008 	ldr	r3, [fp, #-8]
82000544:	e3530044 	cmp	r3, #68	; 0x44
82000548:	0a000002 	beq	82000558 <UART_gethex+0x1e8>
8200054c:	e51b3008 	ldr	r3, [fp, #-8]
82000550:	e3530064 	cmp	r3, #100	; 0x64
82000554:	1a000002 	bne	82000564 <UART_gethex+0x1f4>
82000558:	e3a0300d 	mov	r3, #13
8200055c:	e50b3008 	str	r3, [fp, #-8]
82000560:	ea000013 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'E' || temp == 'e')temp = 0x0000000E;
82000564:	e51b3008 	ldr	r3, [fp, #-8]
82000568:	e3530045 	cmp	r3, #69	; 0x45
8200056c:	0a000002 	beq	8200057c <UART_gethex+0x20c>
82000570:	e51b3008 	ldr	r3, [fp, #-8]
82000574:	e3530065 	cmp	r3, #101	; 0x65
82000578:	1a000002 	bne	82000588 <UART_gethex+0x218>
8200057c:	e3a0300e 	mov	r3, #14
82000580:	e50b3008 	str	r3, [fp, #-8]
82000584:	ea00000a 	b	820005b4 <UART_gethex+0x244>
    else if(temp == 'F' || temp == 'f')temp = 0x0000000F;
82000588:	e51b3008 	ldr	r3, [fp, #-8]
8200058c:	e3530046 	cmp	r3, #70	; 0x46
82000590:	0a000002 	beq	820005a0 <UART_gethex+0x230>
82000594:	e51b3008 	ldr	r3, [fp, #-8]
82000598:	e3530066 	cmp	r3, #102	; 0x66
8200059c:	1a000002 	bne	820005ac <UART_gethex+0x23c>
820005a0:	e3a0300f 	mov	r3, #15
820005a4:	e50b3008 	str	r3, [fp, #-8]
820005a8:	ea000001 	b	820005b4 <UART_gethex+0x244>
    else return temp;
820005ac:	e51b3008 	ldr	r3, [fp, #-8]
820005b0:	ea000015 	b	8200060c <UART_gethex+0x29c>
    if( i == 0 ){
820005b4:	e51b3010 	ldr	r3, [fp, #-16]
820005b8:	e3530000 	cmp	r3, #0
820005bc:	1a000007 	bne	820005e0 <UART_gethex+0x270>
      hex = hex + temp;
820005c0:	e51b200c 	ldr	r2, [fp, #-12]
820005c4:	e51b3008 	ldr	r3, [fp, #-8]
820005c8:	e0823003 	add	r3, r2, r3
820005cc:	e50b300c 	str	r3, [fp, #-12]
      i++;
820005d0:	e51b3010 	ldr	r3, [fp, #-16]
820005d4:	e2833001 	add	r3, r3, #1
820005d8:	e50b3010 	str	r3, [fp, #-16]
820005dc:	ea000009 	b	82000608 <UART_gethex+0x298>
    }
    else{
      hex = hex << 4;
820005e0:	e51b300c 	ldr	r3, [fp, #-12]
820005e4:	e1a03203 	lsl	r3, r3, #4
820005e8:	e50b300c 	str	r3, [fp, #-12]
      hex = hex + temp;
820005ec:	e51b200c 	ldr	r2, [fp, #-12]
820005f0:	e51b3008 	ldr	r3, [fp, #-8]
820005f4:	e0823003 	add	r3, r2, r3
820005f8:	e50b300c 	str	r3, [fp, #-12]
      i++;
820005fc:	e51b3010 	ldr	r3, [fp, #-16]
82000600:	e2833001 	add	r3, r3, #1
82000604:	e50b3010 	str	r3, [fp, #-16]
    }
  }
82000608:	eaffff5f 	b	8200038c <UART_gethex+0x1c>
  return hex;
}
8200060c:	e1a00003 	mov	r0, r3
82000610:	e24bd004 	sub	sp, fp, #4
82000614:	e8bd8800 	pop	{fp, pc}

82000618 <UART_gets>:

// ======================================================================

char *UART_gets(char *str)
{
82000618:	e92d4800 	push	{fp, lr}
8200061c:	e28db004 	add	fp, sp, #4
82000620:	e24dd018 	sub	sp, sp, #24
82000624:	e50b0018 	str	r0, [fp, #-24]
  int j = 0;
82000628:	e3a03000 	mov	r3, #0
8200062c:	e50b3008 	str	r3, [fp, #-8]
  int i = 0;
82000630:	e3a03000 	mov	r3, #0
82000634:	e50b300c 	str	r3, [fp, #-12]
  int q;

  for(j; j < 512; j++){
82000638:	ea000007 	b	8200065c <UART_gets+0x44>
     str[j] = '\0';
8200063c:	e51b3008 	ldr	r3, [fp, #-8]
82000640:	e51b2018 	ldr	r2, [fp, #-24]
82000644:	e0823003 	add	r3, r2, r3
82000648:	e3a02000 	mov	r2, #0
8200064c:	e5c32000 	strb	r2, [r3]
{
  int j = 0;
  int i = 0;
  int q;

  for(j; j < 512; j++){
82000650:	e51b3008 	ldr	r3, [fp, #-8]
82000654:	e2833001 	add	r3, r3, #1
82000658:	e50b3008 	str	r3, [fp, #-8]
8200065c:	e51b3008 	ldr	r3, [fp, #-8]
82000660:	e3530c02 	cmp	r3, #512	; 0x200
82000664:	bafffff4 	blt	8200063c <UART_gets+0x24>
     str[j] = '\0';
  }

  while(1){

    while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
82000668:	e1a00000 	nop			; (mov r0, r0)
8200066c:	e3093014 	movw	r3, #36884	; 0x9014
82000670:	e34434e0 	movt	r3, #17632	; 0x44e0
82000674:	e5933000 	ldr	r3, [r3]
82000678:	e2033001 	and	r3, r3, #1
8200067c:	e3530000 	cmp	r3, #0
82000680:	0afffff9 	beq	8200066c <UART_gets+0x54>

    q = IO_READ(UART1_RHR_REG);
82000684:	e3a03a09 	mov	r3, #36864	; 0x9000
82000688:	e34434e0 	movt	r3, #17632	; 0x44e0
8200068c:	e5933000 	ldr	r3, [r3]
82000690:	e50b3010 	str	r3, [fp, #-16]
    UART_putc(q);
82000694:	e51b0010 	ldr	r0, [fp, #-16]
82000698:	eb000014 	bl	820006f0 <UART_putc>
    if(q == '\n' || q == '\r'){
8200069c:	e51b3010 	ldr	r3, [fp, #-16]
820006a0:	e353000a 	cmp	r3, #10
820006a4:	0a000002 	beq	820006b4 <UART_gets+0x9c>
820006a8:	e51b3010 	ldr	r3, [fp, #-16]
820006ac:	e353000d 	cmp	r3, #13
820006b0:	1a000001 	bne	820006bc <UART_gets+0xa4>
        return str;
820006b4:	e51b3018 	ldr	r3, [fp, #-24]
820006b8:	ea000009 	b	820006e4 <UART_gets+0xcc>
    }
    str[i] = q;
820006bc:	e51b300c 	ldr	r3, [fp, #-12]
820006c0:	e51b2018 	ldr	r2, [fp, #-24]
820006c4:	e0823003 	add	r3, r2, r3
820006c8:	e51b2010 	ldr	r2, [fp, #-16]
820006cc:	e6ef2072 	uxtb	r2, r2
820006d0:	e5c32000 	strb	r2, [r3]
    i++;
820006d4:	e51b300c 	ldr	r3, [fp, #-12]
820006d8:	e2833001 	add	r3, r3, #1
820006dc:	e50b300c 	str	r3, [fp, #-12]
  }  
820006e0:	eaffffe0 	b	82000668 <UART_gets+0x50>
}
820006e4:	e1a00003 	mov	r0, r3
820006e8:	e24bd004 	sub	sp, fp, #4
820006ec:	e8bd8800 	pop	{fp, pc}

820006f0 <UART_putc>:

// ======================================================================

int UART_putc(int c)
{
820006f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
820006f4:	e28db000 	add	fp, sp, #0
820006f8:	e24dd00c 	sub	sp, sp, #12
820006fc:	e50b0008 	str	r0, [fp, #-8]
  if ((c == '\r') || (c == '\n')){
82000700:	e51b3008 	ldr	r3, [fp, #-8]
82000704:	e353000d 	cmp	r3, #13
82000708:	0a000002 	beq	82000718 <UART_putc+0x28>
8200070c:	e51b3008 	ldr	r3, [fp, #-8]
82000710:	e353000a 	cmp	r3, #10
82000714:	1a00000e 	bne	82000754 <UART_putc+0x64>
    c = '\r';
82000718:	e3a0300d 	mov	r3, #13
8200071c:	e50b3008 	str	r3, [fp, #-8]
 
  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000720:	e1a00000 	nop			; (mov r0, r0)
82000724:	e3093014 	movw	r3, #36884	; 0x9014
82000728:	e34434e0 	movt	r3, #17632	; 0x44e0
8200072c:	e5933000 	ldr	r3, [r3]
82000730:	e2033020 	and	r3, r3, #32
82000734:	e3530000 	cmp	r3, #0
82000738:	0afffff9 	beq	82000724 <UART_putc+0x34>

    IO_WRITE(UART1_THR_REG, c);
8200073c:	e3a03a09 	mov	r3, #36864	; 0x9000
82000740:	e34434e0 	movt	r3, #17632	; 0x44e0
82000744:	e51b2008 	ldr	r2, [fp, #-8]
82000748:	e5832000 	str	r2, [r3]

    c = '\n';
8200074c:	e3a0300a 	mov	r3, #10
82000750:	e50b3008 	str	r3, [fp, #-8]
  }

  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000754:	e1a00000 	nop			; (mov r0, r0)
82000758:	e3093014 	movw	r3, #36884	; 0x9014
8200075c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000760:	e5933000 	ldr	r3, [r3]
82000764:	e2033020 	and	r3, r3, #32
82000768:	e3530000 	cmp	r3, #0
8200076c:	0afffff9 	beq	82000758 <UART_putc+0x68>

  IO_WRITE(UART1_THR_REG, c);
82000770:	e3a03a09 	mov	r3, #36864	; 0x9000
82000774:	e34434e0 	movt	r3, #17632	; 0x44e0
82000778:	e51b2008 	ldr	r2, [fp, #-8]
8200077c:	e5832000 	str	r2, [r3]

  return c;
82000780:	e51b3008 	ldr	r3, [fp, #-8]
  

}
82000784:	e1a00003 	mov	r0, r3
82000788:	e24bd000 	sub	sp, fp, #0
8200078c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82000790:	e12fff1e 	bx	lr

82000794 <UART_puts>:

// ======================================================================

int UART_puts(const char *s)
{
82000794:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
82000798:	e28db000 	add	fp, sp, #0
8200079c:	e24dd014 	sub	sp, sp, #20
820007a0:	e50b0010 	str	r0, [fp, #-16]
    int i = 0;
820007a4:	e3a03000 	mov	r3, #0
820007a8:	e50b3008 	str	r3, [fp, #-8]
    while(s[i] != '\0'){
820007ac:	ea000009 	b	820007d8 <UART_puts+0x44>
    IO_WRITE(UART1_THR_REG,s[i]);
820007b0:	e3a03a09 	mov	r3, #36864	; 0x9000
820007b4:	e34434e0 	movt	r3, #17632	; 0x44e0
820007b8:	e51b2008 	ldr	r2, [fp, #-8]
820007bc:	e51b1010 	ldr	r1, [fp, #-16]
820007c0:	e0812002 	add	r2, r1, r2
820007c4:	e5d22000 	ldrb	r2, [r2]
820007c8:	e5832000 	str	r2, [r3]
    i++;
820007cc:	e51b3008 	ldr	r3, [fp, #-8]
820007d0:	e2833001 	add	r3, r3, #1
820007d4:	e50b3008 	str	r3, [fp, #-8]
// ======================================================================

int UART_puts(const char *s)
{
    int i = 0;
    while(s[i] != '\0'){
820007d8:	e51b3008 	ldr	r3, [fp, #-8]
820007dc:	e51b2010 	ldr	r2, [fp, #-16]
820007e0:	e0823003 	add	r3, r2, r3
820007e4:	e5d33000 	ldrb	r3, [r3]
820007e8:	e3530000 	cmp	r3, #0
820007ec:	1affffef 	bne	820007b0 <UART_puts+0x1c>
    IO_WRITE(UART1_THR_REG,s[i]);
    i++;
    }
  return (int)s;
820007f0:	e51b3010 	ldr	r3, [fp, #-16]
}
820007f4:	e1a00003 	mov	r0, r3
820007f8:	e24bd000 	sub	sp, fp, #0
820007fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82000800:	e12fff1e 	bx	lr

82000804 <UART_clear>:

// ======================================================================

void UART_clear(void)
{
82000804:	e92d4800 	push	{fp, lr}
82000808:	e28db004 	add	fp, sp, #4
8200080c:	e24dd018 	sub	sp, sp, #24
  char escsqnce[20] = "\033[2J\033[0;0H";
82000810:	e3012598 	movw	r2, #5528	; 0x1598
82000814:	e3482200 	movt	r2, #33280	; 0x8200
82000818:	e24b3018 	sub	r3, fp, #24
8200081c:	e8920007 	ldm	r2, {r0, r1, r2}
82000820:	e8a30003 	stmia	r3!, {r0, r1}
82000824:	e1c320b0 	strh	r2, [r3]
82000828:	e2833002 	add	r3, r3, #2
8200082c:	e1a02822 	lsr	r2, r2, #16
82000830:	e5c32000 	strb	r2, [r3]
82000834:	e24b300d 	sub	r3, fp, #13
82000838:	e3a02000 	mov	r2, #0
8200083c:	e5c32000 	strb	r2, [r3]
82000840:	e2833001 	add	r3, r3, #1
82000844:	e3a02000 	mov	r2, #0
82000848:	e5c32000 	strb	r2, [r3]
8200084c:	e2833001 	add	r3, r3, #1
82000850:	e3a02000 	mov	r2, #0
82000854:	e5c32000 	strb	r2, [r3]
82000858:	e2833001 	add	r3, r3, #1
8200085c:	e3a02000 	mov	r2, #0
82000860:	e5c32000 	strb	r2, [r3]
82000864:	e2833001 	add	r3, r3, #1
82000868:	e3a02000 	mov	r2, #0
8200086c:	e5c32000 	strb	r2, [r3]
82000870:	e2833001 	add	r3, r3, #1
82000874:	e3a02000 	mov	r2, #0
82000878:	e5c32000 	strb	r2, [r3]
8200087c:	e2833001 	add	r3, r3, #1
82000880:	e3a02000 	mov	r2, #0
82000884:	e5c32000 	strb	r2, [r3]
82000888:	e2833001 	add	r3, r3, #1
8200088c:	e3a02000 	mov	r2, #0
82000890:	e5c32000 	strb	r2, [r3]
82000894:	e2833001 	add	r3, r3, #1
82000898:	e3a02000 	mov	r2, #0
8200089c:	e5c32000 	strb	r2, [r3]
820008a0:	e2833001 	add	r3, r3, #1
  UART_puts(escsqnce);
820008a4:	e24b3018 	sub	r3, fp, #24
820008a8:	e1a00003 	mov	r0, r3
820008ac:	ebffffb8 	bl	82000794 <UART_puts>
}
820008b0:	e24bd004 	sub	sp, fp, #4
820008b4:	e8bd8800 	pop	{fp, pc}

820008b8 <UART_goto>:

// ======================================================================

void UART_goto(int x, int y)
{
820008b8:	e92d4800 	push	{fp, lr}
820008bc:	e28db004 	add	fp, sp, #4
820008c0:	e24dd020 	sub	sp, sp, #32
820008c4:	e50b0020 	str	r0, [fp, #-32]
820008c8:	e50b1024 	str	r1, [fp, #-36]	; 0x24
  char xnumber[3];
  char ynumber[3];
  char gotosequence1[5]= "\033[";
820008cc:	e3053b1b 	movw	r3, #23323	; 0x5b1b
820008d0:	e50b301c 	str	r3, [fp, #-28]
820008d4:	e3a03000 	mov	r3, #0
820008d8:	e54b3018 	strb	r3, [fp, #-24]
  char semicolon = ';';
820008dc:	e3a0303b 	mov	r3, #59	; 0x3b
820008e0:	e54b3009 	strb	r3, [fp, #-9]
  char end = 'H';
820008e4:	e3a03048 	mov	r3, #72	; 0x48
820008e8:	e54b300a 	strb	r3, [fp, #-10]
  int i = 0;
820008ec:	e3a03000 	mov	r3, #0
820008f0:	e50b3008 	str	r3, [fp, #-8]
  for(i; i< 3; i++){
820008f4:	ea000083 	b	82000b08 <UART_goto+0x250>
    if(i == 0){
820008f8:	e51b3008 	ldr	r3, [fp, #-8]
820008fc:	e3530000 	cmp	r3, #0
82000900:	1a00001e 	bne	82000980 <UART_goto+0xc8>
    xnumber[i] = x/100+48;
82000904:	e51b1020 	ldr	r1, [fp, #-32]
82000908:	e308351f 	movw	r3, #34079	; 0x851f
8200090c:	e34531eb 	movt	r3, #20971	; 0x51eb
82000910:	e0c32391 	smull	r2, r3, r1, r3
82000914:	e1a022c3 	asr	r2, r3, #5
82000918:	e1a03fc1 	asr	r3, r1, #31
8200091c:	e0633002 	rsb	r3, r3, r2
82000920:	e6ef3073 	uxtb	r3, r3
82000924:	e2833030 	add	r3, r3, #48	; 0x30
82000928:	e6ef1073 	uxtb	r1, r3
8200092c:	e24b2010 	sub	r2, fp, #16
82000930:	e51b3008 	ldr	r3, [fp, #-8]
82000934:	e0823003 	add	r3, r2, r3
82000938:	e1a02001 	mov	r2, r1
8200093c:	e5c32000 	strb	r2, [r3]
    ynumber[i] = y/100+48;
82000940:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
82000944:	e308351f 	movw	r3, #34079	; 0x851f
82000948:	e34531eb 	movt	r3, #20971	; 0x51eb
8200094c:	e0c32391 	smull	r2, r3, r1, r3
82000950:	e1a022c3 	asr	r2, r3, #5
82000954:	e1a03fc1 	asr	r3, r1, #31
82000958:	e0633002 	rsb	r3, r3, r2
8200095c:	e6ef3073 	uxtb	r3, r3
82000960:	e2833030 	add	r3, r3, #48	; 0x30
82000964:	e6ef1073 	uxtb	r1, r3
82000968:	e24b2014 	sub	r2, fp, #20
8200096c:	e51b3008 	ldr	r3, [fp, #-8]
82000970:	e0823003 	add	r3, r2, r3
82000974:	e1a02001 	mov	r2, r1
82000978:	e5c32000 	strb	r2, [r3]
8200097c:	ea00005e 	b	82000afc <UART_goto+0x244>
    }
    else if(i == 1){
82000980:	e51b3008 	ldr	r3, [fp, #-8]
82000984:	e3530001 	cmp	r3, #1
82000988:	1a000032 	bne	82000a58 <UART_goto+0x1a0>
    xnumber[i] = ((x/10)%10)+48;
8200098c:	e51b1020 	ldr	r1, [fp, #-32]
82000990:	e3063667 	movw	r3, #26215	; 0x6667
82000994:	e3463666 	movt	r3, #26214	; 0x6666
82000998:	e0c32391 	smull	r2, r3, r1, r3
8200099c:	e1a02143 	asr	r2, r3, #2
820009a0:	e1a03fc1 	asr	r3, r1, #31
820009a4:	e0632002 	rsb	r2, r3, r2
820009a8:	e3063667 	movw	r3, #26215	; 0x6667
820009ac:	e3463666 	movt	r3, #26214	; 0x6666
820009b0:	e0c10392 	smull	r0, r1, r2, r3
820009b4:	e1a01141 	asr	r1, r1, #2
820009b8:	e1a03fc2 	asr	r3, r2, #31
820009bc:	e0633001 	rsb	r3, r3, r1
820009c0:	e1a03083 	lsl	r3, r3, #1
820009c4:	e1a01103 	lsl	r1, r3, #2
820009c8:	e0833001 	add	r3, r3, r1
820009cc:	e0633002 	rsb	r3, r3, r2
820009d0:	e6ef3073 	uxtb	r3, r3
820009d4:	e2833030 	add	r3, r3, #48	; 0x30
820009d8:	e6ef1073 	uxtb	r1, r3
820009dc:	e24b2010 	sub	r2, fp, #16
820009e0:	e51b3008 	ldr	r3, [fp, #-8]
820009e4:	e0823003 	add	r3, r2, r3
820009e8:	e1a02001 	mov	r2, r1
820009ec:	e5c32000 	strb	r2, [r3]
    ynumber[i] = ((y/10)%10)+48;
820009f0:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
820009f4:	e3063667 	movw	r3, #26215	; 0x6667
820009f8:	e3463666 	movt	r3, #26214	; 0x6666
820009fc:	e0c32391 	smull	r2, r3, r1, r3
82000a00:	e1a02143 	asr	r2, r3, #2
82000a04:	e1a03fc1 	asr	r3, r1, #31
82000a08:	e0632002 	rsb	r2, r3, r2
82000a0c:	e3063667 	movw	r3, #26215	; 0x6667
82000a10:	e3463666 	movt	r3, #26214	; 0x6666
82000a14:	e0c10392 	smull	r0, r1, r2, r3
82000a18:	e1a01141 	asr	r1, r1, #2
82000a1c:	e1a03fc2 	asr	r3, r2, #31
82000a20:	e0633001 	rsb	r3, r3, r1
82000a24:	e1a03083 	lsl	r3, r3, #1
82000a28:	e1a01103 	lsl	r1, r3, #2
82000a2c:	e0833001 	add	r3, r3, r1
82000a30:	e0633002 	rsb	r3, r3, r2
82000a34:	e6ef3073 	uxtb	r3, r3
82000a38:	e2833030 	add	r3, r3, #48	; 0x30
82000a3c:	e6ef1073 	uxtb	r1, r3
82000a40:	e24b2014 	sub	r2, fp, #20
82000a44:	e51b3008 	ldr	r3, [fp, #-8]
82000a48:	e0823003 	add	r3, r2, r3
82000a4c:	e1a02001 	mov	r2, r1
82000a50:	e5c32000 	strb	r2, [r3]
82000a54:	ea000028 	b	82000afc <UART_goto+0x244>
    }
    else if(i == 2){
82000a58:	e51b3008 	ldr	r3, [fp, #-8]
82000a5c:	e3530002 	cmp	r3, #2
82000a60:	1a000025 	bne	82000afc <UART_goto+0x244>
    xnumber[i] = (x%10)+48;
82000a64:	e51b2020 	ldr	r2, [fp, #-32]
82000a68:	e3063667 	movw	r3, #26215	; 0x6667
82000a6c:	e3463666 	movt	r3, #26214	; 0x6666
82000a70:	e0c10392 	smull	r0, r1, r2, r3
82000a74:	e1a01141 	asr	r1, r1, #2
82000a78:	e1a03fc2 	asr	r3, r2, #31
82000a7c:	e0633001 	rsb	r3, r3, r1
82000a80:	e1a03083 	lsl	r3, r3, #1
82000a84:	e1a01103 	lsl	r1, r3, #2
82000a88:	e0833001 	add	r3, r3, r1
82000a8c:	e0633002 	rsb	r3, r3, r2
82000a90:	e6ef3073 	uxtb	r3, r3
82000a94:	e2833030 	add	r3, r3, #48	; 0x30
82000a98:	e6ef1073 	uxtb	r1, r3
82000a9c:	e24b2010 	sub	r2, fp, #16
82000aa0:	e51b3008 	ldr	r3, [fp, #-8]
82000aa4:	e0823003 	add	r3, r2, r3
82000aa8:	e1a02001 	mov	r2, r1
82000aac:	e5c32000 	strb	r2, [r3]
    ynumber[i] = (y%10)+48;
82000ab0:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
82000ab4:	e3063667 	movw	r3, #26215	; 0x6667
82000ab8:	e3463666 	movt	r3, #26214	; 0x6666
82000abc:	e0c10392 	smull	r0, r1, r2, r3
82000ac0:	e1a01141 	asr	r1, r1, #2
82000ac4:	e1a03fc2 	asr	r3, r2, #31
82000ac8:	e0633001 	rsb	r3, r3, r1
82000acc:	e1a03083 	lsl	r3, r3, #1
82000ad0:	e1a01103 	lsl	r1, r3, #2
82000ad4:	e0833001 	add	r3, r3, r1
82000ad8:	e0633002 	rsb	r3, r3, r2
82000adc:	e6ef3073 	uxtb	r3, r3
82000ae0:	e2833030 	add	r3, r3, #48	; 0x30
82000ae4:	e6ef1073 	uxtb	r1, r3
82000ae8:	e24b2014 	sub	r2, fp, #20
82000aec:	e51b3008 	ldr	r3, [fp, #-8]
82000af0:	e0823003 	add	r3, r2, r3
82000af4:	e1a02001 	mov	r2, r1
82000af8:	e5c32000 	strb	r2, [r3]
  char ynumber[3];
  char gotosequence1[5]= "\033[";
  char semicolon = ';';
  char end = 'H';
  int i = 0;
  for(i; i< 3; i++){
82000afc:	e51b3008 	ldr	r3, [fp, #-8]
82000b00:	e2833001 	add	r3, r3, #1
82000b04:	e50b3008 	str	r3, [fp, #-8]
82000b08:	e51b3008 	ldr	r3, [fp, #-8]
82000b0c:	e3530002 	cmp	r3, #2
82000b10:	daffff78 	ble	820008f8 <UART_goto+0x40>
    }
  }
  


  UART_puts(gotosequence1);
82000b14:	e24b301c 	sub	r3, fp, #28
82000b18:	e1a00003 	mov	r0, r3
82000b1c:	ebffff1c 	bl	82000794 <UART_puts>
  UART_putc(ynumber[0]);
82000b20:	e55b3014 	ldrb	r3, [fp, #-20]
82000b24:	e1a00003 	mov	r0, r3
82000b28:	ebfffef0 	bl	820006f0 <UART_putc>
  UART_putc(ynumber[1]);
82000b2c:	e55b3013 	ldrb	r3, [fp, #-19]
82000b30:	e1a00003 	mov	r0, r3
82000b34:	ebfffeed 	bl	820006f0 <UART_putc>
  UART_putc(ynumber[2]);
82000b38:	e55b3012 	ldrb	r3, [fp, #-18]
82000b3c:	e1a00003 	mov	r0, r3
82000b40:	ebfffeea 	bl	820006f0 <UART_putc>
  UART_putc(semicolon);
82000b44:	e55b3009 	ldrb	r3, [fp, #-9]
82000b48:	e1a00003 	mov	r0, r3
82000b4c:	ebfffee7 	bl	820006f0 <UART_putc>
  UART_putc(xnumber[0]);
82000b50:	e55b3010 	ldrb	r3, [fp, #-16]
82000b54:	e1a00003 	mov	r0, r3
82000b58:	ebfffee4 	bl	820006f0 <UART_putc>
  UART_putc(xnumber[1]);
82000b5c:	e55b300f 	ldrb	r3, [fp, #-15]
82000b60:	e1a00003 	mov	r0, r3
82000b64:	ebfffee1 	bl	820006f0 <UART_putc>
  UART_putc(xnumber[2]);
82000b68:	e55b300e 	ldrb	r3, [fp, #-14]
82000b6c:	e1a00003 	mov	r0, r3
82000b70:	ebfffede 	bl	820006f0 <UART_putc>
  UART_putc(end);
82000b74:	e55b300a 	ldrb	r3, [fp, #-10]
82000b78:	e1a00003 	mov	r0, r3
82000b7c:	ebfffedb 	bl	820006f0 <UART_putc>
}
82000b80:	e24bd004 	sub	sp, fp, #4
82000b84:	e8bd8800 	pop	{fp, pc}

82000b88 <UART_sprintf>:

// ======================================================================

int UART_sprintf(char *out, const char *format, ...)
{
82000b88:	e92d000e 	push	{r1, r2, r3}
82000b8c:	e92d4810 	push	{r4, fp, lr}
82000b90:	e28db008 	add	fp, sp, #8
82000b94:	e24dd008 	sub	sp, sp, #8
82000b98:	e50b000c 	str	r0, [fp, #-12]
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
82000b9c:	e28b4004 	add	r4, fp, #4
  return print(&out, varg);
82000ba0:	e24b300c 	sub	r3, fp, #12
82000ba4:	e1a01004 	mov	r1, r4
82000ba8:	e1a00003 	mov	r0, r3
82000bac:	eb0000d7 	bl	82000f10 <print>
82000bb0:	e1a03000 	mov	r3, r0
}
82000bb4:	e1a00003 	mov	r0, r3
82000bb8:	e24bd008 	sub	sp, fp, #8
82000bbc:	e8bd4810 	pop	{r4, fp, lr}
82000bc0:	e28dd00c 	add	sp, sp, #12
82000bc4:	e12fff1e 	bx	lr

82000bc8 <UART_printf>:

// ======================================================================

int UART_printf(const char *format, ...)
{
82000bc8:	e92d000f 	push	{r0, r1, r2, r3}
82000bcc:	e92d4830 	push	{r4, r5, fp, lr}
82000bd0:	e28db00c 	add	fp, sp, #12
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
82000bd4:	e28b4004 	add	r4, fp, #4
  return print(0, varg);
82000bd8:	e1a01004 	mov	r1, r4
82000bdc:	e3a00000 	mov	r0, #0
82000be0:	eb0000ca 	bl	82000f10 <print>
82000be4:	e1a03000 	mov	r3, r0
}
82000be8:	e1a00003 	mov	r0, r3
82000bec:	e24bd00c 	sub	sp, fp, #12
82000bf0:	e8bd4830 	pop	{r4, r5, fp, lr}
82000bf4:	e28dd010 	add	sp, sp, #16
82000bf8:	e12fff1e 	bx	lr

82000bfc <printchar>:
#define PRINT_BUF_LEN	12

// ======================================================================

void printchar(char **str, int c)
{
82000bfc:	e92d4800 	push	{fp, lr}
82000c00:	e28db004 	add	fp, sp, #4
82000c04:	e24dd008 	sub	sp, sp, #8
82000c08:	e50b0008 	str	r0, [fp, #-8]
82000c0c:	e50b100c 	str	r1, [fp, #-12]
  if (str) {
82000c10:	e51b3008 	ldr	r3, [fp, #-8]
82000c14:	e3530000 	cmp	r3, #0
82000c18:	0a00000a 	beq	82000c48 <printchar+0x4c>
    **str = c;
82000c1c:	e51b3008 	ldr	r3, [fp, #-8]
82000c20:	e5933000 	ldr	r3, [r3]
82000c24:	e51b200c 	ldr	r2, [fp, #-12]
82000c28:	e6ef2072 	uxtb	r2, r2
82000c2c:	e5c32000 	strb	r2, [r3]
    ++(*str);
82000c30:	e51b3008 	ldr	r3, [fp, #-8]
82000c34:	e5933000 	ldr	r3, [r3]
82000c38:	e2832001 	add	r2, r3, #1
82000c3c:	e51b3008 	ldr	r3, [fp, #-8]
82000c40:	e5832000 	str	r2, [r3]
82000c44:	ea000001 	b	82000c50 <printchar+0x54>
  } else
    (void) UART_putc(c);
82000c48:	e51b000c 	ldr	r0, [fp, #-12]
82000c4c:	ebfffea7 	bl	820006f0 <UART_putc>
}
82000c50:	e24bd004 	sub	sp, fp, #4
82000c54:	e8bd8800 	pop	{fp, pc}

82000c58 <prints>:

// ======================================================================

int prints(char **out, const char *string, int width, int pad)
{
82000c58:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
82000c5c:	e28db014 	add	fp, sp, #20
82000c60:	e24dd010 	sub	sp, sp, #16
82000c64:	e50b0018 	str	r0, [fp, #-24]
82000c68:	e50b101c 	str	r1, [fp, #-28]
82000c6c:	e50b2020 	str	r2, [fp, #-32]
82000c70:	e50b3024 	str	r3, [fp, #-36]	; 0x24
  register int pc = 0, padchar = ' ';
82000c74:	e3a04000 	mov	r4, #0
82000c78:	e3a07020 	mov	r7, #32

  if (width > 0) {
82000c7c:	e51b3020 	ldr	r3, [fp, #-32]
82000c80:	e3530000 	cmp	r3, #0
82000c84:	da000015 	ble	82000ce0 <prints+0x88>
    register int len = 0;
82000c88:	e3a05000 	mov	r5, #0
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000c8c:	e51b601c 	ldr	r6, [fp, #-28]
82000c90:	ea000001 	b	82000c9c <prints+0x44>
      ++len;
82000c94:	e2855001 	add	r5, r5, #1
  register int pc = 0, padchar = ' ';

  if (width > 0) {
    register int len = 0;
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000c98:	e2866001 	add	r6, r6, #1
82000c9c:	e5d63000 	ldrb	r3, [r6]
82000ca0:	e3530000 	cmp	r3, #0
82000ca4:	1afffffa 	bne	82000c94 <prints+0x3c>
      ++len;
    if (len >= width)
82000ca8:	e51b3020 	ldr	r3, [fp, #-32]
82000cac:	e1550003 	cmp	r5, r3
82000cb0:	ba000002 	blt	82000cc0 <prints+0x68>
      width = 0;
82000cb4:	e3a03000 	mov	r3, #0
82000cb8:	e50b3020 	str	r3, [fp, #-32]
82000cbc:	ea000002 	b	82000ccc <prints+0x74>
    else
      width -= len;
82000cc0:	e51b3020 	ldr	r3, [fp, #-32]
82000cc4:	e0653003 	rsb	r3, r5, r3
82000cc8:	e50b3020 	str	r3, [fp, #-32]
    if (pad & PAD_ZERO)
82000ccc:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000cd0:	e2033002 	and	r3, r3, #2
82000cd4:	e3530000 	cmp	r3, #0
82000cd8:	0a000000 	beq	82000ce0 <prints+0x88>
      padchar = '0';
82000cdc:	e3a07030 	mov	r7, #48	; 0x30
  }
  if (!(pad & PAD_RIGHT)) {
82000ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000ce4:	e2033001 	and	r3, r3, #1
82000ce8:	e3530000 	cmp	r3, #0
82000cec:	1a00000a 	bne	82000d1c <prints+0xc4>
    for (; width > 0; --width) {
82000cf0:	ea000006 	b	82000d10 <prints+0xb8>
      printchar(out, padchar);
82000cf4:	e1a01007 	mov	r1, r7
82000cf8:	e51b0018 	ldr	r0, [fp, #-24]
82000cfc:	ebffffbe 	bl	82000bfc <printchar>
      ++pc;
82000d00:	e2844001 	add	r4, r4, #1
      width -= len;
    if (pad & PAD_ZERO)
      padchar = '0';
  }
  if (!(pad & PAD_RIGHT)) {
    for (; width > 0; --width) {
82000d04:	e51b3020 	ldr	r3, [fp, #-32]
82000d08:	e2433001 	sub	r3, r3, #1
82000d0c:	e50b3020 	str	r3, [fp, #-32]
82000d10:	e51b3020 	ldr	r3, [fp, #-32]
82000d14:	e3530000 	cmp	r3, #0
82000d18:	cafffff5 	bgt	82000cf4 <prints+0x9c>
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000d1c:	ea000008 	b	82000d44 <prints+0xec>
    printchar(out, *string);
82000d20:	e51b301c 	ldr	r3, [fp, #-28]
82000d24:	e5d33000 	ldrb	r3, [r3]
82000d28:	e1a01003 	mov	r1, r3
82000d2c:	e51b0018 	ldr	r0, [fp, #-24]
82000d30:	ebffffb1 	bl	82000bfc <printchar>
    ++pc;
82000d34:	e2844001 	add	r4, r4, #1
    for (; width > 0; --width) {
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000d38:	e51b301c 	ldr	r3, [fp, #-28]
82000d3c:	e2833001 	add	r3, r3, #1
82000d40:	e50b301c 	str	r3, [fp, #-28]
82000d44:	e51b301c 	ldr	r3, [fp, #-28]
82000d48:	e5d33000 	ldrb	r3, [r3]
82000d4c:	e3530000 	cmp	r3, #0
82000d50:	1afffff2 	bne	82000d20 <prints+0xc8>
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000d54:	ea000006 	b	82000d74 <prints+0x11c>
    printchar(out, padchar);
82000d58:	e1a01007 	mov	r1, r7
82000d5c:	e51b0018 	ldr	r0, [fp, #-24]
82000d60:	ebffffa5 	bl	82000bfc <printchar>
    ++pc;
82000d64:	e2844001 	add	r4, r4, #1
  }
  for (; *string; ++string) {
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000d68:	e51b3020 	ldr	r3, [fp, #-32]
82000d6c:	e2433001 	sub	r3, r3, #1
82000d70:	e50b3020 	str	r3, [fp, #-32]
82000d74:	e51b3020 	ldr	r3, [fp, #-32]
82000d78:	e3530000 	cmp	r3, #0
82000d7c:	cafffff5 	bgt	82000d58 <prints+0x100>
    printchar(out, padchar);
    ++pc;
  }

  return pc;
82000d80:	e1a03004 	mov	r3, r4
}
82000d84:	e1a00003 	mov	r0, r3
82000d88:	e24bd014 	sub	sp, fp, #20
82000d8c:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

82000d90 <printi>:

// ======================================================================

int printi(char **out, int i, int b, int sg, int width, int pad,
	   int letbase)
{
82000d90:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000d94:	e28db018 	add	fp, sp, #24
82000d98:	e24dd024 	sub	sp, sp, #36	; 0x24
82000d9c:	e50b0030 	str	r0, [fp, #-48]	; 0x30
82000da0:	e50b1034 	str	r1, [fp, #-52]	; 0x34
82000da4:	e50b2038 	str	r2, [fp, #-56]	; 0x38
82000da8:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
  char print_buf[PRINT_BUF_LEN];
  register char *s;
  register int t, neg = 0, pc = 0;
82000dac:	e3a08000 	mov	r8, #0
82000db0:	e3a05000 	mov	r5, #0
  register unsigned int u = i;
82000db4:	e51b7034 	ldr	r7, [fp, #-52]	; 0x34

  if (i == 0) {
82000db8:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000dbc:	e3530000 	cmp	r3, #0
82000dc0:	1a00000a 	bne	82000df0 <printi+0x60>
    print_buf[0] = '0';
82000dc4:	e3a03030 	mov	r3, #48	; 0x30
82000dc8:	e54b3028 	strb	r3, [fp, #-40]	; 0x28
    print_buf[1] = '\0';
82000dcc:	e3a03000 	mov	r3, #0
82000dd0:	e54b3027 	strb	r3, [fp, #-39]	; 0x27
    return prints(out, print_buf, width, pad);
82000dd4:	e24b1028 	sub	r1, fp, #40	; 0x28
82000dd8:	e59b3008 	ldr	r3, [fp, #8]
82000ddc:	e59b2004 	ldr	r2, [fp, #4]
82000de0:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000de4:	ebffff9b 	bl	82000c58 <prints>
82000de8:	e1a03000 	mov	r3, r0
82000dec:	ea000044 	b	82000f04 <printi+0x174>
  }

  if (sg && b == 10 && i < 0) {
82000df0:	e51b303c 	ldr	r3, [fp, #-60]	; 0x3c
82000df4:	e3530000 	cmp	r3, #0
82000df8:	0a000009 	beq	82000e24 <printi+0x94>
82000dfc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000e00:	e353000a 	cmp	r3, #10
82000e04:	1a000006 	bne	82000e24 <printi+0x94>
82000e08:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000e0c:	e3530000 	cmp	r3, #0
82000e10:	aa000003 	bge	82000e24 <printi+0x94>
    neg = 1;
82000e14:	e3a08001 	mov	r8, #1
    u = -i;
82000e18:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000e1c:	e2633000 	rsb	r3, r3, #0
82000e20:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
82000e24:	e24b4028 	sub	r4, fp, #40	; 0x28
82000e28:	e284400b 	add	r4, r4, #11
  *s = '\0';
82000e2c:	e3a03000 	mov	r3, #0
82000e30:	e5c43000 	strb	r3, [r4]

  while (u) {
82000e34:	ea000015 	b	82000e90 <printi+0x100>
    t = u % b;
82000e38:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000e3c:	e1a01003 	mov	r1, r3
82000e40:	e1a00007 	mov	r0, r7
82000e44:	eb000168 	bl	820013ec <__aeabi_uidivmod>
82000e48:	e1a03001 	mov	r3, r1
82000e4c:	e1a06003 	mov	r6, r3
    if (t >= 10)
82000e50:	e3560009 	cmp	r6, #9
82000e54:	da000002 	ble	82000e64 <printi+0xd4>
      t += letbase - '0' - 10;
82000e58:	e59b300c 	ldr	r3, [fp, #12]
82000e5c:	e243303a 	sub	r3, r3, #58	; 0x3a
82000e60:	e0866003 	add	r6, r6, r3
    *--s = t + '0';
82000e64:	e2444001 	sub	r4, r4, #1
82000e68:	e6ef3076 	uxtb	r3, r6
82000e6c:	e2833030 	add	r3, r3, #48	; 0x30
82000e70:	e6ef3073 	uxtb	r3, r3
82000e74:	e5c43000 	strb	r3, [r4]
    u /= b;
82000e78:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000e7c:	e1a01003 	mov	r1, r3
82000e80:	e1a00007 	mov	r0, r7
82000e84:	eb0000dd 	bl	82001200 <__aeabi_uidiv>
82000e88:	e1a03000 	mov	r3, r0
82000e8c:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
  *s = '\0';

  while (u) {
82000e90:	e3570000 	cmp	r7, #0
82000e94:	1affffe7 	bne	82000e38 <printi+0xa8>
      t += letbase - '0' - 10;
    *--s = t + '0';
    u /= b;
  }

  if (neg) {
82000e98:	e3580000 	cmp	r8, #0
82000e9c:	0a000011 	beq	82000ee8 <printi+0x158>
    if (width && (pad & PAD_ZERO)) {
82000ea0:	e59b3004 	ldr	r3, [fp, #4]
82000ea4:	e3530000 	cmp	r3, #0
82000ea8:	0a00000b 	beq	82000edc <printi+0x14c>
82000eac:	e59b3008 	ldr	r3, [fp, #8]
82000eb0:	e2033002 	and	r3, r3, #2
82000eb4:	e3530000 	cmp	r3, #0
82000eb8:	0a000007 	beq	82000edc <printi+0x14c>
      printchar(out, '-');
82000ebc:	e3a0102d 	mov	r1, #45	; 0x2d
82000ec0:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000ec4:	ebffff4c 	bl	82000bfc <printchar>
      ++pc;
82000ec8:	e2855001 	add	r5, r5, #1
      --width;
82000ecc:	e59b3004 	ldr	r3, [fp, #4]
82000ed0:	e2433001 	sub	r3, r3, #1
82000ed4:	e58b3004 	str	r3, [fp, #4]
82000ed8:	ea000002 	b	82000ee8 <printi+0x158>
    } else {
      *--s = '-';
82000edc:	e2444001 	sub	r4, r4, #1
82000ee0:	e3a0302d 	mov	r3, #45	; 0x2d
82000ee4:	e5c43000 	strb	r3, [r4]
    }
  }

  return pc + prints(out, s, width, pad);
82000ee8:	e59b3008 	ldr	r3, [fp, #8]
82000eec:	e59b2004 	ldr	r2, [fp, #4]
82000ef0:	e1a01004 	mov	r1, r4
82000ef4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000ef8:	ebffff56 	bl	82000c58 <prints>
82000efc:	e1a03000 	mov	r3, r0
82000f00:	e0833005 	add	r3, r3, r5
}
82000f04:	e1a00003 	mov	r0, r3
82000f08:	e24bd018 	sub	sp, fp, #24
82000f0c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

82000f10 <print>:

// ======================================================================

int print(char **out, int *varg)
{
82000f10:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000f14:	e28db018 	add	fp, sp, #24
82000f18:	e24dd024 	sub	sp, sp, #36	; 0x24
82000f1c:	e50b0028 	str	r0, [fp, #-40]	; 0x28
82000f20:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
  register int width, pad;
  register int pc = 0;
82000f24:	e3a05000 	mov	r5, #0
  register char *format = (char *) (*varg++);
82000f28:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000f2c:	e2832004 	add	r2, r3, #4
82000f30:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000f34:	e5933000 	ldr	r3, [r3]
82000f38:	e1a04003 	mov	r4, r3
  char scr[2];

  for (; *format != 0; ++format) {
82000f3c:	ea00009c 	b	820011b4 <print+0x2a4>
    if (*format == '%') {
82000f40:	e5d43000 	ldrb	r3, [r4]
82000f44:	e3530025 	cmp	r3, #37	; 0x25
82000f48:	1a000093 	bne	8200119c <print+0x28c>
      ++format;
82000f4c:	e2844001 	add	r4, r4, #1
      width = pad = 0;
82000f50:	e3a07000 	mov	r7, #0
82000f54:	e1a06007 	mov	r6, r7
      if (*format == '\0')
82000f58:	e5d43000 	ldrb	r3, [r4]
82000f5c:	e3530000 	cmp	r3, #0
82000f60:	1a000000 	bne	82000f68 <print+0x58>
	break;
82000f64:	ea000095 	b	820011c0 <print+0x2b0>
      if (*format == '%')
82000f68:	e5d43000 	ldrb	r3, [r4]
82000f6c:	e3530025 	cmp	r3, #37	; 0x25
82000f70:	1a000000 	bne	82000f78 <print+0x68>
	goto out;
82000f74:	ea000088 	b	8200119c <print+0x28c>
      if (*format == '-') {
82000f78:	e5d43000 	ldrb	r3, [r4]
82000f7c:	e353002d 	cmp	r3, #45	; 0x2d
82000f80:	1a000001 	bne	82000f8c <print+0x7c>
	++format;
82000f84:	e2844001 	add	r4, r4, #1
	pad = PAD_RIGHT;
82000f88:	e3a07001 	mov	r7, #1
      }
      while (*format == '0') {
82000f8c:	ea000001 	b	82000f98 <print+0x88>
	++format;
82000f90:	e2844001 	add	r4, r4, #1
	pad |= PAD_ZERO;
82000f94:	e3877002 	orr	r7, r7, #2
	goto out;
      if (*format == '-') {
	++format;
	pad = PAD_RIGHT;
      }
      while (*format == '0') {
82000f98:	e5d43000 	ldrb	r3, [r4]
82000f9c:	e3530030 	cmp	r3, #48	; 0x30
82000fa0:	0afffffa 	beq	82000f90 <print+0x80>
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000fa4:	ea000007 	b	82000fc8 <print+0xb8>
	width *= 10;
82000fa8:	e1a03006 	mov	r3, r6
82000fac:	e1a03083 	lsl	r3, r3, #1
82000fb0:	e1a02103 	lsl	r2, r3, #2
82000fb4:	e0836002 	add	r6, r3, r2
	width += *format - '0';
82000fb8:	e5d43000 	ldrb	r3, [r4]
82000fbc:	e2433030 	sub	r3, r3, #48	; 0x30
82000fc0:	e0866003 	add	r6, r6, r3
      }
      while (*format == '0') {
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000fc4:	e2844001 	add	r4, r4, #1
82000fc8:	e5d43000 	ldrb	r3, [r4]
82000fcc:	e353002f 	cmp	r3, #47	; 0x2f
82000fd0:	9a000002 	bls	82000fe0 <print+0xd0>
82000fd4:	e5d43000 	ldrb	r3, [r4]
82000fd8:	e3530039 	cmp	r3, #57	; 0x39
82000fdc:	9afffff1 	bls	82000fa8 <print+0x98>
	width *= 10;
	width += *format - '0';
      }
      if (*format == 's') {
82000fe0:	e5d43000 	ldrb	r3, [r4]
82000fe4:	e3530073 	cmp	r3, #115	; 0x73
82000fe8:	1a000010 	bne	82001030 <print+0x120>
	register char *s = *((char **) varg++);
82000fec:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000ff0:	e2832004 	add	r2, r3, #4
82000ff4:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000ff8:	e5938000 	ldr	r8, [r3]
	pc += prints(out, s ? s : "(null)", width, pad);
82000ffc:	e3580000 	cmp	r8, #0
82001000:	0a000001 	beq	8200100c <print+0xfc>
82001004:	e1a01008 	mov	r1, r8
82001008:	ea000001 	b	82001014 <print+0x104>
8200100c:	e30115ac 	movw	r1, #5548	; 0x15ac
82001010:	e3481200 	movt	r1, #33280	; 0x8200
82001014:	e1a03007 	mov	r3, r7
82001018:	e1a02006 	mov	r2, r6
8200101c:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82001020:	ebffff0c 	bl	82000c58 <prints>
82001024:	e1a03000 	mov	r3, r0
82001028:	e0855003 	add	r5, r5, r3
	continue;
8200102c:	ea00005f 	b	820011b0 <print+0x2a0>
      }
      if (*format == 'd') {
82001030:	e5d43000 	ldrb	r3, [r4]
82001034:	e3530064 	cmp	r3, #100	; 0x64
82001038:	1a00000e 	bne	82001078 <print+0x168>
	pc += printi(out, *varg++, 10, 1, width, pad, 'a');
8200103c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82001040:	e2832004 	add	r2, r3, #4
82001044:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82001048:	e5931000 	ldr	r1, [r3]
8200104c:	e3a03061 	mov	r3, #97	; 0x61
82001050:	e58d3008 	str	r3, [sp, #8]
82001054:	e58d7004 	str	r7, [sp, #4]
82001058:	e58d6000 	str	r6, [sp]
8200105c:	e3a03001 	mov	r3, #1
82001060:	e3a0200a 	mov	r2, #10
82001064:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82001068:	ebffff48 	bl	82000d90 <printi>
8200106c:	e1a03000 	mov	r3, r0
82001070:	e0855003 	add	r5, r5, r3
	continue;
82001074:	ea00004d 	b	820011b0 <print+0x2a0>
      }
      if (*format == 'x') {
82001078:	e5d43000 	ldrb	r3, [r4]
8200107c:	e3530078 	cmp	r3, #120	; 0x78
82001080:	1a00000e 	bne	820010c0 <print+0x1b0>
	pc += printi(out, *varg++, 16, 0, width, pad, 'a');
82001084:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82001088:	e2832004 	add	r2, r3, #4
8200108c:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82001090:	e5931000 	ldr	r1, [r3]
82001094:	e3a03061 	mov	r3, #97	; 0x61
82001098:	e58d3008 	str	r3, [sp, #8]
8200109c:	e58d7004 	str	r7, [sp, #4]
820010a0:	e58d6000 	str	r6, [sp]
820010a4:	e3a03000 	mov	r3, #0
820010a8:	e3a02010 	mov	r2, #16
820010ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
820010b0:	ebffff36 	bl	82000d90 <printi>
820010b4:	e1a03000 	mov	r3, r0
820010b8:	e0855003 	add	r5, r5, r3
	continue;
820010bc:	ea00003b 	b	820011b0 <print+0x2a0>
      }
      if (*format == 'X') {
820010c0:	e5d43000 	ldrb	r3, [r4]
820010c4:	e3530058 	cmp	r3, #88	; 0x58
820010c8:	1a00000e 	bne	82001108 <print+0x1f8>
	pc += printi(out, *varg++, 16, 0, width, pad, 'A');
820010cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
820010d0:	e2832004 	add	r2, r3, #4
820010d4:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
820010d8:	e5931000 	ldr	r1, [r3]
820010dc:	e3a03041 	mov	r3, #65	; 0x41
820010e0:	e58d3008 	str	r3, [sp, #8]
820010e4:	e58d7004 	str	r7, [sp, #4]
820010e8:	e58d6000 	str	r6, [sp]
820010ec:	e3a03000 	mov	r3, #0
820010f0:	e3a02010 	mov	r2, #16
820010f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
820010f8:	ebffff24 	bl	82000d90 <printi>
820010fc:	e1a03000 	mov	r3, r0
82001100:	e0855003 	add	r5, r5, r3
	continue;
82001104:	ea000029 	b	820011b0 <print+0x2a0>
      }
      if (*format == 'u') {
82001108:	e5d43000 	ldrb	r3, [r4]
8200110c:	e3530075 	cmp	r3, #117	; 0x75
82001110:	1a00000e 	bne	82001150 <print+0x240>
	pc += printi(out, *varg++, 10, 0, width, pad, 'a');
82001114:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82001118:	e2832004 	add	r2, r3, #4
8200111c:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82001120:	e5931000 	ldr	r1, [r3]
82001124:	e3a03061 	mov	r3, #97	; 0x61
82001128:	e58d3008 	str	r3, [sp, #8]
8200112c:	e58d7004 	str	r7, [sp, #4]
82001130:	e58d6000 	str	r6, [sp]
82001134:	e3a03000 	mov	r3, #0
82001138:	e3a0200a 	mov	r2, #10
8200113c:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82001140:	ebffff12 	bl	82000d90 <printi>
82001144:	e1a03000 	mov	r3, r0
82001148:	e0855003 	add	r5, r5, r3
	continue;
8200114c:	ea000017 	b	820011b0 <print+0x2a0>
      }
      if (*format == 'c') {
82001150:	e5d43000 	ldrb	r3, [r4]
82001154:	e3530063 	cmp	r3, #99	; 0x63
82001158:	1a000014 	bne	820011b0 <print+0x2a0>
	/* char are converted to int then pushed on the stack */
	scr[0] = *varg++;
8200115c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82001160:	e2832004 	add	r2, r3, #4
82001164:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82001168:	e5933000 	ldr	r3, [r3]
8200116c:	e6ef3073 	uxtb	r3, r3
82001170:	e54b3020 	strb	r3, [fp, #-32]
	scr[1] = '\0';
82001174:	e3a03000 	mov	r3, #0
82001178:	e54b301f 	strb	r3, [fp, #-31]
	pc += prints(out, scr, width, pad);
8200117c:	e24b1020 	sub	r1, fp, #32
82001180:	e1a03007 	mov	r3, r7
82001184:	e1a02006 	mov	r2, r6
82001188:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
8200118c:	ebfffeb1 	bl	82000c58 <prints>
82001190:	e1a03000 	mov	r3, r0
82001194:	e0855003 	add	r5, r5, r3
	continue;
82001198:	ea000004 	b	820011b0 <print+0x2a0>
      }
    } else {
    out:
      printchar(out, *format);
8200119c:	e5d43000 	ldrb	r3, [r4]
820011a0:	e1a01003 	mov	r1, r3
820011a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
820011a8:	ebfffe93 	bl	82000bfc <printchar>
      ++pc;
820011ac:	e2855001 	add	r5, r5, #1
  register int width, pad;
  register int pc = 0;
  register char *format = (char *) (*varg++);
  char scr[2];

  for (; *format != 0; ++format) {
820011b0:	e2844001 	add	r4, r4, #1
820011b4:	e5d43000 	ldrb	r3, [r4]
820011b8:	e3530000 	cmp	r3, #0
820011bc:	1affff5f 	bne	82000f40 <print+0x30>
    out:
      printchar(out, *format);
      ++pc;
    }
  }
  if (out)
820011c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
820011c4:	e3530000 	cmp	r3, #0
820011c8:	0a000003 	beq	820011dc <print+0x2cc>
    **out = '\0';
820011cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
820011d0:	e5933000 	ldr	r3, [r3]
820011d4:	e3a02000 	mov	r2, #0
820011d8:	e5c32000 	strb	r2, [r3]
  return pc;
820011dc:	e1a03005 	mov	r3, r5
}
820011e0:	e1a00003 	mov	r0, r3
820011e4:	e24bd018 	sub	sp, fp, #24
820011e8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

820011ec <raise>:

// ======================================================================

void raise(void)
{
820011ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
820011f0:	e28db000 	add	fp, sp, #0
}
820011f4:	e24bd000 	sub	sp, fp, #0
820011f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
820011fc:	e12fff1e 	bx	lr

82001200 <__aeabi_uidiv>:
82001200:	e2512001 	subs	r2, r1, #1
82001204:	012fff1e 	bxeq	lr
82001208:	3a000074 	bcc	820013e0 <__aeabi_uidiv+0x1e0>
8200120c:	e1500001 	cmp	r0, r1
82001210:	9a00006b 	bls	820013c4 <__aeabi_uidiv+0x1c4>
82001214:	e1110002 	tst	r1, r2
82001218:	0a00006c 	beq	820013d0 <__aeabi_uidiv+0x1d0>
8200121c:	e16f3f10 	clz	r3, r0
82001220:	e16f2f11 	clz	r2, r1
82001224:	e0423003 	sub	r3, r2, r3
82001228:	e273301f 	rsbs	r3, r3, #31
8200122c:	10833083 	addne	r3, r3, r3, lsl #1
82001230:	e3a02000 	mov	r2, #0
82001234:	108ff103 	addne	pc, pc, r3, lsl #2
82001238:	e320f000 	nop	{0}
8200123c:	e1500f81 	cmp	r0, r1, lsl #31
82001240:	e0a22002 	adc	r2, r2, r2
82001244:	20400f81 	subcs	r0, r0, r1, lsl #31
82001248:	e1500f01 	cmp	r0, r1, lsl #30
8200124c:	e0a22002 	adc	r2, r2, r2
82001250:	20400f01 	subcs	r0, r0, r1, lsl #30
82001254:	e1500e81 	cmp	r0, r1, lsl #29
82001258:	e0a22002 	adc	r2, r2, r2
8200125c:	20400e81 	subcs	r0, r0, r1, lsl #29
82001260:	e1500e01 	cmp	r0, r1, lsl #28
82001264:	e0a22002 	adc	r2, r2, r2
82001268:	20400e01 	subcs	r0, r0, r1, lsl #28
8200126c:	e1500d81 	cmp	r0, r1, lsl #27
82001270:	e0a22002 	adc	r2, r2, r2
82001274:	20400d81 	subcs	r0, r0, r1, lsl #27
82001278:	e1500d01 	cmp	r0, r1, lsl #26
8200127c:	e0a22002 	adc	r2, r2, r2
82001280:	20400d01 	subcs	r0, r0, r1, lsl #26
82001284:	e1500c81 	cmp	r0, r1, lsl #25
82001288:	e0a22002 	adc	r2, r2, r2
8200128c:	20400c81 	subcs	r0, r0, r1, lsl #25
82001290:	e1500c01 	cmp	r0, r1, lsl #24
82001294:	e0a22002 	adc	r2, r2, r2
82001298:	20400c01 	subcs	r0, r0, r1, lsl #24
8200129c:	e1500b81 	cmp	r0, r1, lsl #23
820012a0:	e0a22002 	adc	r2, r2, r2
820012a4:	20400b81 	subcs	r0, r0, r1, lsl #23
820012a8:	e1500b01 	cmp	r0, r1, lsl #22
820012ac:	e0a22002 	adc	r2, r2, r2
820012b0:	20400b01 	subcs	r0, r0, r1, lsl #22
820012b4:	e1500a81 	cmp	r0, r1, lsl #21
820012b8:	e0a22002 	adc	r2, r2, r2
820012bc:	20400a81 	subcs	r0, r0, r1, lsl #21
820012c0:	e1500a01 	cmp	r0, r1, lsl #20
820012c4:	e0a22002 	adc	r2, r2, r2
820012c8:	20400a01 	subcs	r0, r0, r1, lsl #20
820012cc:	e1500981 	cmp	r0, r1, lsl #19
820012d0:	e0a22002 	adc	r2, r2, r2
820012d4:	20400981 	subcs	r0, r0, r1, lsl #19
820012d8:	e1500901 	cmp	r0, r1, lsl #18
820012dc:	e0a22002 	adc	r2, r2, r2
820012e0:	20400901 	subcs	r0, r0, r1, lsl #18
820012e4:	e1500881 	cmp	r0, r1, lsl #17
820012e8:	e0a22002 	adc	r2, r2, r2
820012ec:	20400881 	subcs	r0, r0, r1, lsl #17
820012f0:	e1500801 	cmp	r0, r1, lsl #16
820012f4:	e0a22002 	adc	r2, r2, r2
820012f8:	20400801 	subcs	r0, r0, r1, lsl #16
820012fc:	e1500781 	cmp	r0, r1, lsl #15
82001300:	e0a22002 	adc	r2, r2, r2
82001304:	20400781 	subcs	r0, r0, r1, lsl #15
82001308:	e1500701 	cmp	r0, r1, lsl #14
8200130c:	e0a22002 	adc	r2, r2, r2
82001310:	20400701 	subcs	r0, r0, r1, lsl #14
82001314:	e1500681 	cmp	r0, r1, lsl #13
82001318:	e0a22002 	adc	r2, r2, r2
8200131c:	20400681 	subcs	r0, r0, r1, lsl #13
82001320:	e1500601 	cmp	r0, r1, lsl #12
82001324:	e0a22002 	adc	r2, r2, r2
82001328:	20400601 	subcs	r0, r0, r1, lsl #12
8200132c:	e1500581 	cmp	r0, r1, lsl #11
82001330:	e0a22002 	adc	r2, r2, r2
82001334:	20400581 	subcs	r0, r0, r1, lsl #11
82001338:	e1500501 	cmp	r0, r1, lsl #10
8200133c:	e0a22002 	adc	r2, r2, r2
82001340:	20400501 	subcs	r0, r0, r1, lsl #10
82001344:	e1500481 	cmp	r0, r1, lsl #9
82001348:	e0a22002 	adc	r2, r2, r2
8200134c:	20400481 	subcs	r0, r0, r1, lsl #9
82001350:	e1500401 	cmp	r0, r1, lsl #8
82001354:	e0a22002 	adc	r2, r2, r2
82001358:	20400401 	subcs	r0, r0, r1, lsl #8
8200135c:	e1500381 	cmp	r0, r1, lsl #7
82001360:	e0a22002 	adc	r2, r2, r2
82001364:	20400381 	subcs	r0, r0, r1, lsl #7
82001368:	e1500301 	cmp	r0, r1, lsl #6
8200136c:	e0a22002 	adc	r2, r2, r2
82001370:	20400301 	subcs	r0, r0, r1, lsl #6
82001374:	e1500281 	cmp	r0, r1, lsl #5
82001378:	e0a22002 	adc	r2, r2, r2
8200137c:	20400281 	subcs	r0, r0, r1, lsl #5
82001380:	e1500201 	cmp	r0, r1, lsl #4
82001384:	e0a22002 	adc	r2, r2, r2
82001388:	20400201 	subcs	r0, r0, r1, lsl #4
8200138c:	e1500181 	cmp	r0, r1, lsl #3
82001390:	e0a22002 	adc	r2, r2, r2
82001394:	20400181 	subcs	r0, r0, r1, lsl #3
82001398:	e1500101 	cmp	r0, r1, lsl #2
8200139c:	e0a22002 	adc	r2, r2, r2
820013a0:	20400101 	subcs	r0, r0, r1, lsl #2
820013a4:	e1500081 	cmp	r0, r1, lsl #1
820013a8:	e0a22002 	adc	r2, r2, r2
820013ac:	20400081 	subcs	r0, r0, r1, lsl #1
820013b0:	e1500001 	cmp	r0, r1
820013b4:	e0a22002 	adc	r2, r2, r2
820013b8:	20400001 	subcs	r0, r0, r1
820013bc:	e1a00002 	mov	r0, r2
820013c0:	e12fff1e 	bx	lr
820013c4:	03a00001 	moveq	r0, #1
820013c8:	13a00000 	movne	r0, #0
820013cc:	e12fff1e 	bx	lr
820013d0:	e16f2f11 	clz	r2, r1
820013d4:	e262201f 	rsb	r2, r2, #31
820013d8:	e1a00230 	lsr	r0, r0, r2
820013dc:	e12fff1e 	bx	lr
820013e0:	e3500000 	cmp	r0, #0
820013e4:	13e00000 	mvnne	r0, #0
820013e8:	ea000007 	b	8200140c <__aeabi_idiv0>

820013ec <__aeabi_uidivmod>:
820013ec:	e3510000 	cmp	r1, #0
820013f0:	0afffffa 	beq	820013e0 <__aeabi_uidiv+0x1e0>
820013f4:	e92d4003 	push	{r0, r1, lr}
820013f8:	ebffff80 	bl	82001200 <__aeabi_uidiv>
820013fc:	e8bd4006 	pop	{r1, r2, lr}
82001400:	e0030092 	mul	r3, r2, r0
82001404:	e0411003 	sub	r1, r1, r3
82001408:	e12fff1e 	bx	lr

8200140c <__aeabi_idiv0>:
8200140c:	e12fff1e 	bx	lr

Disassembly of section .rodata:

82001410 <.LC0>:
82001410:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
82001414:	6f77206f 	svcvs	0x0077206f
82001418:	21646c72 	smccs	18114	; 0x46c2
8200141c:	00000000 	andeq	r0, r0, r0

82001420 <.LC1>:
82001420:	000a7325 	andeq	r7, sl, r5, lsr #6

82001424 <.LC2>:
82001424:	69207325 	stmdbvs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
82001428:	756e2073 	strbvc	r2, [lr, #-115]!	; 0x73
8200142c:	70206c6c 	eorvc	r6, r0, ip, ror #24
82001430:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
82001434:	000a7265 	andeq	r7, sl, r5, ror #4

82001438 <.LC3>:
82001438:	3d206425 	cfstrscc	mvf6, [r0, #-148]!	; 0xffffff6c
8200143c:	000a3520 	andeq	r3, sl, r0, lsr #10

82001440 <.LC4>:
82001440:	3d206425 	cfstrscc	mvf6, [r0, #-148]!	; 0xffffff6c
82001444:	6d202d20 	stcvs	13, cr2, [r0, #-128]!	; 0xffffff80
82001448:	69207861 	stmdbvs	r0!, {r0, r5, r6, fp, ip, sp, lr}
8200144c:	000a746e 	andeq	r7, sl, lr, ror #8

82001450 <.LC5>:
82001450:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
82001454:	20632520 	rsbcs	r2, r3, r0, lsr #10
82001458:	6127203d 	teqvs	r7, sp, lsr r0
8200145c:	00000a27 	andeq	r0, r0, r7, lsr #20

82001460 <.LC6>:
82001460:	20786568 	rsbscs	r6, r8, r8, ror #10
82001464:	3d207825 	stccc	8, cr7, [r0, #-148]!	; 0xffffff6c
82001468:	0a666620 	beq	8399acf0 <__bss_start+0x199973c>
8200146c:	00000000 	andeq	r0, r0, r0

82001470 <.LC7>:
82001470:	20786568 	rsbscs	r6, r8, r8, ror #10
82001474:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
82001478:	30203d20 	eorcc	r3, r0, r0, lsr #26
8200147c:	00000a30 	andeq	r0, r0, r0, lsr sl

82001480 <.LC8>:
82001480:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
82001484:	25206465 	strcs	r6, [r0, #-1125]!	; 0x465
82001488:	203d2064 	eorscs	r2, sp, r4, rrx
8200148c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
82001490:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
82001494:	20752520 	rsbscs	r2, r5, r0, lsr #10
82001498:	6568203d 	strbvs	r2, [r8, #-61]!	; 0x3d
8200149c:	78252078 	stmdavc	r5!, {r3, r4, r5, r6, sp}
820014a0:	0000000a 	andeq	r0, r0, sl

820014a4 <.LC9>:
820014a4:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
820014a8:	00656761 	rsbeq	r6, r5, r1, ror #14

820014ac <.LC10>:
820014ac:	25206425 	strcs	r6, [r0, #-1061]!	; 0x425
820014b0:	29732873 	ldmdbcs	r3!, {r0, r1, r4, r5, r6, fp, sp}^
820014b4:	00000025 	andeq	r0, r0, r5, lsr #32

820014b8 <.LC11>:
820014b8:	0000000a 	andeq	r0, r0, sl

820014bc <.LC12>:
820014bc:	25206425 	strcs	r6, [r0, #-1061]!	; 0x425
820014c0:	29732873 	ldmdbcs	r3!, {r0, r1, r4, r5, r6, fp, sp}^
820014c4:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
820014c8:	25252068 	strcs	r2, [r5, #-104]!	; 0x68
820014cc:	0000000a 	andeq	r0, r0, sl

820014d0 <.LC13>:
820014d0:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
820014d4:	00000000 	andeq	r0, r0, r0

820014d8 <.LC14>:
820014d8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0x56a
820014dc:	203a6669 	eorscs	r6, sl, r9, ror #12
820014e0:	312d2522 	teqcc	sp, r2, lsr #10
820014e4:	0a227330 	beq	8289e1ac <__bss_start+0x89cbf8>
820014e8:	00000000 	andeq	r0, r0, r0

820014ec <.LC15>:
820014ec:	00007325 	andeq	r7, r0, r5, lsr #6

820014f0 <.LC16>:
820014f0:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
820014f4:	00000074 	andeq	r0, r0, r4, ror r0

820014f8 <.LC17>:
820014f8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0x56a
820014fc:	203a6669 	eorscs	r6, sl, r9, ror #12
82001500:	30312522 	eorscc	r2, r1, r2, lsr #10
82001504:	000a2273 	andeq	r2, sl, r3, ror r2

82001508 <.LC18>:
82001508:	203a3320 	eorscs	r3, sl, r0, lsr #6
8200150c:	64343025 	ldrtvs	r3, [r4], #-37	; 0x25
82001510:	72657a20 	rsbvc	r7, r5, #32, 20	; 0x20000
82001514:	6170206f 	cmnvs	r0, pc, rrx
82001518:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
8200151c:	0000000a 	andeq	r0, r0, sl

82001520 <.LC19>:
82001520:	203a3320 	eorscs	r3, sl, r0, lsr #6
82001524:	64342d25 	ldrtvs	r2, [r4], #-3365	; 0xd25
82001528:	66656c20 	strbtvs	r6, [r5], -r0, lsr #24
8200152c:	756a2074 	strbvc	r2, [sl, #-116]!	; 0x74
82001530:	66697473 			; <UNDEFINED> instruction: 0x66697473
82001534:	00000a2e 	andeq	r0, r0, lr, lsr #20

82001538 <.LC20>:
82001538:	203a3320 	eorscs	r3, sl, r0, lsr #6
8200153c:	20643425 	rsbcs	r3, r4, r5, lsr #8
82001540:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
82001544:	756a2074 	strbvc	r2, [sl, #-116]!	; 0x74
82001548:	66697473 			; <UNDEFINED> instruction: 0x66697473
8200154c:	00000a2e 	andeq	r0, r0, lr, lsr #20

82001550 <.LC21>:
82001550:	203a332d 	eorscs	r3, sl, sp, lsr #6
82001554:	64343025 	ldrtvs	r3, [r4], #-37	; 0x25
82001558:	72657a20 	rsbvc	r7, r5, #32, 20	; 0x20000
8200155c:	6170206f 	cmnvs	r0, pc, rrx
82001560:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
82001564:	0000000a 	andeq	r0, r0, sl

82001568 <.LC22>:
82001568:	203a332d 	eorscs	r3, sl, sp, lsr #6
8200156c:	64342d25 	ldrtvs	r2, [r4], #-3365	; 0xd25
82001570:	66656c20 	strbtvs	r6, [r5], -r0, lsr #24
82001574:	756a2074 	strbvc	r2, [sl, #-116]!	; 0x74
82001578:	66697473 			; <UNDEFINED> instruction: 0x66697473
8200157c:	00000a2e 	andeq	r0, r0, lr, lsr #20

82001580 <.LC23>:
82001580:	203a332d 	eorscs	r3, sl, sp, lsr #6
82001584:	20643425 	rsbcs	r3, r4, r5, lsr #8
82001588:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
8200158c:	756a2074 	strbvc	r2, [sl, #-116]!	; 0x74
82001590:	66697473 			; <UNDEFINED> instruction: 0x66697473
82001594:	00000a2e 	andeq	r0, r0, lr, lsr #20

82001598 <.LC0>:
82001598:	4a325b1b 	bmi	82c9820c <__bss_start+0xc96c58>
8200159c:	3b305b1b 	blcc	82c18210 <__bss_start+0xc16c5c>
820015a0:	00004830 	andeq	r4, r0, r0, lsr r8
	...

820015ac <.LC0>:
820015ac:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
820015b0:	0000296c 	andeq	r2, r0, ip, ror #18

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003841 	andeq	r3, r0, r1, asr #16
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002e 	andeq	r0, r0, lr, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	06003841 	streq	r3, [r0], -r1, asr #16
  1c:	0841070a 	stmdaeq	r1, {r1, r3, r8, r9, sl}^
  20:	0a020901 	beq	8242c <shift+0x8242c>
  24:	12010c03 	andne	r0, r1, #768	; 0x300
  28:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  30:	1b021a01 	blne	8683c <shift+0x8683c>
  34:	44012203 	strmi	r2, [r1], #-515	; 0x203
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <shift+0x10d0d24>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	31302e35 	teqcc	r0, r5, lsr lr
  1c:	2029332d 	eorcs	r3, r9, sp, lsr #6
  20:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  24:	30322033 	eorscc	r2, r2, r3, lsr r0
  28:	31303531 	teqcc	r0, r1, lsr r5
  2c:	28203331 	stmdacs	r0!, {r0, r4, r5, r8, r9, ip, sp}
  30:	72657270 	rsbvc	r7, r5, #112, 4
  34:	61656c65 	cmnvs	r5, r5, ror #24
  38:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000043 	andeq	r0, r0, r3, asr #32
   4:	001e0002 	andseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  20:	00532e74 	subseq	r2, r3, r4, ror lr
  24:	00000000 	andeq	r0, r0, r0
  28:	00020500 	andeq	r0, r2, r0, lsl #10
  2c:	18820000 	stmne	r2, {}	; <UNPREDICTABLE>
  30:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  34:	2f302f2f 	svccs	0x00302f2f
  38:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  3c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  40:	0a022f30 	beq	8bd08 <shift+0x8bd08>
  44:	5a010100 	bpl	4044c <shift+0x4044c>
  48:	02000000 	andeq	r0, r0, #0
  4c:	00002300 	andeq	r2, r0, r0, lsl #6
  50:	fb010200 	blx	4085a <shift+0x4085a>
  54:	01000d0e 	tsteq	r0, lr, lsl #26
  58:	00010101 	andeq	r0, r1, r1, lsl #2
  5c:	00010000 	andeq	r0, r1, r0
  60:	75000100 	strvc	r0, [r0, #-256]	; 0x100
  64:	2d747261 	lfmcs	f7, 2, [r4, #-388]!	; 0xfffffe7c
  68:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  6c:	00632e33 	rsbeq	r2, r3, r3, lsr lr
  70:	00000000 	andeq	r0, r0, r0
  74:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
  78:	03820000 	orreq	r0, r2, #0
  7c:	67670109 	strbvs	r0, [r7, -r9, lsl #2]!
  80:	d74e4b4b 	strble	r4, [lr, -fp, asr #22]
  84:	83838383 	orrhi	r8, r3, #201326594	; 0xc000002
  88:	bb838383 	bllt	fe0e0e9c <__bss_start+0x7c0df8e8>
  8c:	d7bb67bb 			; <UNDEFINED> instruction: 0xd7bb67bb
  90:	bb9fd79f 	bllt	fe7f5f14 <__bss_start+0x7c7f4960>
  94:	bb9fbb9f 	bllt	fe7eef18 <__bss_start+0x7c7ed964>
  98:	bb9fbb9f 	bllt	fe7eef1c <__bss_start+0x7c7ed968>
  9c:	2fa0bb9f 	svccs	0x00a0bb9f
  a0:	01000602 	tsteq	r0, r2, lsl #12
  a4:	00019501 	andeq	r9, r1, r1, lsl #10
  a8:	1d000200 	sfmne	f0, 4, [r0, #-0]
  ac:	02000000 	andeq	r0, r0, #0
  b0:	0d0efb01 	vstreq	d15, [lr, #-4]
  b4:	01010100 	mrseq	r0, (UNDEF: 17)
  b8:	00000001 	andeq	r0, r0, r1
  bc:	01000001 	tsteq	r0, r1
  c0:	72617500 	rsbvc	r7, r1, #0, 10
  c4:	00632e74 	rsbeq	r2, r3, r4, ror lr
  c8:	00000000 	andeq	r0, r0, r0
  cc:	e4020500 	str	r0, [r2], #-1280	; 0x500
  d0:	03820002 	orreq	r0, r2, #2
  d4:	00690117 	rsbeq	r0, r9, r7, lsl r1
  d8:	06010402 	streq	r0, [r1], -r2, lsl #8
  dc:	84bc062e 	ldrthi	r0, [ip], #1582	; 0x62e
  e0:	696b2f68 	stmdbvs	fp!, {r3, r5, r6, r8, r9, sl, fp, sp}^
  e4:	6b2f6884 	blvs	bda2fc <shift+0xbda2fc>
  e8:	02004b68 	andeq	r4, r0, #104, 22	; 0x1a000
  ec:	d74d0104 	strble	r0, [sp, -r4, lsl #2]
  f0:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
  f4:	66060204 	strvs	r0, [r6], -r4, lsl #4
  f8:	03040200 	movweq	r0, #16896	; 0x4200
  fc:	004b0666 	subeq	r0, fp, r6, ror #12
 100:	06010402 	streq	r0, [r1], -r2, lsl #8
 104:	00670666 	rsbeq	r0, r7, r6, ror #12
 108:	06010402 	streq	r0, [r1], -r2, lsl #8
 10c:	00670666 	rsbeq	r0, r7, r6, ror #12
 110:	06010402 	streq	r0, [r1], -r2, lsl #8
 114:	00670666 	rsbeq	r0, r7, r6, ror #12
 118:	06010402 	streq	r0, [r1], -r2, lsl #8
 11c:	00670666 	rsbeq	r0, r7, r6, ror #12
 120:	06010402 	streq	r0, [r1], -r2, lsl #8
 124:	00670666 	rsbeq	r0, r7, r6, ror #12
 128:	06010402 	streq	r0, [r1], -r2, lsl #8
 12c:	00670666 	rsbeq	r0, r7, r6, ror #12
 130:	06010402 	streq	r0, [r1], -r2, lsl #8
 134:	00670666 	rsbeq	r0, r7, r6, ror #12
 138:	06010402 	streq	r0, [r1], -r2, lsl #8
 13c:	00670666 	rsbeq	r0, r7, r6, ror #12
 140:	06010402 	streq	r0, [r1], -r2, lsl #8
 144:	00670666 	rsbeq	r0, r7, r6, ror #12
 148:	06010402 	streq	r0, [r1], -r2, lsl #8
 14c:	00670666 	rsbeq	r0, r7, r6, ror #12
 150:	06020402 	streq	r0, [r2], -r2, lsl #8
 154:	04020066 	streq	r0, [r2], #-102	; 0x66
 158:	67066603 	strvs	r6, [r6, -r3, lsl #12]
 15c:	02040200 	andeq	r0, r4, #0, 4
 160:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 164:	06660304 	strbteq	r0, [r6], -r4, lsl #6
 168:	04020067 	streq	r0, [r2], #-103	; 0x67
 16c:	00660602 	rsbeq	r0, r6, r2, lsl #12
 170:	66030402 	strvs	r0, [r3], -r2, lsl #8
 174:	02006706 	andeq	r6, r0, #1572864	; 0x180000
 178:	66060204 	strvs	r0, [r6], -r4, lsl #4
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	00670666 	rsbeq	r0, r7, r6, ror #12
 184:	06020402 	streq	r0, [r2], -r2, lsl #8
 188:	04020066 	streq	r0, [r2], #-102	; 0x66
 18c:	67066603 	strvs	r6, [r6, -r3, lsl #12]
 190:	02040200 	andeq	r0, r4, #0, 4
 194:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 198:	06660304 	strbteq	r0, [r6], -r4, lsl #6
 19c:	83674b67 	cmnhi	r7, #105472	; 0x19c00
 1a0:	68836785 	stmvs	r3, {r0, r2, r7, r8, r9, sl, sp, lr}
 1a4:	4b836b30 	blmi	fe0dae6c <__bss_start+0x7c0d98b8>
 1a8:	0402004d 	streq	r0, [r2], #-77	; 0x4d
 1ac:	02002f02 	andeq	r2, r0, #2, 30
 1b0:	009d0204 	addseq	r0, sp, r4, lsl #4
 1b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b8:	006c0666 	rsbeq	r0, ip, r6, ror #12
 1bc:	06010402 	streq	r0, [r1], -r2, lsl #8
 1c0:	83bc062e 			; <UNDEFINED> instruction: 0x83bc062e
 1c4:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 1c8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 1cc:	67bb4c67 	ldrvs	r4, [fp, r7, ror #24]!
 1d0:	01040200 	mrseq	r0, R12_usr
 1d4:	00836b2f 	addeq	r6, r3, pc, lsr #22
 1d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1dc:	4c670666 	stclmi	6, cr0, [r7], #-408	; 0xfffffe68
 1e0:	01040200 	mrseq	r0, R12_usr
 1e4:	bc062e06 	stclt	14, cr2, [r6], {6}
 1e8:	02004d84 	andeq	r4, r0, #132, 26	; 0x2100
 1ec:	2e060104 	adfcss	f0, f6, f4
 1f0:	3184bc06 	orrcc	fp, r4, r6, lsl #24
 1f4:	2f4b8387 	svccs	0x004b8387
 1f8:	2fbe64d7 	svccs	0x00be64d7
 1fc:	4a026787 	bmi	9a020 <shift+0x9a020>
 200:	a14f6713 	cmpge	pc, r3, lsl r7	; <UNPREDICTABLE>
 204:	4b4b4b83 	blmi	12d3018 <shift+0x12d3018>
 208:	c908672f 	stmdbgt	r8, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
 20c:	0267e608 	rsbeq	lr, r7, #8, 12	; 0x800000
 210:	34021332 	strcc	r1, [r2], #-818	; 0x332
 214:	26026714 			; <UNDEFINED> instruction: 0x26026714
 218:	02750313 	rsbseq	r0, r5, #1275068416	; 0x4c000000
 21c:	02000126 	andeq	r0, r0, #-2147483639	; 0x80000009
 220:	66060104 	strvs	r0, [r6], -r4, lsl #2
 224:	66110306 	ldrvs	r0, [r1], -r6, lsl #6
 228:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 22c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 230:	2fa14f67 	svccs	0x00a14f67
 234:	2f69a39f 	svccs	0x0069a39f
 238:	000a0283 	andeq	r0, sl, r3, lsl #5
 23c:	013d0101 	teqeq	sp, r1, lsl #2
 240:	00020000 	andeq	r0, r2, r0
 244:	0000001e 	andeq	r0, r0, lr, lsl r0
 248:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 24c:	0101000d 	tsteq	r1, sp
 250:	00000101 	andeq	r0, r0, r1, lsl #2
 254:	00000100 	andeq	r0, r0, r0, lsl #2
 258:	72700001 	rsbsvc	r0, r0, #1
 25c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 260:	00000063 	andeq	r0, r0, r3, rrx
 264:	05000000 	streq	r0, [r0, #-0]
 268:	000bfc02 	andeq	pc, fp, r2, lsl #24
 26c:	01100382 	tsteq	r0, r2, lsl #7
 270:	bc9f679f 	ldclt	7, cr6, [pc], {159}	; 0x9f
 274:	4cd74f4b 	ldclmi	15, cr4, [r7], {75}	; 0x4b
 278:	02003067 	andeq	r3, r0, #103	; 0x67
 27c:	004b0304 	subeq	r0, fp, r4, lsl #6
 280:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 284:	01040200 	mrseq	r0, R12_usr
 288:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 28c:	83676867 	cmnhi	r7, #6750208	; 0x670000
 290:	02008330 	andeq	r8, r0, #48, 6	; 0xc0000000
 294:	002f0204 	eoreq	r0, pc, r4, lsl #4
 298:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 29c:	02040200 	andeq	r0, r4, #0, 4
 2a0:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 2a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2a8:	0402006b 	streq	r0, [r2], #-107	; 0x6b
 2ac:	02002f02 	andeq	r2, r0, #2, 30
 2b0:	009f0204 	addseq	r0, pc, r4, lsl #4
 2b4:	2c020402 	cfstrscs	mvf0, [r2], {2}
 2b8:	01040200 	mrseq	r0, R12_usr
 2bc:	86066606 	strhi	r6, [r6], -r6, lsl #12
 2c0:	02040200 	andeq	r0, r4, #0, 4
 2c4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 2c8:	02006702 	andeq	r6, r0, #524288	; 0x80000
 2cc:	002c0204 	eoreq	r0, ip, r4, lsl #4
 2d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 2d4:	2f6b0666 	svccs	0x006b0666
 2d8:	304bd96c 	subcc	sp, fp, ip, ror #18
 2dc:	d94b4b67 	stmdble	fp, {r0, r1, r2, r5, r6, r8, r9, fp, lr}^
 2e0:	01040200 	mrseq	r0, R12_usr
 2e4:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 2e8:	06660204 	strbteq	r0, [r6], -r4, lsl #4
 2ec:	4b692f67 	blmi	1a4c090 <shift+0x1a4c090>
 2f0:	4bbb2f4c 	blmi	feecc028 <__bss_start+0x7cecaa74>
 2f4:	52b59f67 	adcspl	r9, r5, #412	; 0x19c
 2f8:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 2fc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 300:	842f6783 	strthi	r6, [pc], #-1923	; 308 <shift+0x308>
 304:	0402006a 	streq	r0, [r2], #-106	; 0x6a
 308:	a06bd701 	rsbge	sp, fp, r1, lsl #14
 30c:	672fa12f 	strvs	sl, [pc, -pc, lsr #2]!
 310:	2f674b2f 	svccs	0x00674b2f
 314:	2f672f67 	svccs	0x00672f67
 318:	2c2f2f30 	stccs	15, cr2, [pc], #-192	; 260 <shift+0x260>
 31c:	0402006a 	streq	r0, [r2], #-106	; 0x6a
 320:	02002f03 	andeq	r2, r0, #3, 30
 324:	00830304 	addeq	r0, r3, r4, lsl #6
 328:	64030402 	strvs	r0, [r3], #-1026	; 0x402
 32c:	01040200 	mrseq	r0, R12_usr
 330:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 334:	06660204 	strbteq	r0, [r6], -r4, lsl #4
 338:	0083676a 	addeq	r6, r3, sl, ror #14
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 344:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 348:	004a0404 	subeq	r0, sl, r4, lsl #8
 34c:	06040402 	streq	r0, [r4], -r2, lsl #8
 350:	086730bb 	stmdaeq	r7!, {r0, r1, r3, r4, r5, r7, ip, sp}^
 354:	086730ad 	stmdaeq	r7!, {r0, r2, r3, r5, r7, ip, sp}^
 358:	086730ad 	stmdaeq	r7!, {r0, r2, r3, r5, r7, ip, sp}^
 35c:	086730ad 	stmdaeq	r7!, {r0, r2, r3, r5, r7, ip, sp}^
 360:	bb6830ad 	bllt	1a0c61c <shift+0x1a0c61c>
 364:	8332d74b 	teqhi	r2, #19660800	; 0x12c0000
 368:	002e4d03 	eoreq	r4, lr, r3, lsl #26
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	3603062e 	strcc	r0, [r3], -lr, lsr #12
 374:	2f836766 	svccs	0x00836766
 378:	06024b6b 	streq	r4, [r2], -fp, ror #22
 37c:	d7010100 	strle	r0, [r1, -r0, lsl #2]
 380:	02000000 	andeq	r0, r0, #0
 384:	00009e00 	andeq	r9, r0, r0, lsl #28
 388:	fb010200 	blx	40b92 <shift+0x40b92>
 38c:	01000d0e 	tsteq	r0, lr, lsl #26
 390:	00010101 	andeq	r0, r1, r1, lsl #2
 394:	00010000 	andeq	r0, r1, r0
 398:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
 39c:	2f656d6f 	svccs	0x00656d6f
 3a0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 3a4:	616c7364 	cmnvs	ip, r4, ror #6
 3a8:	772f6576 			; <UNDEFINED> instruction: 0x772f6576
 3ac:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 3b0:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
 3b4:	6e69422f 	cdpvs	2, 6, cr4, cr9, cr15, {1}
 3b8:	52797261 	rsbspl	r7, r9, #268435462	; 0x10000006
 3bc:	61656c65 	cmnvs	r5, r5, ror #24
 3c0:	6c2f6573 	cfstr32vs	mvfx6, [pc], #-460	; 1fc <shift+0x1fc>
 3c4:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 3c8:	7465682f 	strbtvc	r6, [r5], #-2095	; 0x82f
 3cc:	72656e7a 	rsbvc	r6, r5, #1952	; 0x7a0
 3d0:	7261742f 	rsbvc	r7, r1, #788529152	; 0x2f000000
 3d4:	2f746567 	svccs	0x00746567
 3d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 3e0:	616e732f 	cmnvs	lr, pc, lsr #6
 3e4:	6f687370 	svcvs	0x00687370
 3e8:	672f7374 			; <UNDEFINED> instruction: 0x672f7374
 3ec:	6c2d6363 	stcvs	3, cr6, [sp], #-396	; 0xfffffe74
 3f0:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 3f4:	2e342d6f 	cdpcs	13, 3, cr2, cr4, cr15, {3}
 3f8:	30322d39 	eorscc	r2, r2, r9, lsr sp
 3fc:	302e3531 	eorcc	r3, lr, r1, lsr r5
 400:	2f332d31 	svccs	0x00332d31
 404:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
 408:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
 40c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 410:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
 414:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
 418:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
 41c:	73636e75 	cmnvc	r3, #1872	; 0x750
 420:	0100532e 	tsteq	r0, lr, lsr #6
 424:	00000000 	andeq	r0, r0, r0
 428:	12000205 	andne	r0, r0, #1342177280	; 0x50000000
 42c:	cf038200 	svcgt	0x00038200
 430:	2f300107 	svccs	0x00300107
 434:	2f2f2f2f 	svccs	0x002f2f2f
 438:	2e7ce003 	cdpcs	0, 7, cr14, cr12, cr3, {0}
 43c:	0203a403 	andeq	sl, r3, #50331648	; 0x3000000
 440:	2f0101d0 	svccs	0x000101d0
 444:	302f2f31 	eorcc	r2, pc, r1, lsr pc	; <UNPREDICTABLE>
 448:	03322f4c 	teqeq	r2, #76, 30	; 0x130
 44c:	2f2f6616 	svccs	0x002f6616
 450:	2f2f2f2f 	svccs	0x002f2f2f
 454:	0002022f 	andeq	r0, r2, pc, lsr #4
 458:	00b40101 	adcseq	r0, r4, r1, lsl #2
 45c:	00020000 	andeq	r0, r2, r0
 460:	0000009e 	muleq	r0, lr, r0
 464:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 468:	0101000d 	tsteq	r1, sp
 46c:	00000101 	andeq	r0, r0, r1, lsl #2
 470:	00000100 	andeq	r0, r0, r0, lsl #2
 474:	6f682f01 	svcvs	0x00682f01
 478:	622f656d 	eorvs	r6, pc, #457179136	; 0x1b400000
 47c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 480:	76616c73 			; <UNDEFINED> instruction: 0x76616c73
 484:	6f772f65 	svcvs	0x00772f65
 488:	70736b72 	rsbsvc	r6, r3, r2, ror fp
 48c:	2f656361 	svccs	0x00656361
 490:	616e6942 	cmnvs	lr, r2, asr #18
 494:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0x972
 498:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 49c:	616c2f65 	cmnvs	ip, r5, ror #30
 4a0:	2f6c6562 	svccs	0x006c6562
 4a4:	7a746568 	bvc	1d19a4c <shift+0x1d19a4c>
 4a8:	2f72656e 	svccs	0x0072656e
 4ac:	67726174 			; <UNDEFINED> instruction: 0x67726174
 4b0:	612f7465 	teqvs	pc, r5, ror #8
 4b4:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 4b8:	2f696261 	svccs	0x00696261
 4bc:	70616e73 	rsbvc	r6, r1, r3, ror lr
 4c0:	746f6873 	strbtvc	r6, [pc], #-2163	; 4c8 <shift+0x4c8>
 4c4:	63672f73 	cmnvs	r7, #460	; 0x1cc
 4c8:	696c2d63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sl, fp, sp}^
 4cc:	6f72616e 	svcvs	0x0072616e
 4d0:	392e342d 	stmdbcc	lr!, {r0, r2, r3, r5, sl, ip, sp}
 4d4:	3130322d 	teqcc	r0, sp, lsr #4
 4d8:	31302e35 	teqcc	r0, r5, lsr lr
 4dc:	6c2f332d 	stcvs	3, cr3, [pc], #-180	; 430 <shift+0x430>
 4e0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
 4e4:	6f632f63 	svcvs	0x00632f63
 4e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 4ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4f0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
 4f4:	75663162 	strbvc	r3, [r6, #-354]!	; 0x162
 4f8:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
 4fc:	00010053 	andeq	r0, r1, r3, asr r0
 500:	05000000 	streq	r0, [r0, #-0]
 504:	00140c02 	andseq	r0, r4, r2, lsl #24
 508:	0a960382 	beq	fe581318 <__bss_start+0x7c57fd64>
 50c:	00020201 	andeq	r0, r2, r1, lsl #4
 510:	Address 0x0000000000000510 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000045 	andeq	r0, r0, r5, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	8200005c 	andhi	r0, r0, #92	; 0x5c
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	00532e74 	subseq	r2, r3, r4, ror lr
  20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff6c <__bss_start+0x7dffe9b8>
  24:	31732f65 	cmncc	r3, r5, ror #30
  28:	31313133 	teqcc	r1, r3, lsr r1
  2c:	652f3632 	strvs	r3, [pc, #-1586]!	; fffffa02 <__bss_start+0x7dffe44e>
  30:	6c2f3173 	stfvss	f3, [pc], #-460	; fffffe6c <__bss_start+0x7dffe8b8>
  34:	34306261 	ldrtcc	r6, [r0], #-609	; 0x261
  38:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  3c:	20534120 	subscs	r4, r3, r0, lsr #2
  40:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
  44:	0100302e 	tsteq	r0, lr, lsr #32
  48:	0000be80 	andeq	fp, r0, r0, lsl #29
  4c:	14000400 	strne	r0, [r0], #-1024	; 0x400
  50:	04000000 	streq	r0, [r0], #-0
  54:	00000d01 	andeq	r0, r0, r1, lsl #26
  58:	00780100 	rsbseq	r0, r8, r0, lsl #2
  5c:	008e0000 	addeq	r0, lr, r0
  60:	005c0000 	subseq	r0, ip, r0
  64:	02888200 	addeq	r8, r8, #0, 4
  68:	00470000 	subeq	r0, r7, r0
  6c:	a7020000 	strge	r0, [r2, -r0]
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00008f09 	andeq	r8, r0, r9, lsl #30
  78:	00005c00 	andeq	r5, r0, r0, lsl #24
  7c:	00028882 	andeq	r8, r2, r2, lsl #17
  80:	8f9c0100 	svchi	0x009c0100
  84:	03000000 	movweq	r0, #0
  88:	00727470 	rsbseq	r7, r2, r0, ror r4
  8c:	00960b01 	addseq	r0, r6, r1, lsl #22
  90:	91020000 	mrsls	r0, (UNDEF: 2)
  94:	706e0374 	rsbvc	r0, lr, r4, ror r3
  98:	960c0100 	strls	r0, [ip], -r0, lsl #2
  9c:	02000000 	andeq	r0, r0, #0
  a0:	69037091 	stmdbvs	r3, {r0, r4, r7, ip, sp, lr}
  a4:	8f0d0100 	svchi	0x000d0100
  a8:	02000000 	andeq	r0, r0, #0
  ac:	62036c91 	andvs	r6, r3, #37120	; 0x9100
  b0:	0e010073 	mcreq	0, 0, r0, cr1, cr3, {3}
  b4:	000000a3 	andeq	r0, r0, r3, lsr #1
  b8:	03689102 	cmneq	r8, #-2147483648	; 0x80000000
  bc:	0100696d 	tsteq	r0, sp, ror #18
  c0:	00008f0f 	andeq	r8, r0, pc, lsl #30
  c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
  c8:	66756203 	ldrbtvs	r6, [r5], -r3, lsl #4
  cc:	aa100100 	bge	4004d4 <shift+0x4004d4>
  d0:	03000000 	movweq	r0, #0
  d4:	007f9491 			; <UNDEFINED> instruction: 0x007f9491
  d8:	69050404 	stmdbvs	r5, {r2, sl}
  dc:	0500746e 	streq	r7, [r0, #-1134]	; 0x46e
  e0:	00009c04 	andeq	r9, r0, r4, lsl #24
  e4:	08010600 	stmdaeq	r1, {r9, sl}
  e8:	00000181 	andeq	r0, r0, r1, lsl #3
  ec:	00070406 	andeq	r0, r7, r6, lsl #8
  f0:	07000000 	streq	r0, [r0, -r0]
  f4:	0000009c 	muleq	r0, ip, r0
  f8:	000000ba 	strheq	r0, [r0], -sl
  fc:	0000ba08 	andeq	fp, r0, r8, lsl #20
 100:	06004f00 	streq	r4, [r0], -r0, lsl #30
 104:	00850704 	addeq	r0, r5, r4, lsl #14
 108:	0b000000 	bleq	110 <shift+0x110>
 10c:	04000003 	streq	r0, [r0], #-3
 110:	00008400 	andeq	r8, r0, r0, lsl #8
 114:	0d010400 	cfstrseq	mvf0, [r1, #-0]
 118:	01000000 	mrseq	r0, (UNDEF: 0)
 11c:	00000122 	andeq	r0, r0, r2, lsr #2
 120:	0000008e 	andeq	r0, r0, lr, lsl #1
 124:	820002e4 	andhi	r0, r0, #228, 4	; 0x4000000e
 128:	00000918 	andeq	r0, r0, r8, lsl r9
 12c:	000000a5 	andeq	r0, r0, r5, lsr #1
 130:	0000f002 	andeq	pc, r0, r2
 134:	4b170100 	blmi	5c053c <shift+0x5c053c>
 138:	e4000000 	str	r0, [r0], #-0
 13c:	54820002 	strpl	r0, [r2], #2
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	00004b9c 	muleq	r0, ip, fp
 148:	00630300 	rsbeq	r0, r3, r0, lsl #6
 14c:	00521901 	subseq	r1, r2, r1, lsl #18
 150:	91020000 	mrsls	r0, (UNDEF: 2)
 154:	04040074 	streq	r0, [r4], #-116	; 0x74
 158:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
 15c:	07040500 	streq	r0, [r4, -r0, lsl #10]
 160:	00000000 	andeq	r0, r0, r0
 164:	0000de02 	andeq	sp, r0, r2, lsl #28
 168:	4b260100 	blmi	980570 <shift+0x980570>
 16c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 170:	38820003 	stmcc	r2, {r0, r1}
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	00007f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 17c:	00630300 	rsbeq	r0, r3, r0, lsl #6
 180:	00522801 	subseq	r2, r2, r1, lsl #16
 184:	91020000 	mrsls	r0, (UNDEF: 2)
 188:	0e020074 	mcreq	0, 0, r0, cr2, cr4, {3}
 18c:	01000001 	tsteq	r0, r1
 190:	00005233 	andeq	r5, r0, r3, lsr r2
 194:	00037000 	andeq	r7, r3, r0
 198:	0002a882 	andeq	sl, r2, r2, lsl #17
 19c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
 1a0:	06000000 	streq	r0, [r0], -r0
 1a4:	000000ac 	andeq	r0, r0, ip, lsr #1
 1a8:	00523501 	subseq	r3, r2, r1, lsl #10
 1ac:	91020000 	mrsls	r0, (UNDEF: 2)
 1b0:	65680374 	strbvs	r0, [r8, #-884]!	; 0x374
 1b4:	36010078 			; <UNDEFINED> instruction: 0x36010078
 1b8:	00000052 	andeq	r0, r0, r2, asr r0
 1bc:	03709102 	cmneq	r0, #-2147483648	; 0x80000000
 1c0:	37010069 	strcc	r0, [r1, -r9, rrx]
 1c4:	0000004b 	andeq	r0, r0, fp, asr #32
 1c8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 1cc:	00012902 	andeq	r2, r1, r2, lsl #18
 1d0:	0d5e0100 	ldfeqe	f0, [lr, #-0]
 1d4:	18000001 	stmdane	r0, {r0}
 1d8:	d8820006 	stmle	r2, {r1, r2}
 1dc:	01000000 	mrseq	r0, (UNDEF: 0)
 1e0:	00010d9c 	muleq	r1, ip, sp
 1e4:	74730700 	ldrbtvc	r0, [r3], #-1792	; 0x700
 1e8:	5e010072 	mcrpl	0, 0, r0, cr1, cr2, {3}
 1ec:	0000010d 	andeq	r0, r0, sp, lsl #2
 1f0:	03649102 	cmneq	r4, #-2147483648	; 0x80000000
 1f4:	6001006a 	andvs	r0, r1, sl, rrx
 1f8:	0000004b 	andeq	r0, r0, fp, asr #32
 1fc:	03749102 	cmneq	r4, #-2147483648	; 0x80000000
 200:	61010069 	tstvs	r1, r9, rrx
 204:	0000004b 	andeq	r0, r0, fp, asr #32
 208:	03709102 	cmneq	r0, #-2147483648	; 0x80000000
 20c:	62010071 	andvs	r0, r1, #113	; 0x71
 210:	0000004b 	andeq	r0, r0, fp, asr #32
 214:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 218:	01130408 	tsteq	r3, r8, lsl #8
 21c:	01050000 	mrseq	r0, (UNDEF: 5)
 220:	00018108 	andeq	r8, r1, r8, lsl #2
 224:	01330900 	teqeq	r3, r0, lsl #18
 228:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 22c:	0000004b 	andeq	r0, r0, fp, asr #32
 230:	820006f0 	andhi	r0, r0, #240, 12	; 0xf000000
 234:	000000a4 	andeq	r0, r0, r4, lsr #1
 238:	01409c01 	cmpeq	r0, r1, lsl #24
 23c:	63070000 	movwvs	r0, #28672	; 0x7000
 240:	4b780100 	blmi	1e00648 <shift+0x1e00648>
 244:	02000000 	andeq	r0, r0, #0
 248:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
 24c:	00000165 	andeq	r0, r0, r5, ror #2
 250:	004b8f01 	subeq	r8, fp, r1, lsl #30
 254:	07940000 	ldreq	r0, [r4, r0]
 258:	00708200 	rsbseq	r8, r0, r0, lsl #4
 25c:	9c010000 	stcls	0, cr0, [r1], {-0}
 260:	00000172 	andeq	r0, r0, r2, ror r1
 264:	01007307 	tsteq	r0, r7, lsl #6
 268:	0001728f 	andeq	r7, r1, pc, lsl #5
 26c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 270:	01006903 	tsteq	r0, r3, lsl #18
 274:	00004b91 	muleq	r0, r1, fp
 278:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 27c:	78040800 	stmdavc	r4, {fp}
 280:	0a000001 	beq	28c <shift+0x28c>
 284:	00000113 	andeq	r0, r0, r3, lsl r1
 288:	0001470b 	andeq	r4, r1, fp, lsl #14
 28c:	049b0100 	ldreq	r0, [fp], #256	; 0x100
 290:	b4820008 	strlt	r0, [r2], #8
 294:	01000000 	mrseq	r0, (UNDEF: 0)
 298:	0001a19c 	muleq	r1, ip, r1
 29c:	015c0600 	cmpeq	ip, r0, lsl #12
 2a0:	9d010000 	stcls	0, cr0, [r1, #-0]
 2a4:	000001a1 	andeq	r0, r0, r1, lsr #3
 2a8:	00649102 	rsbeq	r9, r4, r2, lsl #2
 2ac:	0001130c 	andeq	r1, r1, ip, lsl #6
 2b0:	0001b100 	andeq	fp, r1, r0, lsl #2
 2b4:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
 2b8:	00130000 	andseq	r0, r3, r0
 2bc:	85070405 	strhi	r0, [r7, #-1029]	; 0x405
 2c0:	0b000000 	bleq	2c8 <shift+0x2c8>
 2c4:	0000013d 	andeq	r0, r0, sp, lsr r1
 2c8:	08b8a301 	ldmeq	r8!, {r0, r8, r9, sp, pc}
 2cc:	02d08200 	sbcseq	r8, r0, #0, 4
 2d0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2d4:	00000238 	andeq	r0, r0, r8, lsr r2
 2d8:	01007807 	tsteq	r0, r7, lsl #16
 2dc:	00004ba3 	andeq	r4, r0, r3, lsr #23
 2e0:	5c910200 	lfmpl	f0, 4, [r1], {0}
 2e4:	01007907 	tsteq	r0, r7, lsl #18
 2e8:	00004ba3 	andeq	r4, r0, r3, lsr #23
 2ec:	58910200 	ldmpl	r1, {r9}
 2f0:	00011a06 	andeq	r1, r1, r6, lsl #20
 2f4:	38a50100 	stmiacc	r5!, {r8}
 2f8:	02000002 	andeq	r0, r0, #2
 2fc:	b1066c91 			; <UNDEFINED> instruction: 0xb1066c91
 300:	01000000 	mrseq	r0, (UNDEF: 0)
 304:	000238a6 	andeq	r3, r2, r6, lsr #17
 308:	68910200 	ldmvs	r1, {r9}
 30c:	00010006 	andeq	r0, r1, r6
 310:	48a70100 	stmiami	r7!, {r8}
 314:	02000002 	andeq	r0, r0, #2
 318:	52066091 	andpl	r6, r6, #145	; 0x91
 31c:	01000001 	tsteq	r0, r1
 320:	000113a8 	andeq	r1, r1, r8, lsr #7
 324:	73910200 	orrsvc	r0, r1, #0, 4
 328:	646e6503 	strbtvs	r6, [lr], #-1283	; 0x503
 32c:	13a90100 			; <UNDEFINED> instruction: 0x13a90100
 330:	02000001 	andeq	r0, r0, #1
 334:	69037291 	stmdbvs	r3, {r0, r4, r7, r9, ip, sp, lr}
 338:	4baa0100 	blmi	fea80740 <__bss_start+0x7ca7f18c>
 33c:	02000000 	andeq	r0, r0, #0
 340:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
 344:	00000113 	andeq	r0, r0, r3, lsl r1
 348:	00000248 	andeq	r0, r0, r8, asr #4
 34c:	0001b10d 	andeq	fp, r1, sp, lsl #2
 350:	0c000200 	sfmeq	f0, 4, [r0], {-0}
 354:	00000113 	andeq	r0, r0, r3, lsl r1
 358:	00000258 	andeq	r0, r0, r8, asr r2
 35c:	0001b10d 	andeq	fp, r1, sp, lsl #2
 360:	02000400 	andeq	r0, r0, #0, 8
 364:	000000c5 	andeq	r0, r0, r5, asr #1
 368:	004bc901 	subeq	ip, fp, r1, lsl #18
 36c:	0b880000 	bleq	fe200374 <__bss_start+0x7c1fedc0>
 370:	00408200 	subeq	r8, r0, r0, lsl #4
 374:	9c010000 	stcls	0, cr0, [r1], {-0}
 378:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 37c:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xf07
 380:	0dc90100 	stfeqe	f0, [r9]
 384:	02000001 	andeq	r0, r0, #1
 388:	d20e6491 	andle	r6, lr, #-1862270976	; 0x91000000
 38c:	01000000 	mrseq	r0, (UNDEF: 0)
 390:	000172c9 	andeq	r7, r1, r9, asr #5
 394:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 398:	00fa100f 	rscseq	r1, sl, pc
 39c:	cb010000 	blgt	403a4 <shift+0x403a4>
 3a0:	0000004b 	andeq	r0, r0, fp, asr #32
 3a4:	000002a8 	andeq	r0, r0, r8, lsr #5
 3a8:	0002b611 	andeq	fp, r2, r1, lsl r6
 3ac:	02bc1100 	adcseq	r1, ip, #0, 2
 3b0:	06000000 	streq	r0, [r0], -r0
 3b4:	000000d9 	ldrdeq	r0, [r0], -r9
 3b8:	02bccd01 	adcseq	ip, ip, #1, 26	; 0x40
 3bc:	54010000 	strpl	r0, [r1], #-0
 3c0:	0d040800 	stceq	8, cr0, [r4, #-0]
 3c4:	08000001 	stmdaeq	r0, {r0}
 3c8:	00004b04 	andeq	r4, r0, r4, lsl #22
 3cc:	00b91200 	adcseq	r1, r9, r0, lsl #4
 3d0:	d3010000 	movwle	r0, #4096	; 0x1000
 3d4:	0000004b 	andeq	r0, r0, fp, asr #32
 3d8:	82000bc8 	andhi	r0, r0, #200, 22	; 0x32000
 3dc:	00000034 	andeq	r0, r0, r4, lsr r0
 3e0:	d20e9c01 	andle	r9, lr, #256	; 0x100
 3e4:	01000000 	mrseq	r0, (UNDEF: 0)
 3e8:	000172d3 	ldrdeq	r7, [r1], -r3
 3ec:	70910200 	addsvc	r0, r1, r0, lsl #4
 3f0:	00fa100f 	rscseq	r1, sl, pc
 3f4:	d5010000 	strle	r0, [r1, #-0]
 3f8:	0000004b 	andeq	r0, r0, fp, asr #32
 3fc:	00000300 	andeq	r0, r0, r0, lsl #6
 400:	0002b611 	andeq	fp, r2, r1, lsl r6
 404:	02bc1100 	adcseq	r1, ip, #0, 2
 408:	06000000 	streq	r0, [r0], -r0
 40c:	000000d9 	ldrdeq	r0, [r0], -r9
 410:	02bcd701 	adcseq	sp, ip, #262144	; 0x40000
 414:	54010000 	strpl	r0, [r1], #-0
 418:	02a10000 	adceq	r0, r1, #0
 41c:	00040000 	andeq	r0, r4, r0
 420:	00000199 	muleq	r0, r9, r1
 424:	000d0104 	andeq	r0, sp, r4, lsl #2
 428:	9a010000 	bls	40430 <shift+0x40430>
 42c:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
 430:	fc000000 	stc2	0, cr0, [r0], {-0}
 434:	0482000b 	streq	r0, [r2], #11
 438:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
 43c:	02000002 	andeq	r0, r0, #2
 440:	00000186 	andeq	r0, r0, r6, lsl #3
 444:	0bfc1001 	bleq	fff04450 <__bss_start+0x7df02e9c>
 448:	005c8200 	subseq	r8, ip, r0, lsl #4
 44c:	9c010000 	stcls	0, cr0, [r1], {-0}
 450:	00000055 	andeq	r0, r0, r5, asr r0
 454:	72747303 	rsbsvc	r7, r4, #201326592	; 0xc000000
 458:	55100100 	ldrpl	r0, [r0, #-256]	; 0x100
 45c:	02000000 	andeq	r0, r0, #0
 460:	63037491 	movwvs	r7, #13457	; 0x3491
 464:	68100100 	ldmdavs	r0, {r8}
 468:	02000000 	andeq	r0, r0, #0
 46c:	04007091 	streq	r7, [r0], #-145	; 0x91
 470:	00005b04 	andeq	r5, r0, r4, lsl #22
 474:	61040400 	tstvs	r4, r0, lsl #8
 478:	05000000 	streq	r0, [r0, #-0]
 47c:	01810801 	orreq	r0, r1, r1, lsl #16
 480:	04060000 	streq	r0, [r6], #-0
 484:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
 488:	01b50700 			; <UNDEFINED> instruction: 0x01b50700
 48c:	1b010000 	blne	40494 <shift+0x40494>
 490:	00000068 	andeq	r0, r0, r8, rrx
 494:	82000c58 	andhi	r0, r0, #88, 24	; 0x5800
 498:	00000138 	andeq	r0, r0, r8, lsr r1
 49c:	00fe9c01 	rscseq	r9, lr, r1, lsl #24
 4a0:	6f030000 	svcvs	0x00030000
 4a4:	01007475 	tsteq	r0, r5, ror r4
 4a8:	0000551b 	andeq	r5, r0, fp, lsl r5
 4ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 4b0:	00017708 	andeq	r7, r1, r8, lsl #14
 4b4:	fe1b0100 	cdp2	1, 1, cr0, cr11, cr0, {0}
 4b8:	02000000 	andeq	r0, r0, #0
 4bc:	a2086091 	andge	r6, r8, #145	; 0x91
 4c0:	01000001 	tsteq	r0, r1
 4c4:	0000681b 	andeq	r6, r0, fp, lsl r8
 4c8:	5c910200 	lfmpl	f0, 4, [r1], {0}
 4cc:	64617003 	strbtvs	r7, [r1], #-3
 4d0:	681b0100 	ldmdavs	fp, {r8}
 4d4:	02000000 	andeq	r0, r0, #0
 4d8:	70095891 	mulvc	r9, r1, r8
 4dc:	1d010063 	stcne	0, cr0, [r1, #-396]	; 0xfffffe74
 4e0:	00000068 	andeq	r0, r0, r8, rrx
 4e4:	7e0a5401 	cdpvc	4, 0, cr5, cr10, cr1, {0}
 4e8:	01000001 	tsteq	r0, r1
 4ec:	0000681d 	andeq	r6, r0, sp, lsl r8
 4f0:	0b570100 	bleq	15c08f8 <shift+0x15c08f8>
 4f4:	82000c88 	andhi	r0, r0, #136, 24	; 0x8800
 4f8:	00000058 	andeq	r0, r0, r8, asr r0
 4fc:	6e656c09 	cdpvs	12, 6, cr6, cr5, cr9, {0}
 500:	68200100 	stmdavs	r0!, {r8}
 504:	01000000 	mrseq	r0, (UNDEF: 0)
 508:	74700955 	ldrbtvc	r0, [r0], #-2389	; 0x955
 50c:	21010072 	tstcs	r1, r2, ror r0
 510:	000000fe 	strdeq	r0, [r0], -lr
 514:	00005601 	andeq	r5, r0, r1, lsl #12
 518:	01040404 	tsteq	r4, r4, lsl #8
 51c:	610c0000 	mrsvs	r0, (UNDEF: 12)
 520:	07000000 	streq	r0, [r0, -r0]
 524:	000001a8 	andeq	r0, r0, r8, lsr #3
 528:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 52c:	0d900000 	ldceq	0, cr0, [r0]
 530:	01808200 	orreq	r8, r0, r0, lsl #4
 534:	9c010000 	stcls	0, cr0, [r1], {-0}
 538:	000001c8 	andeq	r0, r0, r8, asr #3
 53c:	74756f03 	ldrbtvc	r6, [r5], #-3843	; 0xf03
 540:	553f0100 	ldrpl	r0, [pc, #-256]!	; 448 <shift+0x448>
 544:	02000000 	andeq	r0, r0, #0
 548:	69034c91 	stmdbvs	r3, {r0, r4, r7, sl, fp, lr}
 54c:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
 550:	02000000 	andeq	r0, r0, #0
 554:	62034891 	andvs	r4, r3, #9502720	; 0x910000
 558:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
 55c:	02000000 	andeq	r0, r0, #0
 560:	73034491 	movwvc	r4, #13457	; 0x3491
 564:	3f010067 	svccc	0x00010067
 568:	00000068 	andeq	r0, r0, r8, rrx
 56c:	08409102 	stmdaeq	r0, {r1, r8, ip, pc}^
 570:	000001a2 	andeq	r0, r0, r2, lsr #3
 574:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 578:	91020000 	mrsls	r0, (UNDEF: 2)
 57c:	61700300 	cmnvs	r0, r0, lsl #6
 580:	3f010064 	svccc	0x00010064
 584:	00000068 	andeq	r0, r0, r8, rrx
 588:	08049102 	stmdaeq	r4, {r1, r8, ip, pc}
 58c:	0000016f 	andeq	r0, r0, pc, ror #2
 590:	00684001 	rsbeq	r4, r8, r1
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	01900a08 	orrseq	r0, r0, r8, lsl #20
 59c:	42010000 	andmi	r0, r1, #0
 5a0:	000001c8 	andeq	r0, r0, r8, asr #3
 5a4:	09549102 	ldmdbeq	r4, {r1, r8, ip, pc}^
 5a8:	43010073 	movwmi	r0, #4211	; 0x1073
 5ac:	0000005b 	andeq	r0, r0, fp, asr r0
 5b0:	74095401 	strvc	r5, [r9], #-1025	; 0x401
 5b4:	68440100 	stmdavs	r4, {r8}^
 5b8:	01000000 	mrseq	r0, (UNDEF: 0)
 5bc:	656e0956 	strbvs	r0, [lr, #-2390]!	; 0x956
 5c0:	44010067 	strmi	r0, [r1], #-103	; 0x67
 5c4:	00000068 	andeq	r0, r0, r8, rrx
 5c8:	70095801 	andvc	r5, r9, r1, lsl #16
 5cc:	44010063 	strmi	r0, [r1], #-99	; 0x63
 5d0:	00000068 	andeq	r0, r0, r8, rrx
 5d4:	75095501 	strvc	r5, [r9, #-1281]	; 0x501
 5d8:	df450100 	svcle	0x00450100
 5dc:	01000001 	tsteq	r0, r1
 5e0:	610d0057 	qaddvs	r0, r7, sp
 5e4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 5e8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 5ec:	000001d8 	ldrdeq	r0, [r0], -r8
 5f0:	0405000b 	streq	r0, [r5], #-11
 5f4:	00008507 	andeq	r8, r0, r7, lsl #10
 5f8:	07040500 	streq	r0, [r4, -r0, lsl #10]
 5fc:	00000000 	andeq	r0, r0, r0
 600:	0000fa07 	andeq	pc, r0, r7, lsl #20
 604:	686c0100 	stmdavs	ip!, {r8}^
 608:	10000000 	andne	r0, r0, r0
 60c:	dc82000f 	stcle	0, cr0, [r2], {15}
 610:	01000002 	tsteq	r0, r2
 614:	00027d9c 	muleq	r2, ip, sp
 618:	756f0300 	strbvc	r0, [pc, #-768]!	; 320 <shift+0x320>
 61c:	6c010074 	stcvs	0, cr0, [r1], {116}	; 0x74
 620:	00000055 	andeq	r0, r0, r5, asr r0
 624:	08549102 	ldmdaeq	r4, {r1, r8, ip, pc}^
 628:	000000d9 	ldrdeq	r0, [r0], -r9
 62c:	027d6c01 	rsbseq	r6, sp, #256	; 0x100
 630:	91020000 	mrsls	r0, (UNDEF: 2)
 634:	01a20a50 			; <UNDEFINED> instruction: 0x01a20a50
 638:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 63c:	00000068 	andeq	r0, r0, r8, rrx
 640:	70095601 	andvc	r5, r9, r1, lsl #12
 644:	01006461 	tsteq	r0, r1, ror #8
 648:	0000686e 	andeq	r6, r0, lr, ror #16
 64c:	09570100 	ldmdbeq	r7, {r8}^
 650:	01006370 	tsteq	r0, r0, ror r3
 654:	0000686f 	andeq	r6, r0, pc, ror #16
 658:	0a550100 	beq	1540a60 <shift+0x1540a60>
 65c:	000000d2 	ldrdeq	r0, [r0], -r2
 660:	005b7001 	subseq	r7, fp, r1
 664:	54010000 	strpl	r0, [r1], #-0
 668:	72637309 	rsbvc	r7, r3, #603979776	; 0x24000000
 66c:	83710100 	cmnhi	r1, #0, 2
 670:	02000002 	andeq	r0, r0, #2
 674:	6f0f5c91 	svcvs	0x000f5c91
 678:	01007475 	tsteq	r0, r5, ror r4
 67c:	00119ca4 	andseq	r9, r1, r4, lsr #25
 680:	0fec0b82 	svceq	0x00ec0b82
 684:	00448200 	subeq	r8, r4, r0, lsl #4
 688:	73090000 	movwvc	r0, #36864	; 0x9000
 68c:	5b880100 	blpl	fe200a94 <__bss_start+0x7c1ff4e0>
 690:	01000000 	mrseq	r0, (UNDEF: 0)
 694:	04000058 	streq	r0, [r0], #-88	; 0x58
 698:	00006804 	andeq	r6, r0, r4, lsl #16
 69c:	00610d00 	rsbeq	r0, r1, r0, lsl #26
 6a0:	02930000 	addseq	r0, r3, #0
 6a4:	d80e0000 	stmdale	lr, {}	; <UNPREDICTABLE>
 6a8:	01000001 	tsteq	r0, r1
 6ac:	01af1000 			; <UNDEFINED> instruction: 0x01af1000
 6b0:	b0010000 	andlt	r0, r1, r0
 6b4:	820011ec 	andhi	r1, r0, #236, 2	; 0x3b
 6b8:	00000014 	andeq	r0, r0, r4, lsl r0
 6bc:	53009c01 	movwpl	r9, #3073	; 0xc01
 6c0:	02000001 	andeq	r0, r0, #1
 6c4:	00028500 	andeq	r8, r2, r0, lsl #10
 6c8:	7f010400 	svcvc	0x00010400
 6cc:	00000003 	andeq	r0, r0, r3
 6d0:	0c820012 	stceq	0, cr0, [r2], {18}
 6d4:	2f820014 	svccs	0x00820014
 6d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 6dc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 6e0:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 6e4:	2f657661 	svccs	0x00657661
 6e8:	6b726f77 	blvs	1c9c4cc <shift+0x1c9c4cc>
 6ec:	63617073 	cmnvs	r1, #115	; 0x73
 6f0:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 6f4:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 6f8:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 6fc:	2f657361 	svccs	0x00657361
 700:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 704:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 708:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 70c:	61742f72 	cmnvs	r4, r2, ror pc
 710:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 714:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 718:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 71c:	6e732f69 	cdpvs	15, 7, cr2, cr3, cr9, {3}
 720:	68737061 	ldmdavs	r3!, {r0, r5, r6, ip, sp, lr}^
 724:	2f73746f 	svccs	0x0073746f
 728:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 72c:	616e696c 	cmnvs	lr, ip, ror #18
 730:	342d6f72 	strtcc	r6, [sp], #-3954	; 0xf72
 734:	322d392e 	eorcc	r3, sp, #753664	; 0xb8000
 738:	2e353130 	mrccs	1, 1, r3, cr5, cr0, {1}
 73c:	332d3130 	teqcc	sp, #48, 2
 740:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 744:	2f636367 	svccs	0x00636367
 748:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 74c:	612f6769 	teqvs	pc, r9, ror #14
 750:	6c2f6d72 	stcvs	13, cr6, [pc], #-456	; 590 <shift+0x590>
 754:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
 758:	73636e75 	cmnvc	r3, #1872	; 0x750
 75c:	2f00532e 	svccs	0x0000532e
 760:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 764:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 768:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 76c:	2f657661 	svccs	0x00657661
 770:	6b726f77 	blvs	1c9c554 <shift+0x1c9c554>
 774:	63617073 	cmnvs	r1, #115	; 0x73
 778:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 77c:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 780:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 784:	2f657361 	svccs	0x00657361
 788:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 78c:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 790:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 794:	61742f72 	cmnvs	r4, r2, ror pc
 798:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 79c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 7a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 7a4:	625f2f69 	subsvs	r2, pc, #420	; 0x1a4
 7a8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 7ac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 7b0:	2f73646c 	svccs	0x0073646c
 7b4:	5f363878 	svcpl	0x00363878
 7b8:	752d3436 	strvc	r3, [sp, #-1078]!	; 0x436
 7bc:	6f6e6b6e 	svcvs	0x006e6b6e
 7c0:	6c2d6e77 	stcvs	14, cr6, [sp], #-476	; 0xfffffe24
 7c4:	78756e69 	ldmdavc	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 7c8:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0x72d
 7cc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 7d0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 7d4:	63672f69 	cmnvs	r7, #420	; 0x1a4
 7d8:	696c2d63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sl, fp, sp}^
 7dc:	6f72616e 	svcvs	0x0072616e
 7e0:	392e342d 	stmdbcc	lr!, {r0, r2, r3, r5, sl, ip, sp}
 7e4:	3130322d 	teqcc	r0, sp, lsr #4
 7e8:	31302e35 	teqcc	r0, r5, lsr lr
 7ec:	732d332d 	teqvc	sp, #-1275068416	; 0xb4000000
 7f0:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
 7f4:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
 7f8:	61652d6d 	cmnvs	r5, sp, ror #26
 7fc:	6c2f6962 	stcvs	9, cr6, [pc], #-392	; 67c <shift+0x67c>
 800:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
 804:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
 808:	53412055 	movtpl	r2, #4181	; 0x1055
 80c:	322e3220 	eorcc	r3, lr, #32, 4
 810:	00302e34 	eorseq	r2, r0, r4, lsr lr
 814:	01538001 	cmpeq	r3, r1
 818:	00020000 	andeq	r0, r2, r0
 81c:	00000299 	muleq	r0, r9, r2
 820:	045a0104 	ldrbeq	r0, [sl], #-260	; 0x104
 824:	140c0000 	strne	r0, [ip], #-0
 828:	14108200 	ldrne	r8, [r0], #-512	; 0x200
 82c:	682f8200 	stmdavs	pc!, {r9, pc}	; <UNPREDICTABLE>
 830:	2f656d6f 	svccs	0x00656d6f
 834:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 838:	616c7364 	cmnvs	ip, r4, ror #6
 83c:	772f6576 			; <UNDEFINED> instruction: 0x772f6576
 840:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 844:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
 848:	6e69422f 	cdpvs	2, 6, cr4, cr9, cr15, {1}
 84c:	52797261 	rsbspl	r7, r9, #268435462	; 0x10000006
 850:	61656c65 	cmnvs	r5, r5, ror #24
 854:	6c2f6573 	cfstr32vs	mvfx6, [pc], #-460	; 690 <shift+0x690>
 858:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 85c:	7465682f 	strbtvc	r6, [r5], #-2095	; 0x82f
 860:	72656e7a 	rsbvc	r6, r5, #1952	; 0x7a0
 864:	7261742f 	rsbvc	r7, r1, #788529152	; 0x2f000000
 868:	2f746567 	svccs	0x00746567
 86c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 870:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 874:	616e732f 	cmnvs	lr, pc, lsr #6
 878:	6f687370 	svcvs	0x00687370
 87c:	672f7374 			; <UNDEFINED> instruction: 0x672f7374
 880:	6c2d6363 	stcvs	3, cr6, [sp], #-396	; 0xfffffe74
 884:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 888:	2e342d6f 	cdpcs	13, 3, cr2, cr4, cr15, {3}
 88c:	30322d39 	eorscc	r2, r2, r9, lsr sp
 890:	302e3531 	eorcc	r3, lr, r1, lsr r5
 894:	2f332d31 	svccs	0x00332d31
 898:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
 89c:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
 8a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8a4:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
 8a8:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 8ac:	75663162 	strbvc	r3, [r6, #-354]!	; 0x162
 8b0:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
 8b4:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
 8b8:	2f656d6f 	svccs	0x00656d6f
 8bc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8c0:	616c7364 	cmnvs	ip, r4, ror #6
 8c4:	772f6576 			; <UNDEFINED> instruction: 0x772f6576
 8c8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 8cc:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
 8d0:	6e69422f 	cdpvs	2, 6, cr4, cr9, cr15, {1}
 8d4:	52797261 	rsbspl	r7, r9, #268435462	; 0x10000006
 8d8:	61656c65 	cmnvs	r5, r5, ror #24
 8dc:	6c2f6573 	cfstr32vs	mvfx6, [pc], #-460	; 718 <shift+0x718>
 8e0:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8e4:	7465682f 	strbtvc	r6, [r5], #-2095	; 0x82f
 8e8:	72656e7a 	rsbvc	r6, r5, #1952	; 0x7a0
 8ec:	7261742f 	rsbvc	r7, r1, #788529152	; 0x2f000000
 8f0:	2f746567 	svccs	0x00746567
 8f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 8f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 8fc:	75625f2f 	strbvc	r5, [r2, #-3887]!	; 0xf2f
 900:	2f646c69 	svccs	0x00646c69
 904:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 908:	782f7364 	stmdavc	pc!, {r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 90c:	365f3638 			; <UNDEFINED> instruction: 0x365f3638
 910:	6e752d34 	mrcvs	13, 3, r2, cr5, cr4, {1}
 914:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 918:	696c2d6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sl, fp, sp}^
 91c:	2d78756e 	cfldr64cs	mvdx7, [r8, #-440]!	; 0xfffffe48
 920:	2f756e67 	svccs	0x00756e67
 924:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 928:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 92c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 930:	6e696c2d 	cdpvs	12, 6, cr6, cr9, cr13, {1}
 934:	2d6f7261 	sfmcs	f7, 2, [pc, #-388]!	; 7b8 <shift+0x7b8>
 938:	2d392e34 	ldccs	14, cr2, [r9, #-208]!	; 0xffffff30
 93c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
 940:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
 944:	74732d33 	ldrbtvc	r2, [r3], #-3379	; 0xd33
 948:	32656761 	rsbcc	r6, r5, #25427968	; 0x1840000
 94c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 950:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 954:	696c2f69 	stmdbvs	ip!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
 958:	63636762 	cmnvs	r3, #25690112	; 0x1880000
 95c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
 960:	20534120 	subscs	r4, r3, r0, lsr #2
 964:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
 968:	0100302e 	tsteq	r0, lr, lsr #32
 96c:	Address 0x000000000000096c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <shift+0x200c14>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  18:	030b130e 	movweq	r1, #45838	; 0xb30e
  1c:	110e1b0e 	tstne	lr, lr, lsl #22
  20:	10061201 	andne	r1, r6, r1, lsl #4
  24:	02000017 	andeq	r0, r0, #23
  28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <shift+0xe83840>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	01111349 	tsteq	r1, r9, asr #6
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	03000013 	movweq	r0, #19
  44:	08030034 	stmdaeq	r3, {r2, r4, r5}
  48:	0b3b0b3a 	bleq	ec2d38 <shift+0xec2d38>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	24040000 	strcs	r0, [r4], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	0008030b 	andeq	r0, r8, fp, lsl #6
  5c:	000f0500 	andeq	r0, pc, r0, lsl #10
  60:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  64:	24060000 	strcs	r0, [r6], #-0
  68:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  6c:	000e030b 	andeq	r0, lr, fp, lsl #6
  70:	01010700 	tsteq	r1, r0, lsl #14
  74:	13011349 	movwne	r1, #4937	; 0x1349
  78:	21080000 	mrscs	r0, (UNDEF: 8)
  7c:	2f134900 	svccs	0x00134900
  80:	0000000b 	andeq	r0, r0, fp
  84:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  88:	030b130e 	movweq	r1, #45838	; 0xb30e
  8c:	110e1b0e 	tstne	lr, lr, lsl #22
  90:	10061201 	andne	r1, r6, r1, lsl #4
  94:	02000017 	andeq	r0, r0, #23
  98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  9c:	0b3a0e03 	bleq	e838b0 <shift+0xe838b0>
  a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a4:	01111349 	tsteq	r1, r9, asr #6
  a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b0:	03000013 	movweq	r0, #19
  b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  b8:	0b3b0b3a 	bleq	ec2da8 <shift+0xec2da8>
  bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c0:	24040000 	strcs	r0, [r4], #-0
  c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  c8:	0008030b 	andeq	r0, r8, fp, lsl #6
  cc:	00240500 	eoreq	r0, r4, r0, lsl #10
  d0:	0b3e0b0b 	bleq	f82d04 <shift+0xf82d04>
  d4:	00000e03 	andeq	r0, r0, r3, lsl #28
  d8:	03003406 	movweq	r3, #1030	; 0x406
  dc:	3b0b3a0e 	blcc	2ce91c <shift+0x2ce91c>
  e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e4:	07000018 	smladeq	r0, r8, r0, r0
  e8:	08030005 	stmdaeq	r3, {r0, r2}
  ec:	0b3b0b3a 	bleq	ec2ddc <shift+0xec2ddc>
  f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f4:	0f080000 	svceq	0x00080000
  f8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  fc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 100:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 104:	0b3a0e03 	bleq	e83918 <shift+0xe83918>
 108:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 10c:	01111349 	tsteq	r1, r9, asr #6
 110:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 114:	01194297 			; <UNDEFINED> instruction: 0x01194297
 118:	0a000013 	beq	16c <shift+0x16c>
 11c:	13490026 	movtne	r0, #36902	; 0x9026
 120:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <shift+0x2ce968>
 12c:	1119270b 	tstne	r9, fp, lsl #14
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
 140:	00130113 	andseq	r0, r3, r3, lsl r1
 144:	00210d00 	eoreq	r0, r1, r0, lsl #26
 148:	0b2f1349 	bleq	bc4e74 <shift+0xbc4e74>
 14c:	050e0000 	streq	r0, [lr, #-0]
 150:	3a0e0300 	bcc	380d58 <shift+0x380d58>
 154:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 158:	00180213 	andseq	r0, r8, r3, lsl r2
 15c:	00180f00 	andseq	r0, r8, r0, lsl #30
 160:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <shift+0x2ce9a8>
 16c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 170:	01193c13 	tsteq	r9, r3, lsl ip
 174:	11000013 	tstne	r0, r3, lsl r0
 178:	13490005 	movtne	r0, #36869	; 0x9005
 17c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 180:	03193f01 	tsteq	r9, #1, 30
 184:	3b0b3a0e 	blcc	2ce9c4 <shift+0x2ce9c4>
 188:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 18c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 190:	96184006 	ldrls	r4, [r8], -r6
 194:	00001942 	andeq	r1, r0, r2, asr #18
 198:	01110100 	tsteq	r1, r0, lsl #2
 19c:	0b130e25 	bleq	4c3a38 <shift+0x4c3a38>
 1a0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	00001710 	andeq	r1, r0, r0, lsl r7
 1ac:	3f012e02 	svccc	0x00012e02
 1b0:	3a0e0319 	bcc	380e1c <shift+0x380e1c>
 1b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1bc:	96184006 	ldrls	r4, [r8], -r6
 1c0:	13011942 	movwne	r1, #6466	; 0x1942
 1c4:	05030000 	streq	r0, [r3, #-0]
 1c8:	3a080300 	bcc	200dd0 <shift+0x200dd0>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	00180213 	andseq	r0, r8, r3, lsl r2
 1d4:	000f0400 	andeq	r0, pc, r0, lsl #8
 1d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1dc:	24050000 	strcs	r0, [r5], #-0
 1e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1e4:	000e030b 	andeq	r0, lr, fp, lsl #6
 1e8:	00240600 	eoreq	r0, r4, r0, lsl #12
 1ec:	0b3e0b0b 	bleq	f82e20 <shift+0xf82e20>
 1f0:	00000803 	andeq	r0, r0, r3, lsl #16
 1f4:	3f012e07 	svccc	0x00012e07
 1f8:	3a0e0319 	bcc	380e64 <shift+0x380e64>
 1fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 200:	11134919 	tstne	r3, r9, lsl r9
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	03000508 	movweq	r0, #1288	; 0x508
 214:	3b0b3a0e 	blcc	2cea54 <shift+0x2cea54>
 218:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 21c:	09000018 	stmdbeq	r0, {r3, r4}
 220:	08030034 	stmdaeq	r3, {r2, r4, r5}
 224:	0b3b0b3a 	bleq	ec2f14 <shift+0xec2f14>
 228:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 22c:	340a0000 	strcc	r0, [sl], #-0
 230:	3a0e0300 	bcc	380e38 <shift+0x380e38>
 234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 238:	00180213 	andseq	r0, r8, r3, lsl r2
 23c:	010b0b00 	tsteq	fp, r0, lsl #22
 240:	06120111 			; <UNDEFINED> instruction: 0x06120111
 244:	260c0000 	strcs	r0, [ip], -r0
 248:	00134900 	andseq	r4, r3, r0, lsl #18
 24c:	01010d00 	tsteq	r1, r0, lsl #26
 250:	13011349 	movwne	r1, #4937	; 0x1349
 254:	210e0000 	mrscs	r0, (UNDEF: 14)
 258:	2f134900 	svccs	0x00134900
 25c:	0f00000b 	svceq	0x0000000b
 260:	0803000a 	stmdaeq	r3, {r1, r3}
 264:	0b3b0b3a 	bleq	ec2f54 <shift+0xec2f54>
 268:	00000111 	andeq	r0, r0, r1, lsl r1
 26c:	3f002e10 	svccc	0x00002e10
 270:	3a0e0319 	bcc	380edc <shift+0x380edc>
 274:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 278:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 27c:	97184006 	ldrls	r4, [r8, -r6]
 280:	00001942 	andeq	r1, r0, r2, asr #18
 284:	00110100 	andseq	r0, r1, r0, lsl #2
 288:	01110610 	tsteq	r1, r0, lsl r6
 28c:	08030112 	stmdaeq	r3, {r1, r4, r8}
 290:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
 294:	00000513 	andeq	r0, r0, r3, lsl r5
 298:	00110100 	andseq	r0, r1, r0, lsl #2
 29c:	01110610 	tsteq	r1, r0, lsl r6
 2a0:	08030112 	stmdaeq	r3, {r1, r4, r8}
 2a4:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
 2a8:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	0000005c 	andeq	r0, r0, ip, asr r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00490002 	subeq	r0, r9, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	8200005c 	andhi	r0, r0, #92	; 0x5c
  34:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	010b0002 	tsteq	fp, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	820002e4 	andhi	r0, r0, #228, 4	; 0x4000000e
  54:	00000918 	andeq	r0, r0, r8, lsl r9
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	041a0002 	ldreq	r0, [sl], #-2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	82000bfc 	andhi	r0, r0, #252, 22	; 0x3f000
  74:	00000604 	andeq	r0, r0, r4, lsl #12
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	06bf0002 	ldrteq	r0, [pc], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	82001200 	andhi	r1, r0, #0, 4
  94:	0000020c 	andeq	r0, r0, ip, lsl #4
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	08160002 	ldmdaeq	r6, {r1}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	8200140c 	andhi	r1, r0, #12, 8	; 0xc000000
  b4:	00000004 	andeq	r0, r0, r4
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
   c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  10:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  14:	332e392e 	teqcc	lr, #753664	; 0xb8000
  18:	31303220 	teqcc	r0, r0, lsr #4
  1c:	31313035 	teqcc	r1, r5, lsr r0
  20:	70282033 	eorvc	r2, r8, r3, lsr r0
  24:	65726572 	ldrbvs	r6, [r2, #-1394]!	; 0x572
  28:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  2c:	2d202965 	stccs	9, cr2, [r0, #-404]!	; 0xfffffe6c
  30:	6d72616d 	ldfvse	f6, [r2, #-436]!	; 0xfffffe4c
  34:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  38:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
  3c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
  40:	38612d78 	stmdacc	r1!, {r3, r4, r5, r6, r8, sl, fp, sp}^
  44:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  48:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  4c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  50:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  54:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  58:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  5c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
  60:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  64:	6962616d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  68:	7061613d 	rsbvc	r6, r1, sp, lsr r1
  6c:	6c2d7363 	stcvs	3, cr7, [sp], #-396	; 0xfffffe74
  70:	78756e69 	ldmdavc	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
  74:	00672d20 	rsbeq	r2, r7, r0, lsr #26
  78:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  7c:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
  80:	632e3374 	teqvs	lr, #116, 6	; 0xd0000001
  84:	7a697300 	bvc	1a5cc8c <shift+0x1a5cc8c>
  88:	70797465 	rsbsvc	r7, r9, r5, ror #8
  8c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
  90:	2f656d6f 	svccs	0x00656d6f
  94:	31333173 	teqcc	r3, r3, ror r1
  98:	36323131 			; <UNDEFINED> instruction: 0x36323131
  9c:	3173652f 	cmncc	r3, pc, lsr #10
  a0:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  a4:	6d003430 	cfstrsvs	mvf3, [r0, #-192]	; 0xffffff40
  a8:	006e6961 	rsbeq	r6, lr, r1, ror #18
  ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
  b0:	756e7900 	strbvc	r7, [lr, #-2304]!	; 0x900
  b4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
  b8:	52415500 	subpl	r5, r1, #0, 10
  bc:	72705f54 	rsbsvc	r5, r0, #84, 30	; 0x150
  c0:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
  c4:	52415500 	subpl	r5, r1, #0, 10
  c8:	70735f54 	rsbsvc	r5, r3, r4, asr pc
  cc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
  d0:	6f660066 	svcvs	0x00660066
  d4:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
  d8:	72617600 	rsbvc	r7, r1, #0, 12
  dc:	41550067 	cmpmi	r5, r7, rrx
  e0:	675f5452 			; <UNDEFINED> instruction: 0x675f5452
  e4:	5f637465 	svcpl	0x00637465
  e8:	6c626f6e 	stclvs	15, cr6, [r2], #-440	; 0xfffffe48
  ec:	006b636f 	rsbeq	r6, fp, pc, ror #6
  f0:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
  f4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
  f8:	72700063 	rsbsvc	r0, r0, #99	; 0x63
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	6f746f67 	svcvs	0x00746f67
 104:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0x573
 108:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
 10c:	41550031 	cmpmi	r5, r1, lsr r0
 110:	675f5452 			; <UNDEFINED> instruction: 0x675f5452
 114:	65687465 	strbvs	r7, [r8, #-1125]!	; 0x465
 118:	6e780078 	mrcvs	0, 3, r0, cr8, cr8, {3}
 11c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
 120:	61750072 	cmnvs	r5, r2, ror r0
 124:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 128:	52415500 	subpl	r5, r1, #0, 10
 12c:	65675f54 	strbvs	r5, [r7, #-3924]!	; 0xf54
 130:	55007374 	strpl	r7, [r0, #-884]	; 0x374
 134:	5f545241 	svcpl	0x00545241
 138:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 13c:	52415500 	subpl	r5, r1, #0, 10
 140:	6f675f54 	svcvs	0x00675f54
 144:	55006f74 	strpl	r6, [r0, #-3956]	; 0xf74
 148:	5f545241 	svcpl	0x00545241
 14c:	61656c63 	cmnvs	r5, r3, ror #24
 150:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0x72
 154:	6f63696d 	svcvs	0x0063696d
 158:	006e6f6c 	rsbeq	r6, lr, ip, ror #30
 15c:	73637365 	cmnvc	r3, #-1811939327	; 0x94000001
 160:	65636e71 	strbvs	r6, [r3, #-3697]!	; 0xe71
 164:	52415500 	subpl	r5, r1, #0, 10
 168:	75705f54 	ldrbvc	r5, [r0, #-3924]!	; 0xf54
 16c:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
 170:	61627465 	cmnvs	r2, r5, ror #8
 174:	73006573 	movwvc	r6, #1395	; 0x573
 178:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 17c:	61700067 	cmnvs	r0, r7, rrx
 180:	61686364 	cmnvs	r8, r4, ror #6
 184:	72700072 	rsbsvc	r0, r0, #114	; 0x72
 188:	63746e69 	cmnvs	r4, #1680	; 0x690
 18c:	00726168 	rsbseq	r6, r2, r8, ror #2
 190:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 194:	75625f74 	strbvc	r5, [r2, #-3956]!	; 0xf74
 198:	72700066 	rsbsvc	r0, r0, #102	; 0x66
 19c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 1a0:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
 1a4:	00687464 	rsbeq	r7, r8, r4, ror #8
 1a8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1ac:	72006974 	andvc	r6, r0, #116, 18	; 0x1d0000
 1b0:	65736961 	ldrbvs	r6, [r3, #-2401]!	; 0x961
 1b4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 1b8:	0073746e 	rsbseq	r7, r3, lr, ror #8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000020 	andeq	r0, r0, r0, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	8200005c 	andhi	r0, r0, #92	; 0x5c
  1c:	00000288 	andeq	r0, r0, r8, lsl #5
  20:	8b080e42 	blhi	203930 <shift+0x203930>
  24:	42018e02 	andmi	r8, r1, #2, 28
  28:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  2c:	0d0c013e 	stfeqs	f0, [ip, #-248]	; 0xffffff08
  30:	00000008 	andeq	r0, r0, r8
  34:	0000000c 	andeq	r0, r0, ip
  38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  3c:	7c020001 	stcvc	0, cr0, [r2], {1}
  40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
  48:	00000034 	andeq	r0, r0, r4, lsr r0
  4c:	820002e4 	andhi	r0, r0, #228, 4	; 0x4000000e
  50:	00000054 	andeq	r0, r0, r4, asr r0
  54:	8b080e42 	blhi	203964 <shift+0x203964>
  58:	42018e02 	andmi	r8, r1, #2, 28
  5c:	64040b0c 	strvs	r0, [r4], #-2828	; 0xb0c
  60:	00080d0c 	andeq	r0, r8, ip, lsl #26
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
  68:	00000034 	andeq	r0, r0, r4, lsr r0
  6c:	82000338 	andhi	r0, r0, #56, 6	; 0xe0000000
  70:	00000038 	andeq	r0, r0, r8, lsr r0
  74:	8b080e42 	blhi	203984 <shift+0x203984>
  78:	42018e02 	andmi	r8, r1, #2, 28
  7c:	56040b0c 	strpl	r0, [r4], -ip, lsl #22
  80:	00080d0c 	andeq	r0, r8, ip, lsl #26
  84:	00000020 	andeq	r0, r0, r0, lsr #32
  88:	00000034 	andeq	r0, r0, r4, lsr r0
  8c:	82000370 	andhi	r0, r0, #112, 6	; 0xc0000001
  90:	000002a8 	andeq	r0, r0, r8, lsr #5
  94:	8b080e42 	blhi	2039a4 <shift+0x2039a4>
  98:	42018e02 	andmi	r8, r1, #2, 28
  9c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  a0:	0d0c014e 	stfeqs	f0, [ip, #-312]	; 0xfffffec8
  a4:	00000008 	andeq	r0, r0, r8
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000034 	andeq	r0, r0, r4, lsr r0
  b0:	82000618 	andhi	r0, r0, #24, 12	; 0x1800000
  b4:	000000d8 	ldrdeq	r0, [r0], -r8
  b8:	8b080e42 	blhi	2039c8 <shift+0x2039c8>
  bc:	42018e02 	andmi	r8, r1, #2, 28
  c0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  c4:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	820006f0 	andhi	r0, r0, #240, 12	; 0xf000000
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	8b040e42 	blhi	1039e8 <shift+0x1039e8>
  dc:	0b0d4201 	bleq	3508e8 <shift+0x3508e8>
  e0:	0d0d4a02 	vstreq	s8, [sp, #-8]
  e4:	000ecb42 	andeq	ip, lr, r2, asr #22
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000034 	andeq	r0, r0, r4, lsr r0
  f0:	82000794 	andhi	r0, r0, #148, 14	; 0x2500000
  f4:	00000070 	andeq	r0, r0, r0, ror r0
  f8:	8b040e42 	blhi	103a08 <shift+0x103a08>
  fc:	0b0d4201 	bleq	350908 <shift+0x350908>
 100:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 104:	00000ecb 	andeq	r0, r0, fp, asr #29
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000034 	andeq	r0, r0, r4, lsr r0
 110:	82000804 	andhi	r0, r0, #4, 16	; 0x40000
 114:	000000b4 	strheq	r0, [r0], -r4
 118:	8b080e42 	blhi	203a28 <shift+0x203a28>
 11c:	42018e02 	andmi	r8, r1, #2, 28
 120:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 124:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
 128:	00000020 	andeq	r0, r0, r0, lsr #32
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	820008b8 	andhi	r0, r0, #184, 16	; 0xb80000
 134:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 138:	8b080e42 	blhi	203a48 <shift+0x203a48>
 13c:	42018e02 	andmi	r8, r1, #2, 28
 140:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 144:	0d0c0162 	stfeqs	f0, [ip, #-392]	; 0xfffffe78
 148:	00000008 	andeq	r0, r0, r8
 14c:	00000034 	andeq	r0, r0, r4, lsr r0
 150:	00000034 	andeq	r0, r0, r4, lsr r0
 154:	82000b88 	andhi	r0, r0, #136, 22	; 0x22000
 158:	00000040 	andeq	r0, r0, r0, asr #32
 15c:	810c0e42 	tsthi	ip, r2, asr #28
 160:	83028203 	movwhi	r8, #8707	; 0x2203
 164:	180e4201 	stmdane	lr, {r0, r9, lr}
 168:	058b0684 	streq	r0, [fp, #1668]	; 0x684
 16c:	0c42048e 	cfstrdeq	mvd0, [r2], {142}	; 0x8e
 170:	0c54100b 	mrrceq	0, 0, r1, r4, cr11
 174:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 178:	0c0ec4cb 	cfstrseq	mvf12, [lr], {203}	; 0xcb
 17c:	c1c2c342 	bicgt	ip, r2, r2, asr #6
 180:	0000000e 	andeq	r0, r0, lr
 184:	00000038 	andeq	r0, r0, r8, lsr r0
 188:	00000034 	andeq	r0, r0, r4, lsr r0
 18c:	82000bc8 	andhi	r0, r0, #200, 22	; 0x32000
 190:	00000034 	andeq	r0, r0, r4, lsr r0
 194:	80100e42 	andshi	r0, r0, r2, asr #28
 198:	82038104 	andhi	r8, r3, #4, 2
 19c:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 1a0:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 1a4:	068b0785 	streq	r0, [fp], r5, lsl #15
 1a8:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 1ac:	0c4e140b 	cfstrdeq	mvd1, [lr], {11}
 1b0:	ce42200d 	cdpgt	0, 4, cr2, cr2, cr13, {0}
 1b4:	0ec4c5cb 	cdpeq	5, 12, cr12, cr4, cr11, {6}
 1b8:	c2c34210 	sbcgt	r4, r3, #16, 4
 1bc:	000ec0c1 	andeq	ip, lr, r1, asr #1
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000001c0 	andeq	r0, r0, r0, asr #3
 1d8:	82000bfc 	andhi	r0, r0, #252, 22	; 0x3f000
 1dc:	0000005c 	andeq	r0, r0, ip, asr r0
 1e0:	8b080e42 	blhi	203af0 <shift+0x203af0>
 1e4:	42018e02 	andmi	r8, r1, #2, 28
 1e8:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
 1ec:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1f0:	00000024 	andeq	r0, r0, r4, lsr #32
 1f4:	000001c0 	andeq	r0, r0, r0, asr #3
 1f8:	82000c58 	andhi	r0, r0, #88, 24	; 0x5800
 1fc:	00000138 	andeq	r0, r0, r8, lsr r1
 200:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 204:	86058506 	strhi	r8, [r5], -r6, lsl #10
 208:	8b038704 	blhi	e1e20 <shift+0xe1e20>
 20c:	42018e02 	andmi	r8, r1, #2, 28
 210:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 214:	180d0c96 	stmdane	sp, {r1, r2, r4, r7, sl, fp}
 218:	00000028 	andeq	r0, r0, r8, lsr #32
 21c:	000001c0 	andeq	r0, r0, r0, asr #3
 220:	82000d90 	andhi	r0, r0, #144, 26	; 0x2400
 224:	00000180 	andeq	r0, r0, r0, lsl #3
 228:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 22c:	86068507 	strhi	r8, [r6], -r7, lsl #10
 230:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 234:	8e028b03 	vmlahi.f64	d8, d2, d3
 238:	0b0c4201 	bleq	310a44 <shift+0x310a44>
 23c:	0cba0204 	lfmeq	f0, 4, [sl], #16
 240:	00001c0d 	andeq	r1, r0, sp, lsl #24
 244:	00000028 	andeq	r0, r0, r8, lsr #32
 248:	000001c0 	andeq	r0, r0, r0, asr #3
 24c:	82000f10 	andhi	r0, r0, #16, 30	; 0x40
 250:	000002dc 	ldrdeq	r0, [r0], -ip
 254:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 258:	86068507 	strhi	r8, [r6], -r7, lsl #10
 25c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 260:	8e028b03 	vmlahi.f64	d8, d2, d3
 264:	0b0c4201 	bleq	310a70 <shift+0x310a70>
 268:	01680304 	cmneq	r8, r4, lsl #6
 26c:	001c0d0c 	andseq	r0, ip, ip, lsl #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000001c0 	andeq	r0, r0, r0, asr #3
 278:	820011ec 	andhi	r1, r0, #236, 2	; 0x3b
 27c:	00000014 	andeq	r0, r0, r4, lsl r0
 280:	8b040e42 	blhi	103b90 <shift+0x103b90>
 284:	0b0d4201 	bleq	350a90 <shift+0x350a90>
 288:	420d0d42 	andmi	r0, sp, #4224	; 0x1080
 28c:	00000ecb 	andeq	r0, r0, fp, asr #29
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c010001 	stcvc	0, cr0, [r1], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000000c 	andeq	r0, r0, ip
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	82001200 	andhi	r1, r0, #0, 4
 2ac:	000001ec 	andeq	r0, r0, ip, ror #3
