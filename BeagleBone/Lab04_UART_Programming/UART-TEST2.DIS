
uart-test2.elf:     file format elf32-littlearm
uart-test2.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00010000 vaddr 0x82000000 paddr 0x82000000 align 2**16
         filesz 0x0000128c memsz 0x0000128c flags r-x
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001234  82000000  82000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000058  82001234  82001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.attributes 00000039  00000000  00000000  0001128c  2**0
                  CONTENTS, READONLY
  3 .comment      0000003c  00000000  00000000  000112c5  2**0
                  CONTENTS, READONLY
  4 .debug_line   000004fb  00000000  00000000  00011301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  000117fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b3  00000000  00000000  00012132  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000c0  00000000  00000000  000123e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ca  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00012674  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
82000000 l    d  .text	00000000 .text
82001234 l    d  .rodata	00000000 .rodata
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 start.o
82000054 l       .text	00000000 _saved_sp
82000058 l       .text	00000000 _svc_stack
00000000 l    df *ABS*	00000000 uart-test2.c
82001234 l       .rodata	00000000 .LC0
82001244 l       .rodata	00000000 .LC1
82001250 l       .rodata	00000000 .LC2
82001260 l       .rodata	00000000 .LC3
82001264 l       .rodata	00000000 .LC4
00000000 l    df *ABS*	00000000 uart.c
82001270 l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 print.c
82001284 l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 _udivsi3.o
82001024 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
8200015c g     F .text	00000038 UART_getc_noblock
82000d34 g     F .text	000002dc print
82001024 g     F .text	000001ec .hidden __udivsi3
820005b8 g     F .text	00000070 UART_puts
8200004c g       .text	00000000 _bss_start
82000bb4 g     F .text	00000180 printi
82000050 g       .text	00000000 _bss_end
82000194 g     F .text	000002a8 UART_gethex
82000000 g       .text	00000000 _start
82000a7c g     F .text	00000138 prints
82000108 g     F .text	00000054 UART_getc
8200043c g     F .text	000000d8 UART_gets
82001230  w    F .text	00000004 .hidden __aeabi_ldiv0
8200128c g       .rodata	00000000 __bss_start
8200005c g     F .text	00000068 main
82001024 g     F .text	00000000 .hidden __aeabi_uidiv
820009ac g     F .text	00000040 UART_sprintf
820000c4 g     F .text	00000044 goto_and_puts
82000a20 g     F .text	0000005c printchar
82000514 g     F .text	000000a4 UART_putc
820009ec g     F .text	00000034 UART_printf
82001210 g     F .text	00000020 .hidden __aeabi_uidivmod
8200128c g       .rodata	00000000 _end
820006dc g     F .text	000002d0 UART_goto
82001230  w    F .text	00000004 .hidden __aeabi_idiv0
82000628 g     F .text	000000b4 UART_clear
82001010 g     F .text	00000014 raise



Disassembly of section .text:

82000000 <_start>:
# File: start.S
# ======================================================================

.globl _start
_start:
	mov	r4, #0			// r4=0
82000000:	e3a04000 	mov	r4, #0
	mcr	p15, #0, r4, c7, c5, #0	// invalidate i-cache
82000004:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
	dsb				// data synchronization barrier
82000008:	f57ff04f 	dsb	sy
	mcr	p15, #0, r4, c7, c5, #4	// flush prefetch buffer
8200000c:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}

	push	{lr}			// save lr
82000010:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	str	sp, _saved_sp		// save u-boot sp
82000014:	e58fd038 	str	sp, [pc, #56]	; 82000054 <_saved_sp>
	ldr	sp, _svc_stack		// set svc stack
82000018:	e59fd038 	ldr	sp, [pc, #56]	; 82000058 <_svc_stack>

	ldr	r4, _bss_start		// r4=bss_start
8200001c:	e59f4028 	ldr	r4, [pc, #40]	; 8200004c <_bss_start>
	ldr	r5, _bss_end		// r5=bss_end
82000020:	e59f5028 	ldr	r5, [pc, #40]	; 82000050 <_bss_end>
	cmp	r4, r5			// if r4==r5
82000024:	e1540005 	cmp	r4, r5
	beq	.L1 			// then goto .L1
82000028:	0a000004 	beq	82000040 <_start+0x40>
	mov	r6, #0			// r6=0
8200002c:	e3a06000 	mov	r6, #0
.L0:
	str	r6, [r4]		// *r4=r6
82000030:	e5846000 	str	r6, [r4]
	add	r4, r4, #4		// r4=r4+4
82000034:	e2844004 	add	r4, r4, #4
	cmp	r4, r5			// if r4!=r5
82000038:	e1540005 	cmp	r4, r5
	bne	.L0			// then goto .L0
8200003c:	1afffffb 	bne	82000030 <_start+0x30>
.L1:
	bl	main			// main(argc, argv);
82000040:	eb000005 	bl	8200005c <main>

	ldr	sp, _saved_sp		// restore u-boot sp
82000044:	e59fd008 	ldr	sp, [pc, #8]	; 82000054 <_saved_sp>
	pop	{pc}			// restore pc
82000048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

8200004c <_bss_start>:
8200004c:	8200128c 	andhi	r1, r0, #140, 4	; 0xc0000008

82000050 <_bss_end>:
82000050:	8200128c 	andhi	r1, r0, #140, 4	; 0xc0000008

82000054 <_saved_sp>:
82000054:	00000000 	andeq	r0, r0, r0

82000058 <_svc_stack>:
82000058:	82000000 	andhi	r0, r0, #0

8200005c <main>:
void goto_and_puts(int x, int y, char *str);

// ======================================================================

int main(void)
{
8200005c:	e92d4800 	push	{fp, lr}
82000060:	e28db004 	add	fp, sp, #4
  UART_clear();
82000064:	eb00016f 	bl	82000628 <UART_clear>

  goto_and_puts(5, 2, "Are you there!");
82000068:	e3012234 	movw	r2, #4660	; 0x1234
8200006c:	e3482200 	movt	r2, #33280	; 0x8200
82000070:	e3a01002 	mov	r1, #2
82000074:	e3a00005 	mov	r0, #5
82000078:	eb000011 	bl	820000c4 <goto_and_puts>
  goto_and_puts(10, 5, "I am here!");
8200007c:	e3012244 	movw	r2, #4676	; 0x1244
82000080:	e3482200 	movt	r2, #33280	; 0x8200
82000084:	e3a01005 	mov	r1, #5
82000088:	e3a0000a 	mov	r0, #10
8200008c:	eb00000c 	bl	820000c4 <goto_and_puts>
  goto_and_puts(15, 8, "Please help me!");
82000090:	e3012250 	movw	r2, #4688	; 0x1250
82000094:	e3482200 	movt	r2, #33280	; 0x8200
82000098:	e3a01008 	mov	r1, #8
8200009c:	e3a0000f 	mov	r0, #15
820000a0:	eb000007 	bl	820000c4 <goto_and_puts>
  goto_and_puts(0, 11, "");
820000a4:	e3012260 	movw	r2, #4704	; 0x1260
820000a8:	e3482200 	movt	r2, #33280	; 0x8200
820000ac:	e3a0100b 	mov	r1, #11
820000b0:	e3a00000 	mov	r0, #0
820000b4:	eb000002 	bl	820000c4 <goto_and_puts>

  return 0;
820000b8:	e3a03000 	mov	r3, #0
}
820000bc:	e1a00003 	mov	r0, r3
820000c0:	e8bd8800 	pop	{fp, pc}

820000c4 <goto_and_puts>:

// ======================================================================

void goto_and_puts(int x, int y, char *str)
{
820000c4:	e92d4800 	push	{fp, lr}
820000c8:	e28db004 	add	fp, sp, #4
820000cc:	e24dd010 	sub	sp, sp, #16
820000d0:	e50b0008 	str	r0, [fp, #-8]
820000d4:	e50b100c 	str	r1, [fp, #-12]
820000d8:	e50b2010 	str	r2, [fp, #-16]
  UART_goto(x, y);
820000dc:	e51b100c 	ldr	r1, [fp, #-12]
820000e0:	e51b0008 	ldr	r0, [fp, #-8]
820000e4:	eb00017c 	bl	820006dc <UART_goto>
  UART_printf("*(%d,%d) %s", x, y, str);
820000e8:	e51b3010 	ldr	r3, [fp, #-16]
820000ec:	e51b200c 	ldr	r2, [fp, #-12]
820000f0:	e51b1008 	ldr	r1, [fp, #-8]
820000f4:	e3010264 	movw	r0, #4708	; 0x1264
820000f8:	e3480200 	movt	r0, #33280	; 0x8200
820000fc:	eb00023a 	bl	820009ec <UART_printf>
}
82000100:	e24bd004 	sub	sp, fp, #4
82000104:	e8bd8800 	pop	{fp, pc}

82000108 <UART_getc>:
#define LSR_TX_FIFO_E	0x20	// LSR transmit fifo empty

// ======================================================================

int UART_getc(void)
{
82000108:	e92d4800 	push	{fp, lr}
8200010c:	e28db004 	add	fp, sp, #4
82000110:	e24dd008 	sub	sp, sp, #8
  unsigned int c;

  while ((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
82000114:	e1a00000 	nop			; (mov r0, r0)
82000118:	e3093014 	movw	r3, #36884	; 0x9014
8200011c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000120:	e5933000 	ldr	r3, [r3]
82000124:	e2033001 	and	r3, r3, #1
82000128:	e3530000 	cmp	r3, #0
8200012c:	0afffff9 	beq	82000118 <UART_getc+0x10>

  c = IO_READ(UART1_RHR_REG);
82000130:	e3a03a09 	mov	r3, #36864	; 0x9000
82000134:	e34434e0 	movt	r3, #17632	; 0x44e0
82000138:	e5933000 	ldr	r3, [r3]
8200013c:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
82000140:	e51b3008 	ldr	r3, [fp, #-8]
82000144:	e1a00003 	mov	r0, r3
82000148:	eb0000f1 	bl	82000514 <UART_putc>

  return (int)c;
8200014c:	e51b3008 	ldr	r3, [fp, #-8]
}
82000150:	e1a00003 	mov	r0, r3
82000154:	e24bd004 	sub	sp, fp, #4
82000158:	e8bd8800 	pop	{fp, pc}

8200015c <UART_getc_noblock>:

// ======================================================================

int UART_getc_noblock(void)
{
8200015c:	e92d4800 	push	{fp, lr}
82000160:	e28db004 	add	fp, sp, #4
82000164:	e24dd008 	sub	sp, sp, #8
  unsigned int c;
  
  c = IO_READ(UART1_RHR_REG);
82000168:	e3a03a09 	mov	r3, #36864	; 0x9000
8200016c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000170:	e5933000 	ldr	r3, [r3]
82000174:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
82000178:	e51b3008 	ldr	r3, [fp, #-8]
8200017c:	e1a00003 	mov	r0, r3
82000180:	eb0000e3 	bl	82000514 <UART_putc>

  return (int)c;
82000184:	e51b3008 	ldr	r3, [fp, #-8]
}
82000188:	e1a00003 	mov	r0, r3
8200018c:	e24bd004 	sub	sp, fp, #4
82000190:	e8bd8800 	pop	{fp, pc}

82000194 <UART_gethex>:

// ======================================================================

unsigned int UART_gethex(void)
{
82000194:	e92d4800 	push	{fp, lr}
82000198:	e28db004 	add	fp, sp, #4
8200019c:	e24dd010 	sub	sp, sp, #16
  unsigned int temp;
  unsigned int hex= 0x00000000;
820001a0:	e3a03000 	mov	r3, #0
820001a4:	e50b300c 	str	r3, [fp, #-12]
  int i = 0;
820001a8:	e3a03000 	mov	r3, #0
820001ac:	e50b3010 	str	r3, [fp, #-16]
  while(1){

  while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
820001b0:	e1a00000 	nop			; (mov r0, r0)
820001b4:	e3093014 	movw	r3, #36884	; 0x9014
820001b8:	e34434e0 	movt	r3, #17632	; 0x44e0
820001bc:	e5933000 	ldr	r3, [r3]
820001c0:	e2033001 	and	r3, r3, #1
820001c4:	e3530000 	cmp	r3, #0
820001c8:	0afffff9 	beq	820001b4 <UART_gethex+0x20>
    temp = IO_READ(UART1_RHR_REG);
820001cc:	e3a03a09 	mov	r3, #36864	; 0x9000
820001d0:	e34434e0 	movt	r3, #17632	; 0x44e0
820001d4:	e5933000 	ldr	r3, [r3]
820001d8:	e50b3008 	str	r3, [fp, #-8]
    UART_putc(temp);
820001dc:	e51b3008 	ldr	r3, [fp, #-8]
820001e0:	e1a00003 	mov	r0, r3
820001e4:	eb0000ca 	bl	82000514 <UART_putc>
    if(temp == '\n' || temp == '\r')return hex;
820001e8:	e51b3008 	ldr	r3, [fp, #-8]
820001ec:	e353000a 	cmp	r3, #10
820001f0:	0a000002 	beq	82000200 <UART_gethex+0x6c>
820001f4:	e51b3008 	ldr	r3, [fp, #-8]
820001f8:	e353000d 	cmp	r3, #13
820001fc:	1a000001 	bne	82000208 <UART_gethex+0x74>
82000200:	e51b300c 	ldr	r3, [fp, #-12]
82000204:	ea000089 	b	82000430 <UART_gethex+0x29c>
    else if(temp == '0')temp = 0x00000000;
82000208:	e51b3008 	ldr	r3, [fp, #-8]
8200020c:	e3530030 	cmp	r3, #48	; 0x30
82000210:	1a000002 	bne	82000220 <UART_gethex+0x8c>
82000214:	e3a03000 	mov	r3, #0
82000218:	e50b3008 	str	r3, [fp, #-8]
8200021c:	ea00006d 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '1')temp = 0x00000001;
82000220:	e51b3008 	ldr	r3, [fp, #-8]
82000224:	e3530031 	cmp	r3, #49	; 0x31
82000228:	1a000002 	bne	82000238 <UART_gethex+0xa4>
8200022c:	e3a03001 	mov	r3, #1
82000230:	e50b3008 	str	r3, [fp, #-8]
82000234:	ea000067 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '2')temp = 0x00000002;
82000238:	e51b3008 	ldr	r3, [fp, #-8]
8200023c:	e3530032 	cmp	r3, #50	; 0x32
82000240:	1a000002 	bne	82000250 <UART_gethex+0xbc>
82000244:	e3a03002 	mov	r3, #2
82000248:	e50b3008 	str	r3, [fp, #-8]
8200024c:	ea000061 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '3')temp = 0x00000003;
82000250:	e51b3008 	ldr	r3, [fp, #-8]
82000254:	e3530033 	cmp	r3, #51	; 0x33
82000258:	1a000002 	bne	82000268 <UART_gethex+0xd4>
8200025c:	e3a03003 	mov	r3, #3
82000260:	e50b3008 	str	r3, [fp, #-8]
82000264:	ea00005b 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '4')temp = 0x00000004;
82000268:	e51b3008 	ldr	r3, [fp, #-8]
8200026c:	e3530034 	cmp	r3, #52	; 0x34
82000270:	1a000002 	bne	82000280 <UART_gethex+0xec>
82000274:	e3a03004 	mov	r3, #4
82000278:	e50b3008 	str	r3, [fp, #-8]
8200027c:	ea000055 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '5')temp = 0x00000005;
82000280:	e51b3008 	ldr	r3, [fp, #-8]
82000284:	e3530035 	cmp	r3, #53	; 0x35
82000288:	1a000002 	bne	82000298 <UART_gethex+0x104>
8200028c:	e3a03005 	mov	r3, #5
82000290:	e50b3008 	str	r3, [fp, #-8]
82000294:	ea00004f 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '6')temp = 0x00000006;
82000298:	e51b3008 	ldr	r3, [fp, #-8]
8200029c:	e3530036 	cmp	r3, #54	; 0x36
820002a0:	1a000002 	bne	820002b0 <UART_gethex+0x11c>
820002a4:	e3a03006 	mov	r3, #6
820002a8:	e50b3008 	str	r3, [fp, #-8]
820002ac:	ea000049 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '7')temp = 0x00000007;
820002b0:	e51b3008 	ldr	r3, [fp, #-8]
820002b4:	e3530037 	cmp	r3, #55	; 0x37
820002b8:	1a000002 	bne	820002c8 <UART_gethex+0x134>
820002bc:	e3a03007 	mov	r3, #7
820002c0:	e50b3008 	str	r3, [fp, #-8]
820002c4:	ea000043 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '8')temp = 0x00000008;
820002c8:	e51b3008 	ldr	r3, [fp, #-8]
820002cc:	e3530038 	cmp	r3, #56	; 0x38
820002d0:	1a000002 	bne	820002e0 <UART_gethex+0x14c>
820002d4:	e3a03008 	mov	r3, #8
820002d8:	e50b3008 	str	r3, [fp, #-8]
820002dc:	ea00003d 	b	820003d8 <UART_gethex+0x244>
    else if(temp == '9')temp = 0x00000009;
820002e0:	e51b3008 	ldr	r3, [fp, #-8]
820002e4:	e3530039 	cmp	r3, #57	; 0x39
820002e8:	1a000002 	bne	820002f8 <UART_gethex+0x164>
820002ec:	e3a03009 	mov	r3, #9
820002f0:	e50b3008 	str	r3, [fp, #-8]
820002f4:	ea000037 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'A' || temp == 'a')temp = 0x0000000A;
820002f8:	e51b3008 	ldr	r3, [fp, #-8]
820002fc:	e3530041 	cmp	r3, #65	; 0x41
82000300:	0a000002 	beq	82000310 <UART_gethex+0x17c>
82000304:	e51b3008 	ldr	r3, [fp, #-8]
82000308:	e3530061 	cmp	r3, #97	; 0x61
8200030c:	1a000002 	bne	8200031c <UART_gethex+0x188>
82000310:	e3a0300a 	mov	r3, #10
82000314:	e50b3008 	str	r3, [fp, #-8]
82000318:	ea00002e 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'B' || temp == 'b')temp = 0x0000000B;
8200031c:	e51b3008 	ldr	r3, [fp, #-8]
82000320:	e3530042 	cmp	r3, #66	; 0x42
82000324:	0a000002 	beq	82000334 <UART_gethex+0x1a0>
82000328:	e51b3008 	ldr	r3, [fp, #-8]
8200032c:	e3530062 	cmp	r3, #98	; 0x62
82000330:	1a000002 	bne	82000340 <UART_gethex+0x1ac>
82000334:	e3a0300b 	mov	r3, #11
82000338:	e50b3008 	str	r3, [fp, #-8]
8200033c:	ea000025 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'C' || temp == 'c')temp = 0x0000000C;
82000340:	e51b3008 	ldr	r3, [fp, #-8]
82000344:	e3530043 	cmp	r3, #67	; 0x43
82000348:	0a000002 	beq	82000358 <UART_gethex+0x1c4>
8200034c:	e51b3008 	ldr	r3, [fp, #-8]
82000350:	e3530063 	cmp	r3, #99	; 0x63
82000354:	1a000002 	bne	82000364 <UART_gethex+0x1d0>
82000358:	e3a0300c 	mov	r3, #12
8200035c:	e50b3008 	str	r3, [fp, #-8]
82000360:	ea00001c 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'D' || temp == 'd')temp = 0x0000000D;
82000364:	e51b3008 	ldr	r3, [fp, #-8]
82000368:	e3530044 	cmp	r3, #68	; 0x44
8200036c:	0a000002 	beq	8200037c <UART_gethex+0x1e8>
82000370:	e51b3008 	ldr	r3, [fp, #-8]
82000374:	e3530064 	cmp	r3, #100	; 0x64
82000378:	1a000002 	bne	82000388 <UART_gethex+0x1f4>
8200037c:	e3a0300d 	mov	r3, #13
82000380:	e50b3008 	str	r3, [fp, #-8]
82000384:	ea000013 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'E' || temp == 'e')temp = 0x0000000E;
82000388:	e51b3008 	ldr	r3, [fp, #-8]
8200038c:	e3530045 	cmp	r3, #69	; 0x45
82000390:	0a000002 	beq	820003a0 <UART_gethex+0x20c>
82000394:	e51b3008 	ldr	r3, [fp, #-8]
82000398:	e3530065 	cmp	r3, #101	; 0x65
8200039c:	1a000002 	bne	820003ac <UART_gethex+0x218>
820003a0:	e3a0300e 	mov	r3, #14
820003a4:	e50b3008 	str	r3, [fp, #-8]
820003a8:	ea00000a 	b	820003d8 <UART_gethex+0x244>
    else if(temp == 'F' || temp == 'f')temp = 0x0000000F;
820003ac:	e51b3008 	ldr	r3, [fp, #-8]
820003b0:	e3530046 	cmp	r3, #70	; 0x46
820003b4:	0a000002 	beq	820003c4 <UART_gethex+0x230>
820003b8:	e51b3008 	ldr	r3, [fp, #-8]
820003bc:	e3530066 	cmp	r3, #102	; 0x66
820003c0:	1a000002 	bne	820003d0 <UART_gethex+0x23c>
820003c4:	e3a0300f 	mov	r3, #15
820003c8:	e50b3008 	str	r3, [fp, #-8]
820003cc:	ea000001 	b	820003d8 <UART_gethex+0x244>
    else return temp;
820003d0:	e51b3008 	ldr	r3, [fp, #-8]
820003d4:	ea000015 	b	82000430 <UART_gethex+0x29c>
    if( i == 0 ){
820003d8:	e51b3010 	ldr	r3, [fp, #-16]
820003dc:	e3530000 	cmp	r3, #0
820003e0:	1a000007 	bne	82000404 <UART_gethex+0x270>
      hex = hex + temp;
820003e4:	e51b200c 	ldr	r2, [fp, #-12]
820003e8:	e51b3008 	ldr	r3, [fp, #-8]
820003ec:	e0823003 	add	r3, r2, r3
820003f0:	e50b300c 	str	r3, [fp, #-12]
      i++;
820003f4:	e51b3010 	ldr	r3, [fp, #-16]
820003f8:	e2833001 	add	r3, r3, #1
820003fc:	e50b3010 	str	r3, [fp, #-16]
82000400:	ea000009 	b	8200042c <UART_gethex+0x298>
    }
    else{
      hex = hex << 4;
82000404:	e51b300c 	ldr	r3, [fp, #-12]
82000408:	e1a03203 	lsl	r3, r3, #4
8200040c:	e50b300c 	str	r3, [fp, #-12]
      hex = hex + temp;
82000410:	e51b200c 	ldr	r2, [fp, #-12]
82000414:	e51b3008 	ldr	r3, [fp, #-8]
82000418:	e0823003 	add	r3, r2, r3
8200041c:	e50b300c 	str	r3, [fp, #-12]
      i++;
82000420:	e51b3010 	ldr	r3, [fp, #-16]
82000424:	e2833001 	add	r3, r3, #1
82000428:	e50b3010 	str	r3, [fp, #-16]
    }
  }
8200042c:	eaffff5f 	b	820001b0 <UART_gethex+0x1c>
  return hex;
}
82000430:	e1a00003 	mov	r0, r3
82000434:	e24bd004 	sub	sp, fp, #4
82000438:	e8bd8800 	pop	{fp, pc}

8200043c <UART_gets>:

// ======================================================================

char *UART_gets(char *str)
{
8200043c:	e92d4800 	push	{fp, lr}
82000440:	e28db004 	add	fp, sp, #4
82000444:	e24dd018 	sub	sp, sp, #24
82000448:	e50b0018 	str	r0, [fp, #-24]
  int j = 0;
8200044c:	e3a03000 	mov	r3, #0
82000450:	e50b3008 	str	r3, [fp, #-8]
  int i = 0;
82000454:	e3a03000 	mov	r3, #0
82000458:	e50b300c 	str	r3, [fp, #-12]
  int q;

  for(j; j < 512; j++){
8200045c:	ea000007 	b	82000480 <UART_gets+0x44>
     str[j] = '\0';
82000460:	e51b3008 	ldr	r3, [fp, #-8]
82000464:	e51b2018 	ldr	r2, [fp, #-24]
82000468:	e0823003 	add	r3, r2, r3
8200046c:	e3a02000 	mov	r2, #0
82000470:	e5c32000 	strb	r2, [r3]
{
  int j = 0;
  int i = 0;
  int q;

  for(j; j < 512; j++){
82000474:	e51b3008 	ldr	r3, [fp, #-8]
82000478:	e2833001 	add	r3, r3, #1
8200047c:	e50b3008 	str	r3, [fp, #-8]
82000480:	e51b3008 	ldr	r3, [fp, #-8]
82000484:	e3530c02 	cmp	r3, #512	; 0x200
82000488:	bafffff4 	blt	82000460 <UART_gets+0x24>
     str[j] = '\0';
  }

  while(1){

    while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
8200048c:	e1a00000 	nop			; (mov r0, r0)
82000490:	e3093014 	movw	r3, #36884	; 0x9014
82000494:	e34434e0 	movt	r3, #17632	; 0x44e0
82000498:	e5933000 	ldr	r3, [r3]
8200049c:	e2033001 	and	r3, r3, #1
820004a0:	e3530000 	cmp	r3, #0
820004a4:	0afffff9 	beq	82000490 <UART_gets+0x54>

    q = IO_READ(UART1_RHR_REG);
820004a8:	e3a03a09 	mov	r3, #36864	; 0x9000
820004ac:	e34434e0 	movt	r3, #17632	; 0x44e0
820004b0:	e5933000 	ldr	r3, [r3]
820004b4:	e50b3010 	str	r3, [fp, #-16]
    UART_putc(q);
820004b8:	e51b0010 	ldr	r0, [fp, #-16]
820004bc:	eb000014 	bl	82000514 <UART_putc>
    if(q == '\n' || q == '\r'){
820004c0:	e51b3010 	ldr	r3, [fp, #-16]
820004c4:	e353000a 	cmp	r3, #10
820004c8:	0a000002 	beq	820004d8 <UART_gets+0x9c>
820004cc:	e51b3010 	ldr	r3, [fp, #-16]
820004d0:	e353000d 	cmp	r3, #13
820004d4:	1a000001 	bne	820004e0 <UART_gets+0xa4>
        return str;
820004d8:	e51b3018 	ldr	r3, [fp, #-24]
820004dc:	ea000009 	b	82000508 <UART_gets+0xcc>
    }
    str[i] = q;
820004e0:	e51b300c 	ldr	r3, [fp, #-12]
820004e4:	e51b2018 	ldr	r2, [fp, #-24]
820004e8:	e0823003 	add	r3, r2, r3
820004ec:	e51b2010 	ldr	r2, [fp, #-16]
820004f0:	e6ef2072 	uxtb	r2, r2
820004f4:	e5c32000 	strb	r2, [r3]
    i++;
820004f8:	e51b300c 	ldr	r3, [fp, #-12]
820004fc:	e2833001 	add	r3, r3, #1
82000500:	e50b300c 	str	r3, [fp, #-12]
  }  
82000504:	eaffffe0 	b	8200048c <UART_gets+0x50>
}
82000508:	e1a00003 	mov	r0, r3
8200050c:	e24bd004 	sub	sp, fp, #4
82000510:	e8bd8800 	pop	{fp, pc}

82000514 <UART_putc>:

// ======================================================================

int UART_putc(int c)
{
82000514:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
82000518:	e28db000 	add	fp, sp, #0
8200051c:	e24dd00c 	sub	sp, sp, #12
82000520:	e50b0008 	str	r0, [fp, #-8]
  if ((c == '\r') || (c == '\n')){
82000524:	e51b3008 	ldr	r3, [fp, #-8]
82000528:	e353000d 	cmp	r3, #13
8200052c:	0a000002 	beq	8200053c <UART_putc+0x28>
82000530:	e51b3008 	ldr	r3, [fp, #-8]
82000534:	e353000a 	cmp	r3, #10
82000538:	1a00000e 	bne	82000578 <UART_putc+0x64>
    c = '\r';
8200053c:	e3a0300d 	mov	r3, #13
82000540:	e50b3008 	str	r3, [fp, #-8]
 
  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000544:	e1a00000 	nop			; (mov r0, r0)
82000548:	e3093014 	movw	r3, #36884	; 0x9014
8200054c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000550:	e5933000 	ldr	r3, [r3]
82000554:	e2033020 	and	r3, r3, #32
82000558:	e3530000 	cmp	r3, #0
8200055c:	0afffff9 	beq	82000548 <UART_putc+0x34>

    IO_WRITE(UART1_THR_REG, c);
82000560:	e3a03a09 	mov	r3, #36864	; 0x9000
82000564:	e34434e0 	movt	r3, #17632	; 0x44e0
82000568:	e51b2008 	ldr	r2, [fp, #-8]
8200056c:	e5832000 	str	r2, [r3]

    c = '\n';
82000570:	e3a0300a 	mov	r3, #10
82000574:	e50b3008 	str	r3, [fp, #-8]
  }

  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000578:	e1a00000 	nop			; (mov r0, r0)
8200057c:	e3093014 	movw	r3, #36884	; 0x9014
82000580:	e34434e0 	movt	r3, #17632	; 0x44e0
82000584:	e5933000 	ldr	r3, [r3]
82000588:	e2033020 	and	r3, r3, #32
8200058c:	e3530000 	cmp	r3, #0
82000590:	0afffff9 	beq	8200057c <UART_putc+0x68>

  IO_WRITE(UART1_THR_REG, c);
82000594:	e3a03a09 	mov	r3, #36864	; 0x9000
82000598:	e34434e0 	movt	r3, #17632	; 0x44e0
8200059c:	e51b2008 	ldr	r2, [fp, #-8]
820005a0:	e5832000 	str	r2, [r3]

  return c;
820005a4:	e51b3008 	ldr	r3, [fp, #-8]
  

}
820005a8:	e1a00003 	mov	r0, r3
820005ac:	e24bd000 	sub	sp, fp, #0
820005b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
820005b4:	e12fff1e 	bx	lr

820005b8 <UART_puts>:

// ======================================================================

int UART_puts(const char *s)
{
820005b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
820005bc:	e28db000 	add	fp, sp, #0
820005c0:	e24dd014 	sub	sp, sp, #20
820005c4:	e50b0010 	str	r0, [fp, #-16]
    int i = 0;
820005c8:	e3a03000 	mov	r3, #0
820005cc:	e50b3008 	str	r3, [fp, #-8]
    while(s[i] != '\0'){
820005d0:	ea000009 	b	820005fc <UART_puts+0x44>
    IO_WRITE(UART1_THR_REG,s[i]);
820005d4:	e3a03a09 	mov	r3, #36864	; 0x9000
820005d8:	e34434e0 	movt	r3, #17632	; 0x44e0
820005dc:	e51b2008 	ldr	r2, [fp, #-8]
820005e0:	e51b1010 	ldr	r1, [fp, #-16]
820005e4:	e0812002 	add	r2, r1, r2
820005e8:	e5d22000 	ldrb	r2, [r2]
820005ec:	e5832000 	str	r2, [r3]
    i++;
820005f0:	e51b3008 	ldr	r3, [fp, #-8]
820005f4:	e2833001 	add	r3, r3, #1
820005f8:	e50b3008 	str	r3, [fp, #-8]
// ======================================================================

int UART_puts(const char *s)
{
    int i = 0;
    while(s[i] != '\0'){
820005fc:	e51b3008 	ldr	r3, [fp, #-8]
82000600:	e51b2010 	ldr	r2, [fp, #-16]
82000604:	e0823003 	add	r3, r2, r3
82000608:	e5d33000 	ldrb	r3, [r3]
8200060c:	e3530000 	cmp	r3, #0
82000610:	1affffef 	bne	820005d4 <UART_puts+0x1c>
    IO_WRITE(UART1_THR_REG,s[i]);
    i++;
    }
  return (int)s;
82000614:	e51b3010 	ldr	r3, [fp, #-16]
}
82000618:	e1a00003 	mov	r0, r3
8200061c:	e24bd000 	sub	sp, fp, #0
82000620:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82000624:	e12fff1e 	bx	lr

82000628 <UART_clear>:

// ======================================================================

void UART_clear(void)
{
82000628:	e92d4800 	push	{fp, lr}
8200062c:	e28db004 	add	fp, sp, #4
82000630:	e24dd018 	sub	sp, sp, #24
  char escsqnce[20] = "\033[2J\033[0;0H";
82000634:	e3012270 	movw	r2, #4720	; 0x1270
82000638:	e3482200 	movt	r2, #33280	; 0x8200
8200063c:	e24b3018 	sub	r3, fp, #24
82000640:	e8920007 	ldm	r2, {r0, r1, r2}
82000644:	e8a30003 	stmia	r3!, {r0, r1}
82000648:	e1c320b0 	strh	r2, [r3]
8200064c:	e2833002 	add	r3, r3, #2
82000650:	e1a02822 	lsr	r2, r2, #16
82000654:	e5c32000 	strb	r2, [r3]
82000658:	e24b300d 	sub	r3, fp, #13
8200065c:	e3a02000 	mov	r2, #0
82000660:	e5c32000 	strb	r2, [r3]
82000664:	e2833001 	add	r3, r3, #1
82000668:	e3a02000 	mov	r2, #0
8200066c:	e5c32000 	strb	r2, [r3]
82000670:	e2833001 	add	r3, r3, #1
82000674:	e3a02000 	mov	r2, #0
82000678:	e5c32000 	strb	r2, [r3]
8200067c:	e2833001 	add	r3, r3, #1
82000680:	e3a02000 	mov	r2, #0
82000684:	e5c32000 	strb	r2, [r3]
82000688:	e2833001 	add	r3, r3, #1
8200068c:	e3a02000 	mov	r2, #0
82000690:	e5c32000 	strb	r2, [r3]
82000694:	e2833001 	add	r3, r3, #1
82000698:	e3a02000 	mov	r2, #0
8200069c:	e5c32000 	strb	r2, [r3]
820006a0:	e2833001 	add	r3, r3, #1
820006a4:	e3a02000 	mov	r2, #0
820006a8:	e5c32000 	strb	r2, [r3]
820006ac:	e2833001 	add	r3, r3, #1
820006b0:	e3a02000 	mov	r2, #0
820006b4:	e5c32000 	strb	r2, [r3]
820006b8:	e2833001 	add	r3, r3, #1
820006bc:	e3a02000 	mov	r2, #0
820006c0:	e5c32000 	strb	r2, [r3]
820006c4:	e2833001 	add	r3, r3, #1
  UART_puts(escsqnce);
820006c8:	e24b3018 	sub	r3, fp, #24
820006cc:	e1a00003 	mov	r0, r3
820006d0:	ebffffb8 	bl	820005b8 <UART_puts>
}
820006d4:	e24bd004 	sub	sp, fp, #4
820006d8:	e8bd8800 	pop	{fp, pc}

820006dc <UART_goto>:

// ======================================================================

void UART_goto(int x, int y)
{
820006dc:	e92d4800 	push	{fp, lr}
820006e0:	e28db004 	add	fp, sp, #4
820006e4:	e24dd020 	sub	sp, sp, #32
820006e8:	e50b0020 	str	r0, [fp, #-32]
820006ec:	e50b1024 	str	r1, [fp, #-36]	; 0x24
  char xnumber[3];
  char ynumber[3];
  char gotosequence1[5]= "\033[";
820006f0:	e3053b1b 	movw	r3, #23323	; 0x5b1b
820006f4:	e50b301c 	str	r3, [fp, #-28]
820006f8:	e3a03000 	mov	r3, #0
820006fc:	e54b3018 	strb	r3, [fp, #-24]
  char semicolon = ';';
82000700:	e3a0303b 	mov	r3, #59	; 0x3b
82000704:	e54b3009 	strb	r3, [fp, #-9]
  char end = 'H';
82000708:	e3a03048 	mov	r3, #72	; 0x48
8200070c:	e54b300a 	strb	r3, [fp, #-10]
  int i = 0;
82000710:	e3a03000 	mov	r3, #0
82000714:	e50b3008 	str	r3, [fp, #-8]
  for(i; i< 3; i++){
82000718:	ea000083 	b	8200092c <UART_goto+0x250>
    if(i == 0){
8200071c:	e51b3008 	ldr	r3, [fp, #-8]
82000720:	e3530000 	cmp	r3, #0
82000724:	1a00001e 	bne	820007a4 <UART_goto+0xc8>
    xnumber[i] = x/100+48;
82000728:	e51b1020 	ldr	r1, [fp, #-32]
8200072c:	e308351f 	movw	r3, #34079	; 0x851f
82000730:	e34531eb 	movt	r3, #20971	; 0x51eb
82000734:	e0c32391 	smull	r2, r3, r1, r3
82000738:	e1a022c3 	asr	r2, r3, #5
8200073c:	e1a03fc1 	asr	r3, r1, #31
82000740:	e0633002 	rsb	r3, r3, r2
82000744:	e6ef3073 	uxtb	r3, r3
82000748:	e2833030 	add	r3, r3, #48	; 0x30
8200074c:	e6ef1073 	uxtb	r1, r3
82000750:	e24b2010 	sub	r2, fp, #16
82000754:	e51b3008 	ldr	r3, [fp, #-8]
82000758:	e0823003 	add	r3, r2, r3
8200075c:	e1a02001 	mov	r2, r1
82000760:	e5c32000 	strb	r2, [r3]
    ynumber[i] = y/100+48;
82000764:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
82000768:	e308351f 	movw	r3, #34079	; 0x851f
8200076c:	e34531eb 	movt	r3, #20971	; 0x51eb
82000770:	e0c32391 	smull	r2, r3, r1, r3
82000774:	e1a022c3 	asr	r2, r3, #5
82000778:	e1a03fc1 	asr	r3, r1, #31
8200077c:	e0633002 	rsb	r3, r3, r2
82000780:	e6ef3073 	uxtb	r3, r3
82000784:	e2833030 	add	r3, r3, #48	; 0x30
82000788:	e6ef1073 	uxtb	r1, r3
8200078c:	e24b2014 	sub	r2, fp, #20
82000790:	e51b3008 	ldr	r3, [fp, #-8]
82000794:	e0823003 	add	r3, r2, r3
82000798:	e1a02001 	mov	r2, r1
8200079c:	e5c32000 	strb	r2, [r3]
820007a0:	ea00005e 	b	82000920 <UART_goto+0x244>
    }
    else if(i == 1){
820007a4:	e51b3008 	ldr	r3, [fp, #-8]
820007a8:	e3530001 	cmp	r3, #1
820007ac:	1a000032 	bne	8200087c <UART_goto+0x1a0>
    xnumber[i] = ((x/10)%10)+48;
820007b0:	e51b1020 	ldr	r1, [fp, #-32]
820007b4:	e3063667 	movw	r3, #26215	; 0x6667
820007b8:	e3463666 	movt	r3, #26214	; 0x6666
820007bc:	e0c32391 	smull	r2, r3, r1, r3
820007c0:	e1a02143 	asr	r2, r3, #2
820007c4:	e1a03fc1 	asr	r3, r1, #31
820007c8:	e0632002 	rsb	r2, r3, r2
820007cc:	e3063667 	movw	r3, #26215	; 0x6667
820007d0:	e3463666 	movt	r3, #26214	; 0x6666
820007d4:	e0c10392 	smull	r0, r1, r2, r3
820007d8:	e1a01141 	asr	r1, r1, #2
820007dc:	e1a03fc2 	asr	r3, r2, #31
820007e0:	e0633001 	rsb	r3, r3, r1
820007e4:	e1a03083 	lsl	r3, r3, #1
820007e8:	e1a01103 	lsl	r1, r3, #2
820007ec:	e0833001 	add	r3, r3, r1
820007f0:	e0633002 	rsb	r3, r3, r2
820007f4:	e6ef3073 	uxtb	r3, r3
820007f8:	e2833030 	add	r3, r3, #48	; 0x30
820007fc:	e6ef1073 	uxtb	r1, r3
82000800:	e24b2010 	sub	r2, fp, #16
82000804:	e51b3008 	ldr	r3, [fp, #-8]
82000808:	e0823003 	add	r3, r2, r3
8200080c:	e1a02001 	mov	r2, r1
82000810:	e5c32000 	strb	r2, [r3]
    ynumber[i] = ((y/10)%10)+48;
82000814:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
82000818:	e3063667 	movw	r3, #26215	; 0x6667
8200081c:	e3463666 	movt	r3, #26214	; 0x6666
82000820:	e0c32391 	smull	r2, r3, r1, r3
82000824:	e1a02143 	asr	r2, r3, #2
82000828:	e1a03fc1 	asr	r3, r1, #31
8200082c:	e0632002 	rsb	r2, r3, r2
82000830:	e3063667 	movw	r3, #26215	; 0x6667
82000834:	e3463666 	movt	r3, #26214	; 0x6666
82000838:	e0c10392 	smull	r0, r1, r2, r3
8200083c:	e1a01141 	asr	r1, r1, #2
82000840:	e1a03fc2 	asr	r3, r2, #31
82000844:	e0633001 	rsb	r3, r3, r1
82000848:	e1a03083 	lsl	r3, r3, #1
8200084c:	e1a01103 	lsl	r1, r3, #2
82000850:	e0833001 	add	r3, r3, r1
82000854:	e0633002 	rsb	r3, r3, r2
82000858:	e6ef3073 	uxtb	r3, r3
8200085c:	e2833030 	add	r3, r3, #48	; 0x30
82000860:	e6ef1073 	uxtb	r1, r3
82000864:	e24b2014 	sub	r2, fp, #20
82000868:	e51b3008 	ldr	r3, [fp, #-8]
8200086c:	e0823003 	add	r3, r2, r3
82000870:	e1a02001 	mov	r2, r1
82000874:	e5c32000 	strb	r2, [r3]
82000878:	ea000028 	b	82000920 <UART_goto+0x244>
    }
    else if(i == 2){
8200087c:	e51b3008 	ldr	r3, [fp, #-8]
82000880:	e3530002 	cmp	r3, #2
82000884:	1a000025 	bne	82000920 <UART_goto+0x244>
    xnumber[i] = (x%10)+48;
82000888:	e51b2020 	ldr	r2, [fp, #-32]
8200088c:	e3063667 	movw	r3, #26215	; 0x6667
82000890:	e3463666 	movt	r3, #26214	; 0x6666
82000894:	e0c10392 	smull	r0, r1, r2, r3
82000898:	e1a01141 	asr	r1, r1, #2
8200089c:	e1a03fc2 	asr	r3, r2, #31
820008a0:	e0633001 	rsb	r3, r3, r1
820008a4:	e1a03083 	lsl	r3, r3, #1
820008a8:	e1a01103 	lsl	r1, r3, #2
820008ac:	e0833001 	add	r3, r3, r1
820008b0:	e0633002 	rsb	r3, r3, r2
820008b4:	e6ef3073 	uxtb	r3, r3
820008b8:	e2833030 	add	r3, r3, #48	; 0x30
820008bc:	e6ef1073 	uxtb	r1, r3
820008c0:	e24b2010 	sub	r2, fp, #16
820008c4:	e51b3008 	ldr	r3, [fp, #-8]
820008c8:	e0823003 	add	r3, r2, r3
820008cc:	e1a02001 	mov	r2, r1
820008d0:	e5c32000 	strb	r2, [r3]
    ynumber[i] = (y%10)+48;
820008d4:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
820008d8:	e3063667 	movw	r3, #26215	; 0x6667
820008dc:	e3463666 	movt	r3, #26214	; 0x6666
820008e0:	e0c10392 	smull	r0, r1, r2, r3
820008e4:	e1a01141 	asr	r1, r1, #2
820008e8:	e1a03fc2 	asr	r3, r2, #31
820008ec:	e0633001 	rsb	r3, r3, r1
820008f0:	e1a03083 	lsl	r3, r3, #1
820008f4:	e1a01103 	lsl	r1, r3, #2
820008f8:	e0833001 	add	r3, r3, r1
820008fc:	e0633002 	rsb	r3, r3, r2
82000900:	e6ef3073 	uxtb	r3, r3
82000904:	e2833030 	add	r3, r3, #48	; 0x30
82000908:	e6ef1073 	uxtb	r1, r3
8200090c:	e24b2014 	sub	r2, fp, #20
82000910:	e51b3008 	ldr	r3, [fp, #-8]
82000914:	e0823003 	add	r3, r2, r3
82000918:	e1a02001 	mov	r2, r1
8200091c:	e5c32000 	strb	r2, [r3]
  char ynumber[3];
  char gotosequence1[5]= "\033[";
  char semicolon = ';';
  char end = 'H';
  int i = 0;
  for(i; i< 3; i++){
82000920:	e51b3008 	ldr	r3, [fp, #-8]
82000924:	e2833001 	add	r3, r3, #1
82000928:	e50b3008 	str	r3, [fp, #-8]
8200092c:	e51b3008 	ldr	r3, [fp, #-8]
82000930:	e3530002 	cmp	r3, #2
82000934:	daffff78 	ble	8200071c <UART_goto+0x40>
    }
  }
  


  UART_puts(gotosequence1);
82000938:	e24b301c 	sub	r3, fp, #28
8200093c:	e1a00003 	mov	r0, r3
82000940:	ebffff1c 	bl	820005b8 <UART_puts>
  UART_putc(ynumber[0]);
82000944:	e55b3014 	ldrb	r3, [fp, #-20]
82000948:	e1a00003 	mov	r0, r3
8200094c:	ebfffef0 	bl	82000514 <UART_putc>
  UART_putc(ynumber[1]);
82000950:	e55b3013 	ldrb	r3, [fp, #-19]
82000954:	e1a00003 	mov	r0, r3
82000958:	ebfffeed 	bl	82000514 <UART_putc>
  UART_putc(ynumber[2]);
8200095c:	e55b3012 	ldrb	r3, [fp, #-18]
82000960:	e1a00003 	mov	r0, r3
82000964:	ebfffeea 	bl	82000514 <UART_putc>
  UART_putc(semicolon);
82000968:	e55b3009 	ldrb	r3, [fp, #-9]
8200096c:	e1a00003 	mov	r0, r3
82000970:	ebfffee7 	bl	82000514 <UART_putc>
  UART_putc(xnumber[0]);
82000974:	e55b3010 	ldrb	r3, [fp, #-16]
82000978:	e1a00003 	mov	r0, r3
8200097c:	ebfffee4 	bl	82000514 <UART_putc>
  UART_putc(xnumber[1]);
82000980:	e55b300f 	ldrb	r3, [fp, #-15]
82000984:	e1a00003 	mov	r0, r3
82000988:	ebfffee1 	bl	82000514 <UART_putc>
  UART_putc(xnumber[2]);
8200098c:	e55b300e 	ldrb	r3, [fp, #-14]
82000990:	e1a00003 	mov	r0, r3
82000994:	ebfffede 	bl	82000514 <UART_putc>
  UART_putc(end);
82000998:	e55b300a 	ldrb	r3, [fp, #-10]
8200099c:	e1a00003 	mov	r0, r3
820009a0:	ebfffedb 	bl	82000514 <UART_putc>
}
820009a4:	e24bd004 	sub	sp, fp, #4
820009a8:	e8bd8800 	pop	{fp, pc}

820009ac <UART_sprintf>:

// ======================================================================

int UART_sprintf(char *out, const char *format, ...)
{
820009ac:	e92d000e 	push	{r1, r2, r3}
820009b0:	e92d4810 	push	{r4, fp, lr}
820009b4:	e28db008 	add	fp, sp, #8
820009b8:	e24dd008 	sub	sp, sp, #8
820009bc:	e50b000c 	str	r0, [fp, #-12]
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
820009c0:	e28b4004 	add	r4, fp, #4
  return print(&out, varg);
820009c4:	e24b300c 	sub	r3, fp, #12
820009c8:	e1a01004 	mov	r1, r4
820009cc:	e1a00003 	mov	r0, r3
820009d0:	eb0000d7 	bl	82000d34 <print>
820009d4:	e1a03000 	mov	r3, r0
}
820009d8:	e1a00003 	mov	r0, r3
820009dc:	e24bd008 	sub	sp, fp, #8
820009e0:	e8bd4810 	pop	{r4, fp, lr}
820009e4:	e28dd00c 	add	sp, sp, #12
820009e8:	e12fff1e 	bx	lr

820009ec <UART_printf>:

// ======================================================================

int UART_printf(const char *format, ...)
{
820009ec:	e92d000f 	push	{r0, r1, r2, r3}
820009f0:	e92d4830 	push	{r4, r5, fp, lr}
820009f4:	e28db00c 	add	fp, sp, #12
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
820009f8:	e28b4004 	add	r4, fp, #4
  return print(0, varg);
820009fc:	e1a01004 	mov	r1, r4
82000a00:	e3a00000 	mov	r0, #0
82000a04:	eb0000ca 	bl	82000d34 <print>
82000a08:	e1a03000 	mov	r3, r0
}
82000a0c:	e1a00003 	mov	r0, r3
82000a10:	e24bd00c 	sub	sp, fp, #12
82000a14:	e8bd4830 	pop	{r4, r5, fp, lr}
82000a18:	e28dd010 	add	sp, sp, #16
82000a1c:	e12fff1e 	bx	lr

82000a20 <printchar>:
#define PRINT_BUF_LEN	12

// ======================================================================

void printchar(char **str, int c)
{
82000a20:	e92d4800 	push	{fp, lr}
82000a24:	e28db004 	add	fp, sp, #4
82000a28:	e24dd008 	sub	sp, sp, #8
82000a2c:	e50b0008 	str	r0, [fp, #-8]
82000a30:	e50b100c 	str	r1, [fp, #-12]
  if (str) {
82000a34:	e51b3008 	ldr	r3, [fp, #-8]
82000a38:	e3530000 	cmp	r3, #0
82000a3c:	0a00000a 	beq	82000a6c <printchar+0x4c>
    **str = c;
82000a40:	e51b3008 	ldr	r3, [fp, #-8]
82000a44:	e5933000 	ldr	r3, [r3]
82000a48:	e51b200c 	ldr	r2, [fp, #-12]
82000a4c:	e6ef2072 	uxtb	r2, r2
82000a50:	e5c32000 	strb	r2, [r3]
    ++(*str);
82000a54:	e51b3008 	ldr	r3, [fp, #-8]
82000a58:	e5933000 	ldr	r3, [r3]
82000a5c:	e2832001 	add	r2, r3, #1
82000a60:	e51b3008 	ldr	r3, [fp, #-8]
82000a64:	e5832000 	str	r2, [r3]
82000a68:	ea000001 	b	82000a74 <printchar+0x54>
  } else
    (void) UART_putc(c);
82000a6c:	e51b000c 	ldr	r0, [fp, #-12]
82000a70:	ebfffea7 	bl	82000514 <UART_putc>
}
82000a74:	e24bd004 	sub	sp, fp, #4
82000a78:	e8bd8800 	pop	{fp, pc}

82000a7c <prints>:

// ======================================================================

int prints(char **out, const char *string, int width, int pad)
{
82000a7c:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
82000a80:	e28db014 	add	fp, sp, #20
82000a84:	e24dd010 	sub	sp, sp, #16
82000a88:	e50b0018 	str	r0, [fp, #-24]
82000a8c:	e50b101c 	str	r1, [fp, #-28]
82000a90:	e50b2020 	str	r2, [fp, #-32]
82000a94:	e50b3024 	str	r3, [fp, #-36]	; 0x24
  register int pc = 0, padchar = ' ';
82000a98:	e3a04000 	mov	r4, #0
82000a9c:	e3a07020 	mov	r7, #32

  if (width > 0) {
82000aa0:	e51b3020 	ldr	r3, [fp, #-32]
82000aa4:	e3530000 	cmp	r3, #0
82000aa8:	da000015 	ble	82000b04 <prints+0x88>
    register int len = 0;
82000aac:	e3a05000 	mov	r5, #0
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000ab0:	e51b601c 	ldr	r6, [fp, #-28]
82000ab4:	ea000001 	b	82000ac0 <prints+0x44>
      ++len;
82000ab8:	e2855001 	add	r5, r5, #1
  register int pc = 0, padchar = ' ';

  if (width > 0) {
    register int len = 0;
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000abc:	e2866001 	add	r6, r6, #1
82000ac0:	e5d63000 	ldrb	r3, [r6]
82000ac4:	e3530000 	cmp	r3, #0
82000ac8:	1afffffa 	bne	82000ab8 <prints+0x3c>
      ++len;
    if (len >= width)
82000acc:	e51b3020 	ldr	r3, [fp, #-32]
82000ad0:	e1550003 	cmp	r5, r3
82000ad4:	ba000002 	blt	82000ae4 <prints+0x68>
      width = 0;
82000ad8:	e3a03000 	mov	r3, #0
82000adc:	e50b3020 	str	r3, [fp, #-32]
82000ae0:	ea000002 	b	82000af0 <prints+0x74>
    else
      width -= len;
82000ae4:	e51b3020 	ldr	r3, [fp, #-32]
82000ae8:	e0653003 	rsb	r3, r5, r3
82000aec:	e50b3020 	str	r3, [fp, #-32]
    if (pad & PAD_ZERO)
82000af0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000af4:	e2033002 	and	r3, r3, #2
82000af8:	e3530000 	cmp	r3, #0
82000afc:	0a000000 	beq	82000b04 <prints+0x88>
      padchar = '0';
82000b00:	e3a07030 	mov	r7, #48	; 0x30
  }
  if (!(pad & PAD_RIGHT)) {
82000b04:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000b08:	e2033001 	and	r3, r3, #1
82000b0c:	e3530000 	cmp	r3, #0
82000b10:	1a00000a 	bne	82000b40 <prints+0xc4>
    for (; width > 0; --width) {
82000b14:	ea000006 	b	82000b34 <prints+0xb8>
      printchar(out, padchar);
82000b18:	e1a01007 	mov	r1, r7
82000b1c:	e51b0018 	ldr	r0, [fp, #-24]
82000b20:	ebffffbe 	bl	82000a20 <printchar>
      ++pc;
82000b24:	e2844001 	add	r4, r4, #1
      width -= len;
    if (pad & PAD_ZERO)
      padchar = '0';
  }
  if (!(pad & PAD_RIGHT)) {
    for (; width > 0; --width) {
82000b28:	e51b3020 	ldr	r3, [fp, #-32]
82000b2c:	e2433001 	sub	r3, r3, #1
82000b30:	e50b3020 	str	r3, [fp, #-32]
82000b34:	e51b3020 	ldr	r3, [fp, #-32]
82000b38:	e3530000 	cmp	r3, #0
82000b3c:	cafffff5 	bgt	82000b18 <prints+0x9c>
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000b40:	ea000008 	b	82000b68 <prints+0xec>
    printchar(out, *string);
82000b44:	e51b301c 	ldr	r3, [fp, #-28]
82000b48:	e5d33000 	ldrb	r3, [r3]
82000b4c:	e1a01003 	mov	r1, r3
82000b50:	e51b0018 	ldr	r0, [fp, #-24]
82000b54:	ebffffb1 	bl	82000a20 <printchar>
    ++pc;
82000b58:	e2844001 	add	r4, r4, #1
    for (; width > 0; --width) {
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000b5c:	e51b301c 	ldr	r3, [fp, #-28]
82000b60:	e2833001 	add	r3, r3, #1
82000b64:	e50b301c 	str	r3, [fp, #-28]
82000b68:	e51b301c 	ldr	r3, [fp, #-28]
82000b6c:	e5d33000 	ldrb	r3, [r3]
82000b70:	e3530000 	cmp	r3, #0
82000b74:	1afffff2 	bne	82000b44 <prints+0xc8>
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000b78:	ea000006 	b	82000b98 <prints+0x11c>
    printchar(out, padchar);
82000b7c:	e1a01007 	mov	r1, r7
82000b80:	e51b0018 	ldr	r0, [fp, #-24]
82000b84:	ebffffa5 	bl	82000a20 <printchar>
    ++pc;
82000b88:	e2844001 	add	r4, r4, #1
  }
  for (; *string; ++string) {
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000b8c:	e51b3020 	ldr	r3, [fp, #-32]
82000b90:	e2433001 	sub	r3, r3, #1
82000b94:	e50b3020 	str	r3, [fp, #-32]
82000b98:	e51b3020 	ldr	r3, [fp, #-32]
82000b9c:	e3530000 	cmp	r3, #0
82000ba0:	cafffff5 	bgt	82000b7c <prints+0x100>
    printchar(out, padchar);
    ++pc;
  }

  return pc;
82000ba4:	e1a03004 	mov	r3, r4
}
82000ba8:	e1a00003 	mov	r0, r3
82000bac:	e24bd014 	sub	sp, fp, #20
82000bb0:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

82000bb4 <printi>:

// ======================================================================

int printi(char **out, int i, int b, int sg, int width, int pad,
	   int letbase)
{
82000bb4:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000bb8:	e28db018 	add	fp, sp, #24
82000bbc:	e24dd024 	sub	sp, sp, #36	; 0x24
82000bc0:	e50b0030 	str	r0, [fp, #-48]	; 0x30
82000bc4:	e50b1034 	str	r1, [fp, #-52]	; 0x34
82000bc8:	e50b2038 	str	r2, [fp, #-56]	; 0x38
82000bcc:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
  char print_buf[PRINT_BUF_LEN];
  register char *s;
  register int t, neg = 0, pc = 0;
82000bd0:	e3a08000 	mov	r8, #0
82000bd4:	e3a05000 	mov	r5, #0
  register unsigned int u = i;
82000bd8:	e51b7034 	ldr	r7, [fp, #-52]	; 0x34

  if (i == 0) {
82000bdc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000be0:	e3530000 	cmp	r3, #0
82000be4:	1a00000a 	bne	82000c14 <printi+0x60>
    print_buf[0] = '0';
82000be8:	e3a03030 	mov	r3, #48	; 0x30
82000bec:	e54b3028 	strb	r3, [fp, #-40]	; 0x28
    print_buf[1] = '\0';
82000bf0:	e3a03000 	mov	r3, #0
82000bf4:	e54b3027 	strb	r3, [fp, #-39]	; 0x27
    return prints(out, print_buf, width, pad);
82000bf8:	e24b1028 	sub	r1, fp, #40	; 0x28
82000bfc:	e59b3008 	ldr	r3, [fp, #8]
82000c00:	e59b2004 	ldr	r2, [fp, #4]
82000c04:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000c08:	ebffff9b 	bl	82000a7c <prints>
82000c0c:	e1a03000 	mov	r3, r0
82000c10:	ea000044 	b	82000d28 <printi+0x174>
  }

  if (sg && b == 10 && i < 0) {
82000c14:	e51b303c 	ldr	r3, [fp, #-60]	; 0x3c
82000c18:	e3530000 	cmp	r3, #0
82000c1c:	0a000009 	beq	82000c48 <printi+0x94>
82000c20:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000c24:	e353000a 	cmp	r3, #10
82000c28:	1a000006 	bne	82000c48 <printi+0x94>
82000c2c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000c30:	e3530000 	cmp	r3, #0
82000c34:	aa000003 	bge	82000c48 <printi+0x94>
    neg = 1;
82000c38:	e3a08001 	mov	r8, #1
    u = -i;
82000c3c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000c40:	e2633000 	rsb	r3, r3, #0
82000c44:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
82000c48:	e24b4028 	sub	r4, fp, #40	; 0x28
82000c4c:	e284400b 	add	r4, r4, #11
  *s = '\0';
82000c50:	e3a03000 	mov	r3, #0
82000c54:	e5c43000 	strb	r3, [r4]

  while (u) {
82000c58:	ea000015 	b	82000cb4 <printi+0x100>
    t = u % b;
82000c5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000c60:	e1a01003 	mov	r1, r3
82000c64:	e1a00007 	mov	r0, r7
82000c68:	eb000168 	bl	82001210 <__aeabi_uidivmod>
82000c6c:	e1a03001 	mov	r3, r1
82000c70:	e1a06003 	mov	r6, r3
    if (t >= 10)
82000c74:	e3560009 	cmp	r6, #9
82000c78:	da000002 	ble	82000c88 <printi+0xd4>
      t += letbase - '0' - 10;
82000c7c:	e59b300c 	ldr	r3, [fp, #12]
82000c80:	e243303a 	sub	r3, r3, #58	; 0x3a
82000c84:	e0866003 	add	r6, r6, r3
    *--s = t + '0';
82000c88:	e2444001 	sub	r4, r4, #1
82000c8c:	e6ef3076 	uxtb	r3, r6
82000c90:	e2833030 	add	r3, r3, #48	; 0x30
82000c94:	e6ef3073 	uxtb	r3, r3
82000c98:	e5c43000 	strb	r3, [r4]
    u /= b;
82000c9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000ca0:	e1a01003 	mov	r1, r3
82000ca4:	e1a00007 	mov	r0, r7
82000ca8:	eb0000dd 	bl	82001024 <__aeabi_uidiv>
82000cac:	e1a03000 	mov	r3, r0
82000cb0:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
  *s = '\0';

  while (u) {
82000cb4:	e3570000 	cmp	r7, #0
82000cb8:	1affffe7 	bne	82000c5c <printi+0xa8>
      t += letbase - '0' - 10;
    *--s = t + '0';
    u /= b;
  }

  if (neg) {
82000cbc:	e3580000 	cmp	r8, #0
82000cc0:	0a000011 	beq	82000d0c <printi+0x158>
    if (width && (pad & PAD_ZERO)) {
82000cc4:	e59b3004 	ldr	r3, [fp, #4]
82000cc8:	e3530000 	cmp	r3, #0
82000ccc:	0a00000b 	beq	82000d00 <printi+0x14c>
82000cd0:	e59b3008 	ldr	r3, [fp, #8]
82000cd4:	e2033002 	and	r3, r3, #2
82000cd8:	e3530000 	cmp	r3, #0
82000cdc:	0a000007 	beq	82000d00 <printi+0x14c>
      printchar(out, '-');
82000ce0:	e3a0102d 	mov	r1, #45	; 0x2d
82000ce4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000ce8:	ebffff4c 	bl	82000a20 <printchar>
      ++pc;
82000cec:	e2855001 	add	r5, r5, #1
      --width;
82000cf0:	e59b3004 	ldr	r3, [fp, #4]
82000cf4:	e2433001 	sub	r3, r3, #1
82000cf8:	e58b3004 	str	r3, [fp, #4]
82000cfc:	ea000002 	b	82000d0c <printi+0x158>
    } else {
      *--s = '-';
82000d00:	e2444001 	sub	r4, r4, #1
82000d04:	e3a0302d 	mov	r3, #45	; 0x2d
82000d08:	e5c43000 	strb	r3, [r4]
    }
  }

  return pc + prints(out, s, width, pad);
82000d0c:	e59b3008 	ldr	r3, [fp, #8]
82000d10:	e59b2004 	ldr	r2, [fp, #4]
82000d14:	e1a01004 	mov	r1, r4
82000d18:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000d1c:	ebffff56 	bl	82000a7c <prints>
82000d20:	e1a03000 	mov	r3, r0
82000d24:	e0833005 	add	r3, r3, r5
}
82000d28:	e1a00003 	mov	r0, r3
82000d2c:	e24bd018 	sub	sp, fp, #24
82000d30:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

82000d34 <print>:

// ======================================================================

int print(char **out, int *varg)
{
82000d34:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000d38:	e28db018 	add	fp, sp, #24
82000d3c:	e24dd024 	sub	sp, sp, #36	; 0x24
82000d40:	e50b0028 	str	r0, [fp, #-40]	; 0x28
82000d44:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
  register int width, pad;
  register int pc = 0;
82000d48:	e3a05000 	mov	r5, #0
  register char *format = (char *) (*varg++);
82000d4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000d50:	e2832004 	add	r2, r3, #4
82000d54:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000d58:	e5933000 	ldr	r3, [r3]
82000d5c:	e1a04003 	mov	r4, r3
  char scr[2];

  for (; *format != 0; ++format) {
82000d60:	ea00009c 	b	82000fd8 <print+0x2a4>
    if (*format == '%') {
82000d64:	e5d43000 	ldrb	r3, [r4]
82000d68:	e3530025 	cmp	r3, #37	; 0x25
82000d6c:	1a000093 	bne	82000fc0 <print+0x28c>
      ++format;
82000d70:	e2844001 	add	r4, r4, #1
      width = pad = 0;
82000d74:	e3a07000 	mov	r7, #0
82000d78:	e1a06007 	mov	r6, r7
      if (*format == '\0')
82000d7c:	e5d43000 	ldrb	r3, [r4]
82000d80:	e3530000 	cmp	r3, #0
82000d84:	1a000000 	bne	82000d8c <print+0x58>
	break;
82000d88:	ea000095 	b	82000fe4 <print+0x2b0>
      if (*format == '%')
82000d8c:	e5d43000 	ldrb	r3, [r4]
82000d90:	e3530025 	cmp	r3, #37	; 0x25
82000d94:	1a000000 	bne	82000d9c <print+0x68>
	goto out;
82000d98:	ea000088 	b	82000fc0 <print+0x28c>
      if (*format == '-') {
82000d9c:	e5d43000 	ldrb	r3, [r4]
82000da0:	e353002d 	cmp	r3, #45	; 0x2d
82000da4:	1a000001 	bne	82000db0 <print+0x7c>
	++format;
82000da8:	e2844001 	add	r4, r4, #1
	pad = PAD_RIGHT;
82000dac:	e3a07001 	mov	r7, #1
      }
      while (*format == '0') {
82000db0:	ea000001 	b	82000dbc <print+0x88>
	++format;
82000db4:	e2844001 	add	r4, r4, #1
	pad |= PAD_ZERO;
82000db8:	e3877002 	orr	r7, r7, #2
	goto out;
      if (*format == '-') {
	++format;
	pad = PAD_RIGHT;
      }
      while (*format == '0') {
82000dbc:	e5d43000 	ldrb	r3, [r4]
82000dc0:	e3530030 	cmp	r3, #48	; 0x30
82000dc4:	0afffffa 	beq	82000db4 <print+0x80>
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000dc8:	ea000007 	b	82000dec <print+0xb8>
	width *= 10;
82000dcc:	e1a03006 	mov	r3, r6
82000dd0:	e1a03083 	lsl	r3, r3, #1
82000dd4:	e1a02103 	lsl	r2, r3, #2
82000dd8:	e0836002 	add	r6, r3, r2
	width += *format - '0';
82000ddc:	e5d43000 	ldrb	r3, [r4]
82000de0:	e2433030 	sub	r3, r3, #48	; 0x30
82000de4:	e0866003 	add	r6, r6, r3
      }
      while (*format == '0') {
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000de8:	e2844001 	add	r4, r4, #1
82000dec:	e5d43000 	ldrb	r3, [r4]
82000df0:	e353002f 	cmp	r3, #47	; 0x2f
82000df4:	9a000002 	bls	82000e04 <print+0xd0>
82000df8:	e5d43000 	ldrb	r3, [r4]
82000dfc:	e3530039 	cmp	r3, #57	; 0x39
82000e00:	9afffff1 	bls	82000dcc <print+0x98>
	width *= 10;
	width += *format - '0';
      }
      if (*format == 's') {
82000e04:	e5d43000 	ldrb	r3, [r4]
82000e08:	e3530073 	cmp	r3, #115	; 0x73
82000e0c:	1a000010 	bne	82000e54 <print+0x120>
	register char *s = *((char **) varg++);
82000e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000e14:	e2832004 	add	r2, r3, #4
82000e18:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000e1c:	e5938000 	ldr	r8, [r3]
	pc += prints(out, s ? s : "(null)", width, pad);
82000e20:	e3580000 	cmp	r8, #0
82000e24:	0a000001 	beq	82000e30 <print+0xfc>
82000e28:	e1a01008 	mov	r1, r8
82000e2c:	ea000001 	b	82000e38 <print+0x104>
82000e30:	e3011284 	movw	r1, #4740	; 0x1284
82000e34:	e3481200 	movt	r1, #33280	; 0x8200
82000e38:	e1a03007 	mov	r3, r7
82000e3c:	e1a02006 	mov	r2, r6
82000e40:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000e44:	ebffff0c 	bl	82000a7c <prints>
82000e48:	e1a03000 	mov	r3, r0
82000e4c:	e0855003 	add	r5, r5, r3
	continue;
82000e50:	ea00005f 	b	82000fd4 <print+0x2a0>
      }
      if (*format == 'd') {
82000e54:	e5d43000 	ldrb	r3, [r4]
82000e58:	e3530064 	cmp	r3, #100	; 0x64
82000e5c:	1a00000e 	bne	82000e9c <print+0x168>
	pc += printi(out, *varg++, 10, 1, width, pad, 'a');
82000e60:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000e64:	e2832004 	add	r2, r3, #4
82000e68:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000e6c:	e5931000 	ldr	r1, [r3]
82000e70:	e3a03061 	mov	r3, #97	; 0x61
82000e74:	e58d3008 	str	r3, [sp, #8]
82000e78:	e58d7004 	str	r7, [sp, #4]
82000e7c:	e58d6000 	str	r6, [sp]
82000e80:	e3a03001 	mov	r3, #1
82000e84:	e3a0200a 	mov	r2, #10
82000e88:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000e8c:	ebffff48 	bl	82000bb4 <printi>
82000e90:	e1a03000 	mov	r3, r0
82000e94:	e0855003 	add	r5, r5, r3
	continue;
82000e98:	ea00004d 	b	82000fd4 <print+0x2a0>
      }
      if (*format == 'x') {
82000e9c:	e5d43000 	ldrb	r3, [r4]
82000ea0:	e3530078 	cmp	r3, #120	; 0x78
82000ea4:	1a00000e 	bne	82000ee4 <print+0x1b0>
	pc += printi(out, *varg++, 16, 0, width, pad, 'a');
82000ea8:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000eac:	e2832004 	add	r2, r3, #4
82000eb0:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000eb4:	e5931000 	ldr	r1, [r3]
82000eb8:	e3a03061 	mov	r3, #97	; 0x61
82000ebc:	e58d3008 	str	r3, [sp, #8]
82000ec0:	e58d7004 	str	r7, [sp, #4]
82000ec4:	e58d6000 	str	r6, [sp]
82000ec8:	e3a03000 	mov	r3, #0
82000ecc:	e3a02010 	mov	r2, #16
82000ed0:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000ed4:	ebffff36 	bl	82000bb4 <printi>
82000ed8:	e1a03000 	mov	r3, r0
82000edc:	e0855003 	add	r5, r5, r3
	continue;
82000ee0:	ea00003b 	b	82000fd4 <print+0x2a0>
      }
      if (*format == 'X') {
82000ee4:	e5d43000 	ldrb	r3, [r4]
82000ee8:	e3530058 	cmp	r3, #88	; 0x58
82000eec:	1a00000e 	bne	82000f2c <print+0x1f8>
	pc += printi(out, *varg++, 16, 0, width, pad, 'A');
82000ef0:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000ef4:	e2832004 	add	r2, r3, #4
82000ef8:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000efc:	e5931000 	ldr	r1, [r3]
82000f00:	e3a03041 	mov	r3, #65	; 0x41
82000f04:	e58d3008 	str	r3, [sp, #8]
82000f08:	e58d7004 	str	r7, [sp, #4]
82000f0c:	e58d6000 	str	r6, [sp]
82000f10:	e3a03000 	mov	r3, #0
82000f14:	e3a02010 	mov	r2, #16
82000f18:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000f1c:	ebffff24 	bl	82000bb4 <printi>
82000f20:	e1a03000 	mov	r3, r0
82000f24:	e0855003 	add	r5, r5, r3
	continue;
82000f28:	ea000029 	b	82000fd4 <print+0x2a0>
      }
      if (*format == 'u') {
82000f2c:	e5d43000 	ldrb	r3, [r4]
82000f30:	e3530075 	cmp	r3, #117	; 0x75
82000f34:	1a00000e 	bne	82000f74 <print+0x240>
	pc += printi(out, *varg++, 10, 0, width, pad, 'a');
82000f38:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000f3c:	e2832004 	add	r2, r3, #4
82000f40:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000f44:	e5931000 	ldr	r1, [r3]
82000f48:	e3a03061 	mov	r3, #97	; 0x61
82000f4c:	e58d3008 	str	r3, [sp, #8]
82000f50:	e58d7004 	str	r7, [sp, #4]
82000f54:	e58d6000 	str	r6, [sp]
82000f58:	e3a03000 	mov	r3, #0
82000f5c:	e3a0200a 	mov	r2, #10
82000f60:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000f64:	ebffff12 	bl	82000bb4 <printi>
82000f68:	e1a03000 	mov	r3, r0
82000f6c:	e0855003 	add	r5, r5, r3
	continue;
82000f70:	ea000017 	b	82000fd4 <print+0x2a0>
      }
      if (*format == 'c') {
82000f74:	e5d43000 	ldrb	r3, [r4]
82000f78:	e3530063 	cmp	r3, #99	; 0x63
82000f7c:	1a000014 	bne	82000fd4 <print+0x2a0>
	/* char are converted to int then pushed on the stack */
	scr[0] = *varg++;
82000f80:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000f84:	e2832004 	add	r2, r3, #4
82000f88:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000f8c:	e5933000 	ldr	r3, [r3]
82000f90:	e6ef3073 	uxtb	r3, r3
82000f94:	e54b3020 	strb	r3, [fp, #-32]
	scr[1] = '\0';
82000f98:	e3a03000 	mov	r3, #0
82000f9c:	e54b301f 	strb	r3, [fp, #-31]
	pc += prints(out, scr, width, pad);
82000fa0:	e24b1020 	sub	r1, fp, #32
82000fa4:	e1a03007 	mov	r3, r7
82000fa8:	e1a02006 	mov	r2, r6
82000fac:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000fb0:	ebfffeb1 	bl	82000a7c <prints>
82000fb4:	e1a03000 	mov	r3, r0
82000fb8:	e0855003 	add	r5, r5, r3
	continue;
82000fbc:	ea000004 	b	82000fd4 <print+0x2a0>
      }
    } else {
    out:
      printchar(out, *format);
82000fc0:	e5d43000 	ldrb	r3, [r4]
82000fc4:	e1a01003 	mov	r1, r3
82000fc8:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000fcc:	ebfffe93 	bl	82000a20 <printchar>
      ++pc;
82000fd0:	e2855001 	add	r5, r5, #1
  register int width, pad;
  register int pc = 0;
  register char *format = (char *) (*varg++);
  char scr[2];

  for (; *format != 0; ++format) {
82000fd4:	e2844001 	add	r4, r4, #1
82000fd8:	e5d43000 	ldrb	r3, [r4]
82000fdc:	e3530000 	cmp	r3, #0
82000fe0:	1affff5f 	bne	82000d64 <print+0x30>
    out:
      printchar(out, *format);
      ++pc;
    }
  }
  if (out)
82000fe4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
82000fe8:	e3530000 	cmp	r3, #0
82000fec:	0a000003 	beq	82001000 <print+0x2cc>
    **out = '\0';
82000ff0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
82000ff4:	e5933000 	ldr	r3, [r3]
82000ff8:	e3a02000 	mov	r2, #0
82000ffc:	e5c32000 	strb	r2, [r3]
  return pc;
82001000:	e1a03005 	mov	r3, r5
}
82001004:	e1a00003 	mov	r0, r3
82001008:	e24bd018 	sub	sp, fp, #24
8200100c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

82001010 <raise>:

// ======================================================================

void raise(void)
{
82001010:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
82001014:	e28db000 	add	fp, sp, #0
}
82001018:	e24bd000 	sub	sp, fp, #0
8200101c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82001020:	e12fff1e 	bx	lr

82001024 <__aeabi_uidiv>:
82001024:	e2512001 	subs	r2, r1, #1
82001028:	012fff1e 	bxeq	lr
8200102c:	3a000074 	bcc	82001204 <__aeabi_uidiv+0x1e0>
82001030:	e1500001 	cmp	r0, r1
82001034:	9a00006b 	bls	820011e8 <__aeabi_uidiv+0x1c4>
82001038:	e1110002 	tst	r1, r2
8200103c:	0a00006c 	beq	820011f4 <__aeabi_uidiv+0x1d0>
82001040:	e16f3f10 	clz	r3, r0
82001044:	e16f2f11 	clz	r2, r1
82001048:	e0423003 	sub	r3, r2, r3
8200104c:	e273301f 	rsbs	r3, r3, #31
82001050:	10833083 	addne	r3, r3, r3, lsl #1
82001054:	e3a02000 	mov	r2, #0
82001058:	108ff103 	addne	pc, pc, r3, lsl #2
8200105c:	e320f000 	nop	{0}
82001060:	e1500f81 	cmp	r0, r1, lsl #31
82001064:	e0a22002 	adc	r2, r2, r2
82001068:	20400f81 	subcs	r0, r0, r1, lsl #31
8200106c:	e1500f01 	cmp	r0, r1, lsl #30
82001070:	e0a22002 	adc	r2, r2, r2
82001074:	20400f01 	subcs	r0, r0, r1, lsl #30
82001078:	e1500e81 	cmp	r0, r1, lsl #29
8200107c:	e0a22002 	adc	r2, r2, r2
82001080:	20400e81 	subcs	r0, r0, r1, lsl #29
82001084:	e1500e01 	cmp	r0, r1, lsl #28
82001088:	e0a22002 	adc	r2, r2, r2
8200108c:	20400e01 	subcs	r0, r0, r1, lsl #28
82001090:	e1500d81 	cmp	r0, r1, lsl #27
82001094:	e0a22002 	adc	r2, r2, r2
82001098:	20400d81 	subcs	r0, r0, r1, lsl #27
8200109c:	e1500d01 	cmp	r0, r1, lsl #26
820010a0:	e0a22002 	adc	r2, r2, r2
820010a4:	20400d01 	subcs	r0, r0, r1, lsl #26
820010a8:	e1500c81 	cmp	r0, r1, lsl #25
820010ac:	e0a22002 	adc	r2, r2, r2
820010b0:	20400c81 	subcs	r0, r0, r1, lsl #25
820010b4:	e1500c01 	cmp	r0, r1, lsl #24
820010b8:	e0a22002 	adc	r2, r2, r2
820010bc:	20400c01 	subcs	r0, r0, r1, lsl #24
820010c0:	e1500b81 	cmp	r0, r1, lsl #23
820010c4:	e0a22002 	adc	r2, r2, r2
820010c8:	20400b81 	subcs	r0, r0, r1, lsl #23
820010cc:	e1500b01 	cmp	r0, r1, lsl #22
820010d0:	e0a22002 	adc	r2, r2, r2
820010d4:	20400b01 	subcs	r0, r0, r1, lsl #22
820010d8:	e1500a81 	cmp	r0, r1, lsl #21
820010dc:	e0a22002 	adc	r2, r2, r2
820010e0:	20400a81 	subcs	r0, r0, r1, lsl #21
820010e4:	e1500a01 	cmp	r0, r1, lsl #20
820010e8:	e0a22002 	adc	r2, r2, r2
820010ec:	20400a01 	subcs	r0, r0, r1, lsl #20
820010f0:	e1500981 	cmp	r0, r1, lsl #19
820010f4:	e0a22002 	adc	r2, r2, r2
820010f8:	20400981 	subcs	r0, r0, r1, lsl #19
820010fc:	e1500901 	cmp	r0, r1, lsl #18
82001100:	e0a22002 	adc	r2, r2, r2
82001104:	20400901 	subcs	r0, r0, r1, lsl #18
82001108:	e1500881 	cmp	r0, r1, lsl #17
8200110c:	e0a22002 	adc	r2, r2, r2
82001110:	20400881 	subcs	r0, r0, r1, lsl #17
82001114:	e1500801 	cmp	r0, r1, lsl #16
82001118:	e0a22002 	adc	r2, r2, r2
8200111c:	20400801 	subcs	r0, r0, r1, lsl #16
82001120:	e1500781 	cmp	r0, r1, lsl #15
82001124:	e0a22002 	adc	r2, r2, r2
82001128:	20400781 	subcs	r0, r0, r1, lsl #15
8200112c:	e1500701 	cmp	r0, r1, lsl #14
82001130:	e0a22002 	adc	r2, r2, r2
82001134:	20400701 	subcs	r0, r0, r1, lsl #14
82001138:	e1500681 	cmp	r0, r1, lsl #13
8200113c:	e0a22002 	adc	r2, r2, r2
82001140:	20400681 	subcs	r0, r0, r1, lsl #13
82001144:	e1500601 	cmp	r0, r1, lsl #12
82001148:	e0a22002 	adc	r2, r2, r2
8200114c:	20400601 	subcs	r0, r0, r1, lsl #12
82001150:	e1500581 	cmp	r0, r1, lsl #11
82001154:	e0a22002 	adc	r2, r2, r2
82001158:	20400581 	subcs	r0, r0, r1, lsl #11
8200115c:	e1500501 	cmp	r0, r1, lsl #10
82001160:	e0a22002 	adc	r2, r2, r2
82001164:	20400501 	subcs	r0, r0, r1, lsl #10
82001168:	e1500481 	cmp	r0, r1, lsl #9
8200116c:	e0a22002 	adc	r2, r2, r2
82001170:	20400481 	subcs	r0, r0, r1, lsl #9
82001174:	e1500401 	cmp	r0, r1, lsl #8
82001178:	e0a22002 	adc	r2, r2, r2
8200117c:	20400401 	subcs	r0, r0, r1, lsl #8
82001180:	e1500381 	cmp	r0, r1, lsl #7
82001184:	e0a22002 	adc	r2, r2, r2
82001188:	20400381 	subcs	r0, r0, r1, lsl #7
8200118c:	e1500301 	cmp	r0, r1, lsl #6
82001190:	e0a22002 	adc	r2, r2, r2
82001194:	20400301 	subcs	r0, r0, r1, lsl #6
82001198:	e1500281 	cmp	r0, r1, lsl #5
8200119c:	e0a22002 	adc	r2, r2, r2
820011a0:	20400281 	subcs	r0, r0, r1, lsl #5
820011a4:	e1500201 	cmp	r0, r1, lsl #4
820011a8:	e0a22002 	adc	r2, r2, r2
820011ac:	20400201 	subcs	r0, r0, r1, lsl #4
820011b0:	e1500181 	cmp	r0, r1, lsl #3
820011b4:	e0a22002 	adc	r2, r2, r2
820011b8:	20400181 	subcs	r0, r0, r1, lsl #3
820011bc:	e1500101 	cmp	r0, r1, lsl #2
820011c0:	e0a22002 	adc	r2, r2, r2
820011c4:	20400101 	subcs	r0, r0, r1, lsl #2
820011c8:	e1500081 	cmp	r0, r1, lsl #1
820011cc:	e0a22002 	adc	r2, r2, r2
820011d0:	20400081 	subcs	r0, r0, r1, lsl #1
820011d4:	e1500001 	cmp	r0, r1
820011d8:	e0a22002 	adc	r2, r2, r2
820011dc:	20400001 	subcs	r0, r0, r1
820011e0:	e1a00002 	mov	r0, r2
820011e4:	e12fff1e 	bx	lr
820011e8:	03a00001 	moveq	r0, #1
820011ec:	13a00000 	movne	r0, #0
820011f0:	e12fff1e 	bx	lr
820011f4:	e16f2f11 	clz	r2, r1
820011f8:	e262201f 	rsb	r2, r2, #31
820011fc:	e1a00230 	lsr	r0, r0, r2
82001200:	e12fff1e 	bx	lr
82001204:	e3500000 	cmp	r0, #0
82001208:	13e00000 	mvnne	r0, #0
8200120c:	ea000007 	b	82001230 <__aeabi_idiv0>

82001210 <__aeabi_uidivmod>:
82001210:	e3510000 	cmp	r1, #0
82001214:	0afffffa 	beq	82001204 <__aeabi_uidiv+0x1e0>
82001218:	e92d4003 	push	{r0, r1, lr}
8200121c:	ebffff80 	bl	82001024 <__aeabi_uidiv>
82001220:	e8bd4006 	pop	{r1, r2, lr}
82001224:	e0030092 	mul	r3, r2, r0
82001228:	e0411003 	sub	r1, r1, r3
8200122c:	e12fff1e 	bx	lr

82001230 <__aeabi_idiv0>:
82001230:	e12fff1e 	bx	lr

Disassembly of section .rodata:

82001234 <.LC0>:
82001234:	20657241 	rsbcs	r7, r5, r1, asr #4
82001238:	20756f79 	rsbscs	r6, r5, r9, ror pc
8200123c:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
82001240:	00002165 	andeq	r2, r0, r5, ror #2

82001244 <.LC1>:
82001244:	6d612049 	stclvs	0, cr2, [r1, #-292]!	; 0xfffffedc
82001248:	72656820 	rsbvc	r6, r5, #32, 16	; 0x200000
8200124c:	00002165 	andeq	r2, r0, r5, ror #2

82001250 <.LC2>:
82001250:	61656c50 	cmnvs	r5, r0, asr ip
82001254:	68206573 	stmdavs	r0!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
82001258:	20706c65 	rsbscs	r6, r0, r5, ror #24
8200125c:	0021656d 	eoreq	r6, r1, sp, ror #10

82001260 <.LC3>:
82001260:	00000000 	andeq	r0, r0, r0

82001264 <.LC4>:
82001264:	6425282a 	strtvs	r2, [r5], #-2090	; 0x82a
82001268:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
8200126c:	00732520 	rsbseq	r2, r3, r0, lsr #10

82001270 <.LC0>:
82001270:	4a325b1b 	bmi	82c97ee4 <__bss_start+0xc96c58>
82001274:	3b305b1b 	blcc	82c17ee8 <__bss_start+0xc16c5c>
82001278:	00004830 	andeq	r4, r0, r0, lsr r8
	...

82001284 <.LC0>:
82001284:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
82001288:	0000296c 	andeq	r2, r0, ip, ror #18

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003841 	andeq	r3, r0, r1, asr #16
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002e 	andeq	r0, r0, lr, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	06003841 	streq	r3, [r0], -r1, asr #16
  1c:	0841070a 	stmdaeq	r1, {r1, r3, r8, r9, sl}^
  20:	0a020901 	beq	8242c <shift+0x8242c>
  24:	12010c03 	andne	r0, r1, #768	; 0x300
  28:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  30:	1b021a01 	blne	8683c <shift+0x8683c>
  34:	44012203 	strmi	r2, [r1], #-515	; 0x203
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <shift+0x10d0d24>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	31302e35 	teqcc	r0, r5, lsr lr
  1c:	2029332d 	eorcs	r3, r9, sp, lsr #6
  20:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  24:	30322033 	eorscc	r2, r2, r3, lsr r0
  28:	31303531 	teqcc	r0, r1, lsr r5
  2c:	28203331 	stmdacs	r0!, {r0, r4, r5, r8, r9, ip, sp}
  30:	72657270 	rsbvc	r7, r5, #112, 4
  34:	61656c65 	cmnvs	r5, r5, ror #24
  38:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000043 	andeq	r0, r0, r3, asr #32
   4:	001e0002 	andseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  20:	00532e74 	subseq	r2, r3, r4, ror lr
  24:	00000000 	andeq	r0, r0, r0
  28:	00020500 	andeq	r0, r2, r0, lsl #10
  2c:	18820000 	stmne	r2, {}	; <UNPREDICTABLE>
  30:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  34:	2f302f2f 	svccs	0x00302f2f
  38:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  3c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  40:	0a022f30 	beq	8bd08 <shift+0x8bd08>
  44:	43010100 	movwmi	r0, #4352	; 0x1100
  48:	02000000 	andeq	r0, r0, #0
  4c:	00002300 	andeq	r2, r0, r0, lsl #6
  50:	fb010200 	blx	4085a <shift+0x4085a>
  54:	01000d0e 	tsteq	r0, lr, lsl #26
  58:	00010101 	andeq	r0, r1, r1, lsl #2
  5c:	00010000 	andeq	r0, r1, r0
  60:	75000100 	strvc	r0, [r0, #-256]	; 0x100
  64:	2d747261 	lfmcs	f7, 2, [r4, #-388]!	; 0xfffffe7c
  68:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  6c:	00632e32 	rsbeq	r2, r3, r2, lsr lr
  70:	00000000 	andeq	r0, r0, r0
  74:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
  78:	03820000 	orreq	r0, r2, #0
  7c:	304b010d 	subcc	r0, fp, sp, lsl #2
  80:	a09f9f9f 	umullsge	r9, pc, pc, pc	; <UNPREDICTABLE>
  84:	67bb4f2f 	ldrvs	r4, [fp, pc, lsr #30]!
  88:	000402bb 			; <UNDEFINED> instruction: 0x000402bb
  8c:	01950101 	orrseq	r0, r5, r1, lsl #2
  90:	00020000 	andeq	r0, r2, r0
  94:	0000001d 	andeq	r0, r0, sp, lsl r0
  98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  9c:	0101000d 	tsteq	r1, sp
  a0:	00000101 	andeq	r0, r0, r1, lsl #2
  a4:	00000100 	andeq	r0, r0, r0, lsl #2
  a8:	61750001 	cmnvs	r5, r1
  ac:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
  b0:	00000000 	andeq	r0, r0, r0
  b4:	02050000 	andeq	r0, r5, #0
  b8:	82000108 	andhi	r0, r0, #8, 2
  bc:	69011703 	stmdbvs	r1, {r0, r1, r8, r9, sl, ip}
  c0:	01040200 	mrseq	r0, R12_usr
  c4:	bc062e06 	stclt	14, cr2, [r6], {6}
  c8:	6b2f6884 	blvs	bda2e0 <shift+0xbda2e0>
  cc:	2f688469 	svccs	0x00688469
  d0:	004b686b 	subeq	r6, fp, fp, ror #16
  d4:	4d010402 	cfstrsmi	mvf0, [r1, #-8]
  d8:	006783d7 	ldrdeq	r8, [r7], #-55	; 0xffffffc9	; <UNPREDICTABLE>
  dc:	06020402 	streq	r0, [r2], -r2, lsl #8
  e0:	04020066 	streq	r0, [r2], #-102	; 0x66
  e4:	4b066603 	blmi	1998f8 <shift+0x1998f8>
  e8:	01040200 	mrseq	r0, R12_usr
  ec:	67066606 	strvs	r6, [r6, -r6, lsl #12]
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	67066606 	strvs	r6, [r6, -r6, lsl #12]
  f8:	01040200 	mrseq	r0, R12_usr
  fc:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 100:	01040200 	mrseq	r0, R12_usr
 104:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 108:	01040200 	mrseq	r0, R12_usr
 10c:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 110:	01040200 	mrseq	r0, R12_usr
 114:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 118:	01040200 	mrseq	r0, R12_usr
 11c:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 120:	01040200 	mrseq	r0, R12_usr
 124:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 128:	01040200 	mrseq	r0, R12_usr
 12c:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 130:	01040200 	mrseq	r0, R12_usr
 134:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 138:	02040200 	andeq	r0, r4, #0, 4
 13c:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 140:	06660304 	strbteq	r0, [r6], -r4, lsl #6
 144:	04020067 	streq	r0, [r2], #-103	; 0x67
 148:	00660602 	rsbeq	r0, r6, r2, lsl #12
 14c:	66030402 	strvs	r0, [r3], -r2, lsl #8
 150:	02006706 	andeq	r6, r0, #1572864	; 0x180000
 154:	66060204 	strvs	r0, [r6], -r4, lsl #4
 158:	03040200 	movweq	r0, #16896	; 0x4200
 15c:	00670666 	rsbeq	r0, r7, r6, ror #12
 160:	06020402 	streq	r0, [r2], -r2, lsl #8
 164:	04020066 	streq	r0, [r2], #-102	; 0x66
 168:	67066603 	strvs	r6, [r6, -r3, lsl #12]
 16c:	02040200 	andeq	r0, r4, #0, 4
 170:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 174:	06660304 	strbteq	r0, [r6], -r4, lsl #6
 178:	04020067 	streq	r0, [r2], #-103	; 0x67
 17c:	00660602 	rsbeq	r0, r6, r2, lsl #12
 180:	66030402 	strvs	r0, [r3], -r2, lsl #8
 184:	674b6706 	strbvs	r6, [fp, -r6, lsl #14]
 188:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
 18c:	836b3068 	cmnhi	fp, #104	; 0x68
 190:	02004d4b 	andeq	r4, r0, #4800	; 0x12c0
 194:	002f0204 	eoreq	r0, pc, r4, lsl #4
 198:	9d020402 	cfstrsls	mvf0, [r2, #-8]
 19c:	01040200 	mrseq	r0, R12_usr
 1a0:	6c066606 	stcvs	6, cr6, [r6], {6}
 1a4:	01040200 	mrseq	r0, R12_usr
 1a8:	bc062e06 	stclt	14, cr2, [r6], {6}
 1ac:	02004b83 	andeq	r4, r0, #134144	; 0x20c00
 1b0:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1b4:	bb4c6706 	bllt	1319dd4 <shift+0x1319dd4>
 1b8:	04020067 	streq	r0, [r2], #-103	; 0x67
 1bc:	836b2f01 	cmnhi	fp, #1, 30
 1c0:	01040200 	mrseq	r0, R12_usr
 1c4:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 1c8:	0402004c 	streq	r0, [r2], #-76	; 0x4c
 1cc:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 1d0:	004d84bc 	strheq	r8, [sp], #-76	; 0xffffffb4
 1d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1d8:	84bc062e 	ldrthi	r0, [ip], #1582	; 0x62e
 1dc:	4b838731 	blmi	fe0e1ea8 <__bss_start+0x7c0e0c1c>
 1e0:	be64d72f 	cdplt	7, 6, cr13, cr4, cr15, {1}
 1e4:	0267872f 	rsbeq	r8, r7, #12320768	; 0xbc0000
 1e8:	4f67134a 	svcmi	0x0067134a
 1ec:	4b4b83a1 	blmi	12e1078 <shift+0x12e1078>
 1f0:	08672f4b 	stmdaeq	r7!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}^
 1f4:	67e608c9 	strbvs	r0, [r6, r9, asr #17]!
 1f8:	02133202 	andseq	r3, r3, #536870912	; 0x20000000
 1fc:	02671434 	rsbeq	r1, r7, #52, 8	; 0x34000000
 200:	75031326 	strvc	r1, [r3, #-806]	; 0x326
 204:	00012602 	andeq	r2, r1, r2, lsl #12
 208:	06010402 	streq	r0, [r1], -r2, lsl #8
 20c:	11030666 	tstne	r3, r6, ror #12
 210:	67676766 	strbvs	r6, [r7, -r6, ror #14]!
 214:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 218:	a14f6767 	cmpge	pc, r7, ror #14
 21c:	69a39f2f 	stmibvs	r3!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}
 220:	0a02832f 	beq	a0ee4 <shift+0xa0ee4>
 224:	3d010100 	stfccs	f0, [r1, #-0]
 228:	02000001 	andeq	r0, r0, #1
 22c:	00001e00 	andeq	r1, r0, r0, lsl #28
 230:	fb010200 	blx	40a3a <shift+0x40a3a>
 234:	01000d0e 	tsteq	r0, lr, lsl #26
 238:	00010101 	andeq	r0, r1, r1, lsl #2
 23c:	00010000 	andeq	r0, r1, r0
 240:	70000100 	andvc	r0, r0, r0, lsl #2
 244:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 248:	0000632e 	andeq	r6, r0, lr, lsr #6
 24c:	00000000 	andeq	r0, r0, r0
 250:	0a200205 	beq	800a6c <shift+0x800a6c>
 254:	10038200 	andne	r8, r3, r0, lsl #4
 258:	9f679f01 	svcls	0x00679f01
 25c:	d74f4bbc 			; <UNDEFINED> instruction: 0xd74f4bbc
 260:	0030674c 	eorseq	r6, r0, ip, asr #14
 264:	4b030402 	blmi	c1274 <shift+0xc1274>
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 270:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 274:	67686768 	strbvs	r6, [r8, -r8, ror #14]!
 278:	00833083 	addeq	r3, r3, r3, lsl #1
 27c:	2f020402 	svccs	0x00020402
 280:	02040200 	andeq	r0, r4, #0, 4
 284:	04020067 	streq	r0, [r2], #-103	; 0x67
 288:	02002c02 	andeq	r2, r0, #512	; 0x200
 28c:	66060104 	strvs	r0, [r6], -r4, lsl #2
 290:	02006b06 	andeq	r6, r0, #6144	; 0x1800
 294:	002f0204 	eoreq	r0, pc, r4, lsl #4
 298:	9f020402 	svcls	0x00020402
 29c:	02040200 	andeq	r0, r4, #0, 4
 2a0:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 2a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2a8:	04020086 	streq	r0, [r2], #-134	; 0x86
 2ac:	02002f02 	andeq	r2, r0, #2, 30
 2b0:	00670204 	rsbeq	r0, r7, r4, lsl #4
 2b4:	2c020402 	cfstrscs	mvf0, [r2], {2}
 2b8:	01040200 	mrseq	r0, R12_usr
 2bc:	6b066606 	blvs	199adc <shift+0x199adc>
 2c0:	4bd96c2f 	blmi	ff65b384 <__bss_start+0x7d65a0f8>
 2c4:	4b4b6730 	blmi	12d9f8c <shift+0x12d9f8c>
 2c8:	040200d9 	streq	r0, [r2], #-217	; 0xd9
 2cc:	00660601 	rsbeq	r0, r6, r1, lsl #12
 2d0:	66020402 	strvs	r0, [r2], -r2, lsl #8
 2d4:	692f6706 	stmdbvs	pc!, {r1, r2, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
 2d8:	bb2f4c4b 	bllt	bd340c <shift+0xbd340c>
 2dc:	b59f674b 	ldrlt	r6, [pc, #1867]	; a2f <shift+0xa2f>
 2e0:	02004b52 	andeq	r4, r0, #83968	; 0x14800
 2e4:	66060104 	strvs	r0, [r6], -r4, lsl #2
 2e8:	2f678306 	svccs	0x00678306
 2ec:	02006a84 	andeq	r6, r0, #132, 20	; 0x84000
 2f0:	6bd70104 	blvs	ff5c0708 <__bss_start+0x7d5bf47c>
 2f4:	2fa12fa0 	svccs	0x00a12fa0
 2f8:	674b2f67 	strbvs	r2, [fp, -r7, ror #30]
 2fc:	672f672f 	strvs	r6, [pc, -pc, lsr #14]!
 300:	2f2f302f 	svccs	0x002f302f
 304:	02006a2c 	andeq	r6, r0, #44, 20	; 0x2c000
 308:	002f0304 	eoreq	r0, pc, r4, lsl #6
 30c:	83030402 	movwhi	r0, #13314	; 0x3402
 310:	03040200 	movweq	r0, #16896	; 0x4200
 314:	04020064 	streq	r0, [r2], #-100	; 0x64
 318:	002e0601 	eoreq	r0, lr, r1, lsl #12
 31c:	66020402 	strvs	r0, [r2], -r2, lsl #8
 320:	83676a06 	cmnhi	r7, #24576	; 0x6000
 324:	01040200 	mrseq	r0, R12_usr
 328:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 32c:	004a0204 	subeq	r0, sl, r4, lsl #4
 330:	4a040402 	bmi	101340 <shift+0x101340>
 334:	04040200 	streq	r0, [r4], #-512	; 0x200
 338:	6730bb06 	ldrvs	fp, [r0, -r6, lsl #22]!
 33c:	6730ad08 	ldrvs	sl, [r0, -r8, lsl #26]!
 340:	6730ad08 	ldrvs	sl, [r0, -r8, lsl #26]!
 344:	6730ad08 	ldrvs	sl, [r0, -r8, lsl #26]!
 348:	6830ad08 	ldmdavs	r0!, {r3, r8, sl, fp, sp, pc}
 34c:	32d74bbb 	sbcscc	r4, r7, #191488	; 0x2ec00
 350:	2e4d0383 	cdpcs	3, 4, cr0, cr13, cr3, {4}
 354:	01040200 	mrseq	r0, R12_usr
 358:	03062e06 	movweq	r2, #28166	; 0x6e06
 35c:	83676636 	cmnhi	r7, #56623104	; 0x3600000
 360:	024b6b2f 	subeq	r6, fp, #48128	; 0xbc00
 364:	01010006 	tsteq	r1, r6
 368:	000000d7 	ldrdeq	r0, [r0], -r7
 36c:	009e0002 	addseq	r0, lr, r2
 370:	01020000 	mrseq	r0, (UNDEF: 2)
 374:	000d0efb 	strdeq	r0, [sp], -fp
 378:	01010101 	tsteq	r1, r1, lsl #2
 37c:	01000000 	mrseq	r0, (UNDEF: 0)
 380:	2f010000 	svccs	0x00010000
 384:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 388:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 38c:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 390:	2f657661 	svccs	0x00657661
 394:	6b726f77 	blvs	1c9c178 <shift+0x1c9c178>
 398:	63617073 	cmnvs	r1, #115	; 0x73
 39c:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 3a0:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 3a4:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 3a8:	2f657361 	svccs	0x00657361
 3ac:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 3b0:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 3b4:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 3b8:	61742f72 	cmnvs	r4, r2, ror pc
 3bc:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 3c0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 3c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3c8:	6e732f69 	cdpvs	15, 7, cr2, cr3, cr9, {3}
 3cc:	68737061 	ldmdavs	r3!, {r0, r5, r6, ip, sp, lr}^
 3d0:	2f73746f 	svccs	0x0073746f
 3d4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 3d8:	616e696c 	cmnvs	lr, ip, ror #18
 3dc:	342d6f72 	strtcc	r6, [sp], #-3954	; 0xf72
 3e0:	322d392e 	eorcc	r3, sp, #753664	; 0xb8000
 3e4:	2e353130 	mrccs	1, 1, r3, cr5, cr0, {1}
 3e8:	332d3130 	teqcc	sp, #48, 2
 3ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 3f0:	2f636367 	svccs	0x00636367
 3f4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 3f8:	612f6769 	teqvs	pc, r9, ror #14
 3fc:	00006d72 	andeq	r6, r0, r2, ror sp
 400:	3162696c 	cmncc	r2, ip, ror #18
 404:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 408:	00532e73 	subseq	r2, r3, r3, ror lr
 40c:	00000001 	andeq	r0, r0, r1
 410:	24020500 	strcs	r0, [r2], #-1280	; 0x500
 414:	03820010 	orreq	r0, r2, #16
 418:	300107cf 	andcc	r0, r1, pc, asr #15
 41c:	2f2f2f2f 	svccs	0x002f2f2f
 420:	7ce0032f 	stclvc	3, cr0, [r0], #188	; 0xbc
 424:	03a4032e 			; <UNDEFINED> instruction: 0x03a4032e
 428:	0101d002 	tsteq	r1, r2
 42c:	2f2f312f 	svccs	0x002f312f
 430:	322f4c30 	eorcc	r4, pc, #48, 24	; 0x3000
 434:	2f661603 	svccs	0x00661603
 438:	2f2f2f2f 	svccs	0x002f2f2f
 43c:	02022f2f 	andeq	r2, r2, #47, 30	; 0xbc
 440:	b4010100 	strlt	r0, [r1], #-256	; 0x100
 444:	02000000 	andeq	r0, r0, #0
 448:	00009e00 	andeq	r9, r0, r0, lsl #28
 44c:	fb010200 	blx	40c56 <shift+0x40c56>
 450:	01000d0e 	tsteq	r0, lr, lsl #26
 454:	00010101 	andeq	r0, r1, r1, lsl #2
 458:	00010000 	andeq	r0, r1, r0
 45c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
 460:	2f656d6f 	svccs	0x00656d6f
 464:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 468:	616c7364 	cmnvs	ip, r4, ror #6
 46c:	772f6576 			; <UNDEFINED> instruction: 0x772f6576
 470:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 474:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
 478:	6e69422f 	cdpvs	2, 6, cr4, cr9, cr15, {1}
 47c:	52797261 	rsbspl	r7, r9, #268435462	; 0x10000006
 480:	61656c65 	cmnvs	r5, r5, ror #24
 484:	6c2f6573 	cfstr32vs	mvfx6, [pc], #-460	; 2c0 <shift+0x2c0>
 488:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 48c:	7465682f 	strbtvc	r6, [r5], #-2095	; 0x82f
 490:	72656e7a 	rsbvc	r6, r5, #1952	; 0x7a0
 494:	7261742f 	rsbvc	r7, r1, #788529152	; 0x2f000000
 498:	2f746567 	svccs	0x00746567
 49c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4a4:	616e732f 	cmnvs	lr, pc, lsr #6
 4a8:	6f687370 	svcvs	0x00687370
 4ac:	672f7374 			; <UNDEFINED> instruction: 0x672f7374
 4b0:	6c2d6363 	stcvs	3, cr6, [sp], #-396	; 0xfffffe74
 4b4:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 4b8:	2e342d6f 	cdpcs	13, 3, cr2, cr4, cr15, {3}
 4bc:	30322d39 	eorscc	r2, r2, r9, lsr sp
 4c0:	302e3531 	eorcc	r3, lr, r1, lsr r5
 4c4:	2f332d31 	svccs	0x00332d31
 4c8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
 4cc:	632f6363 	teqvs	pc, #-1946157055	; 0x8c000001
 4d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 4d4:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
 4d8:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
 4dc:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
 4e0:	73636e75 	cmnvc	r3, #1872	; 0x750
 4e4:	0100532e 	tsteq	r0, lr, lsr #6
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	12300205 	eorsne	r0, r0, #1342177280	; 0x50000000
 4f0:	96038200 	strls	r8, [r3], -r0, lsl #4
 4f4:	0202010a 	andeq	r0, r2, #-2147483646	; 0x80000002
 4f8:	Address 0x00000000000004f8 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000045 	andeq	r0, r0, r5, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	8200005c 	andhi	r0, r0, #92	; 0x5c
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	00532e74 	subseq	r2, r3, r4, ror lr
  20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff6c <__bss_start+0x7dffece0>
  24:	31732f65 	cmncc	r3, r5, ror #30
  28:	31313133 	teqcc	r1, r3, lsr r1
  2c:	652f3632 	strvs	r3, [pc, #-1586]!	; fffffa02 <__bss_start+0x7dffe776>
  30:	6c2f3173 	stfvss	f3, [pc], #-460	; fffffe6c <__bss_start+0x7dffebe0>
  34:	34306261 	ldrtcc	r6, [r0], #-609	; 0x261
  38:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  3c:	20534120 	subscs	r4, r3, r0, lsr #2
  40:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
  44:	0100302e 	tsteq	r0, lr, lsr #32
  48:	00008780 	andeq	r8, r0, r0, lsl #15
  4c:	14000400 	strne	r0, [r0], #-1024	; 0x400
  50:	04000000 	streq	r0, [r0], #-0
  54:	00000001 	andeq	r0, r0, r1
  58:	006b0100 	rsbeq	r0, fp, r0, lsl #2
  5c:	00860000 	addeq	r0, r6, r0
  60:	005c0000 	subseq	r0, ip, r0
  64:	00ac8200 	adceq	r8, ip, r0, lsl #4
  68:	00470000 	subeq	r0, r7, r0
  6c:	9f020000 	svcls	0x00020000
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00003a0d 	andeq	r3, r0, sp, lsl #20
  78:	00005c00 	andeq	r5, r0, r0, lsl #24
  7c:	00006882 	andeq	r6, r0, r2, lsl #17
  80:	039c0100 	orrseq	r0, ip, #0, 2
  84:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  88:	78040074 	stmdavc	r4, {r2, r4, r5, r6}
  8c:	01000000 	mrseq	r0, (UNDEF: 0)
  90:	0000c41b 	andeq	ip, r0, fp, lsl r4
  94:	00004482 	andeq	r4, r0, r2, lsl #9
  98:	7d9c0100 	ldfvcs	f0, [ip]
  9c:	05000000 	streq	r0, [r0, #-0]
  a0:	1b010078 	blne	40288 <shift+0x40288>
  a4:	0000003a 	andeq	r0, r0, sl, lsr r0
  a8:	05749102 	ldrbeq	r9, [r4, #-258]!	; 0x102
  ac:	1b010079 	blne	40298 <shift+0x40298>
  b0:	0000003a 	andeq	r0, r0, sl, lsr r0
  b4:	05709102 	ldrbeq	r9, [r0, #-258]!	; 0x102
  b8:	00727473 	rsbseq	r7, r2, r3, ror r4
  bc:	007d1b01 	rsbseq	r1, sp, r1, lsl #22
  c0:	91020000 	mrsls	r0, (UNDEF: 2)
  c4:	0406006c 	streq	r0, [r6], #-108	; 0x6c
  c8:	00000083 	andeq	r0, r0, r3, lsl #1
  cc:	8f080107 	svchi	0x00080107
  d0:	00000001 	andeq	r0, r0, r1
  d4:	0000030b 	andeq	r0, r0, fp, lsl #6
  d8:	008a0004 	addeq	r0, sl, r4
  dc:	01040000 	mrseq	r0, (UNDEF: 4)
  e0:	00000000 	andeq	r0, r0, r0
  e4:	00013001 	andeq	r3, r1, r1
  e8:	00008600 	andeq	r8, r0, r0, lsl #12
  ec:	00010800 	andeq	r0, r1, r0, lsl #16
  f0:	00091882 	andeq	r1, r9, r2, lsl #17
  f4:	00008e00 	andeq	r8, r0, r0, lsl #28
  f8:	00f50200 	rscseq	r0, r5, r0, lsl #4
  fc:	17010000 	strne	r0, [r1, -r0]
 100:	0000004b 	andeq	r0, r0, fp, asr #32
 104:	82000108 	andhi	r0, r0, #8, 2
 108:	00000054 	andeq	r0, r0, r4, asr r0
 10c:	004b9c01 	subeq	r9, fp, r1, lsl #24
 110:	63030000 	movwvs	r0, #12288	; 0x3000
 114:	52190100 	andspl	r0, r9, #0, 2
 118:	02000000 	andeq	r0, r0, #0
 11c:	04007491 	streq	r7, [r0], #-1169	; 0x491
 120:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 124:	04050074 	streq	r0, [r5], #-116	; 0x74
 128:	0000a407 	andeq	sl, r0, r7, lsl #8
 12c:	00e30200 	rsceq	r0, r3, r0, lsl #4
 130:	26010000 	strcs	r0, [r1], -r0
 134:	0000004b 	andeq	r0, r0, fp, asr #32
 138:	8200015c 	andhi	r0, r0, #92, 2
 13c:	00000038 	andeq	r0, r0, r8, lsr r0
 140:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
 144:	63030000 	movwvs	r0, #12288	; 0x3000
 148:	52280100 	eorpl	r0, r8, #0, 2
 14c:	02000000 	andeq	r0, r0, #0
 150:	02007491 	andeq	r7, r0, #-1862270976	; 0x91000000
 154:	0000011c 	andeq	r0, r0, ip, lsl r1
 158:	00523301 	subseq	r3, r2, r1, lsl #6
 15c:	01940000 	orrseq	r0, r4, r0
 160:	02a88200 	adceq	r8, r8, #0, 4
 164:	9c010000 	stcls	0, cr0, [r1], {-0}
 168:	000000c1 	andeq	r0, r0, r1, asr #1
 16c:	0000b106 	andeq	fp, r0, r6, lsl #2
 170:	52350100 	eorspl	r0, r5, #0, 2
 174:	02000000 	andeq	r0, r0, #0
 178:	68037491 	stmdavs	r3, {r0, r4, r7, sl, ip, sp, lr}
 17c:	01007865 	tsteq	r0, r5, ror #16
 180:	00005236 	andeq	r5, r0, r6, lsr r2
 184:	70910200 	addsvc	r0, r1, r0, lsl #4
 188:	01006903 	tsteq	r0, r3, lsl #18
 18c:	00004b37 	andeq	r4, r0, r7, lsr fp
 190:	6c910200 	lfmvs	f0, 4, [r1], {0}
 194:	01370200 	teqeq	r7, r0, lsl #4
 198:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 19c:	0000010d 	andeq	r0, r0, sp, lsl #2
 1a0:	8200043c 	andhi	r0, r0, #60, 8	; 0x3c000000
 1a4:	000000d8 	ldrdeq	r0, [r0], -r8
 1a8:	010d9c01 	tsteq	sp, r1, lsl #24
 1ac:	73070000 	movwvc	r0, #28672	; 0x7000
 1b0:	01007274 	tsteq	r0, r4, ror r2
 1b4:	00010d5e 	andeq	r0, r1, lr, asr sp
 1b8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 1bc:	01006a03 	tsteq	r0, r3, lsl #20
 1c0:	00004b60 	andeq	r4, r0, r0, ror #22
 1c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1c8:	01006903 	tsteq	r0, r3, lsl #18
 1cc:	00004b61 	andeq	r4, r0, r1, ror #22
 1d0:	70910200 	addsvc	r0, r1, r0, lsl #4
 1d4:	01007103 	tsteq	r0, r3, lsl #2
 1d8:	00004b62 	andeq	r4, r0, r2, ror #22
 1dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1e0:	13040800 	movwne	r0, #18432	; 0x4800
 1e4:	05000001 	streq	r0, [r0, #-1]
 1e8:	018f0801 	orreq	r0, pc, r1, lsl #16
 1ec:	41090000 	mrsmi	r0, (UNDEF: 9)
 1f0:	01000001 	tsteq	r0, r1
 1f4:	00004b78 	andeq	r4, r0, r8, ror fp
 1f8:	00051400 	andeq	r1, r5, r0, lsl #8
 1fc:	0000a482 	andeq	sl, r0, r2, lsl #9
 200:	409c0100 	addsmi	r0, ip, r0, lsl #2
 204:	07000001 	streq	r0, [r0, -r1]
 208:	78010063 	stmdavc	r1, {r0, r1, r5, r6}
 20c:	0000004b 	andeq	r0, r0, fp, asr #32
 210:	00749102 	rsbseq	r9, r4, r2, lsl #2
 214:	00017309 	andeq	r7, r1, r9, lsl #6
 218:	4b8f0100 	blmi	fe3c0620 <__bss_start+0x7c3bf394>
 21c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 220:	70820005 	addvc	r0, r2, r5
 224:	01000000 	mrseq	r0, (UNDEF: 0)
 228:	0001729c 	muleq	r1, ip, r2
 22c:	00730700 	rsbseq	r0, r3, r0, lsl #14
 230:	01728f01 	cmneq	r2, r1, lsl #30
 234:	91020000 	mrsls	r0, (UNDEF: 2)
 238:	0069036c 	rsbeq	r0, r9, ip, ror #6
 23c:	004b9101 	subeq	r9, fp, r1, lsl #2
 240:	91020000 	mrsls	r0, (UNDEF: 2)
 244:	04080074 	streq	r0, [r8], #-116	; 0x74
 248:	00000178 	andeq	r0, r0, r8, ror r1
 24c:	0001130a 	andeq	r1, r1, sl, lsl #6
 250:	01550b00 	cmpeq	r5, r0, lsl #22
 254:	9b010000 	blls	4025c <shift+0x4025c>
 258:	82000628 	andhi	r0, r0, #40, 12	; 0x2800000
 25c:	000000b4 	strheq	r0, [r0], -r4
 260:	01a19c01 			; <UNDEFINED> instruction: 0x01a19c01
 264:	6a060000 	bvs	18026c <shift+0x18026c>
 268:	01000001 	tsteq	r0, r1
 26c:	0001a19d 	muleq	r1, sp, r1
 270:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 274:	01130c00 	tsteq	r3, r0, lsl #24
 278:	01b10000 			; <UNDEFINED> instruction: 0x01b10000
 27c:	b10d0000 	mrslt	r0, (UNDEF: 13)
 280:	13000001 	movwne	r0, #1
 284:	07040500 	streq	r0, [r4, -r0, lsl #10]
 288:	00000113 	andeq	r0, r0, r3, lsl r1
 28c:	00014b0b 	andeq	r4, r1, fp, lsl #22
 290:	dca30100 	stfles	f0, [r3]
 294:	d0820006 	addle	r0, r2, r6
 298:	01000002 	tsteq	r0, r2
 29c:	0002389c 	muleq	r2, ip, r8
 2a0:	00780700 	rsbseq	r0, r8, r0, lsl #14
 2a4:	004ba301 	subeq	sl, fp, r1, lsl #6
 2a8:	91020000 	mrsls	r0, (UNDEF: 2)
 2ac:	0079075c 	rsbseq	r0, r9, ip, asr r7
 2b0:	004ba301 	subeq	sl, fp, r1, lsl #6
 2b4:	91020000 	mrsls	r0, (UNDEF: 2)
 2b8:	01280658 	teqeq	r8, r8, asr r6
 2bc:	a5010000 	strge	r0, [r1, #-0]
 2c0:	00000238 	andeq	r0, r0, r8, lsr r2
 2c4:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 2c8:	000000b6 	strheq	r0, [r0], -r6
 2cc:	0238a601 	eorseq	sl, r8, #1048576	; 0x100000
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	01050668 	tsteq	r5, r8, ror #12
 2d8:	a7010000 	strge	r0, [r1, -r0]
 2dc:	00000248 	andeq	r0, r0, r8, asr #4
 2e0:	06609102 	strbteq	r9, [r0], -r2, lsl #2
 2e4:	00000160 	andeq	r0, r0, r0, ror #2
 2e8:	0113a801 	tsteq	r3, r1, lsl #16
 2ec:	91020000 	mrsls	r0, (UNDEF: 2)
 2f0:	6e650373 	mcrvs	3, 3, r0, cr5, cr3, {3}
 2f4:	a9010064 	stmdbge	r1, {r2, r5, r6}
 2f8:	00000113 	andeq	r0, r0, r3, lsl r1
 2fc:	03729102 	cmneq	r2, #-2147483648	; 0x80000000
 300:	aa010069 	bge	404ac <shift+0x404ac>
 304:	0000004b 	andeq	r0, r0, fp, asr #32
 308:	00749102 	rsbseq	r9, r4, r2, lsl #2
 30c:	0001130c 	andeq	r1, r1, ip, lsl #6
 310:	00024800 	andeq	r4, r2, r0, lsl #16
 314:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
 318:	00020000 	andeq	r0, r2, r0
 31c:	0001130c 	andeq	r1, r1, ip, lsl #6
 320:	00025800 	andeq	r5, r2, r0, lsl #16
 324:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
 328:	00040000 	andeq	r0, r4, r0
 32c:	0000ca02 	andeq	ip, r0, r2, lsl #20
 330:	4bc90100 	blmi	ff240738 <__bss_start+0x7d23f4ac>
 334:	ac000000 	stcge	0, cr0, [r0], {-0}
 338:	40820009 	addmi	r0, r2, r9
 33c:	01000000 	mrseq	r0, (UNDEF: 0)
 340:	0002b69c 	muleq	r2, ip, r6
 344:	756f0700 	strbvc	r0, [pc, #-1792]!	; fffffc4c <__bss_start+0x7dffe9c0>
 348:	c9010074 	stmdbgt	r1, {r2, r4, r5, r6}
 34c:	0000010d 	andeq	r0, r0, sp, lsl #2
 350:	0e649102 	lgneqs	f1, f2
 354:	000000d7 	ldrdeq	r0, [r0], -r7
 358:	0172c901 	cmneq	r2, r1, lsl #18
 35c:	91020000 	mrsls	r0, (UNDEF: 2)
 360:	ff100f74 			; <UNDEFINED> instruction: 0xff100f74
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	00004bcb 	andeq	r4, r0, fp, asr #23
 36c:	0002a800 	andeq	sl, r2, r0, lsl #16
 370:	02b61100 	adcseq	r1, r6, #0, 2
 374:	bc110000 	ldclt	0, cr0, [r1], {-0}
 378:	00000002 	andeq	r0, r0, r2
 37c:	0000de06 	andeq	sp, r0, r6, lsl #28
 380:	bccd0100 	stflte	f0, [sp], {0}
 384:	01000002 	tsteq	r0, r2
 388:	04080054 	streq	r0, [r8], #-84	; 0x54
 38c:	0000010d 	andeq	r0, r0, sp, lsl #2
 390:	004b0408 	subeq	r0, fp, r8, lsl #8
 394:	be120000 	cdplt	0, 1, cr0, cr2, cr0, {0}
 398:	01000000 	mrseq	r0, (UNDEF: 0)
 39c:	00004bd3 	ldrdeq	r4, [r0], -r3
 3a0:	0009ec00 	andeq	lr, r9, r0, lsl #24
 3a4:	00003482 	andeq	r3, r0, r2, lsl #9
 3a8:	0e9c0100 	fmleqe	f0, f4, f0
 3ac:	000000d7 	ldrdeq	r0, [r0], -r7
 3b0:	0172d301 	cmneq	r2, r1, lsl #6
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	ff100f70 			; <UNDEFINED> instruction: 0xff100f70
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	00004bd5 	ldrdeq	r4, [r0], -r5
 3c4:	00030000 	andeq	r0, r3, r0
 3c8:	02b61100 	adcseq	r1, r6, #0, 2
 3cc:	bc110000 	ldclt	0, cr0, [r1], {-0}
 3d0:	00000002 	andeq	r0, r0, r2
 3d4:	0000de06 	andeq	sp, r0, r6, lsl #28
 3d8:	bcd70100 	ldflte	f0, [r7], {0}
 3dc:	01000002 	tsteq	r0, r2
 3e0:	a1000054 	qaddge	r0, r4, r0
 3e4:	04000002 	streq	r0, [r0], #-2
 3e8:	00019f00 	andeq	r9, r1, r0, lsl #30
 3ec:	00010400 	andeq	r0, r1, r0, lsl #8
 3f0:	01000000 	mrseq	r0, (UNDEF: 0)
 3f4:	000001a8 	andeq	r0, r0, r8, lsr #3
 3f8:	00000086 	andeq	r0, r0, r6, lsl #1
 3fc:	82000a20 	andhi	r0, r0, #32, 20	; 0x20000
 400:	00000604 	andeq	r0, r0, r4, lsl #12
 404:	00000227 	andeq	r0, r0, r7, lsr #4
 408:	00019402 	andeq	r9, r1, r2, lsl #8
 40c:	20100100 	andscs	r0, r0, r0, lsl #2
 410:	5c82000a 	stcpl	0, cr0, [r2], {10}
 414:	01000000 	mrseq	r0, (UNDEF: 0)
 418:	0000559c 	muleq	r0, ip, r5
 41c:	74730300 	ldrbtvc	r0, [r3], #-768	; 0x300
 420:	10010072 	andne	r0, r1, r2, ror r0
 424:	00000055 	andeq	r0, r0, r5, asr r0
 428:	03749102 	cmneq	r4, #-2147483648	; 0x80000000
 42c:	10010063 	andne	r0, r1, r3, rrx
 430:	00000068 	andeq	r0, r0, r8, rrx
 434:	00709102 	rsbseq	r9, r0, r2, lsl #2
 438:	005b0404 	subseq	r0, fp, r4, lsl #8
 43c:	04040000 	streq	r0, [r4], #-0
 440:	00000061 	andeq	r0, r0, r1, rrx
 444:	8f080105 	svchi	0x00080105
 448:	06000001 	streq	r0, [r0], -r1
 44c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 450:	c3070074 	movwgt	r0, #28788	; 0x7074
 454:	01000001 	tsteq	r0, r1
 458:	0000681b 	andeq	r6, r0, fp, lsl r8
 45c:	000a7c00 	andeq	r7, sl, r0, lsl #24
 460:	00013882 	andeq	r3, r1, r2, lsl #17
 464:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
 468:	03000000 	movweq	r0, #0
 46c:	0074756f 	rsbseq	r7, r4, pc, ror #10
 470:	00551b01 	subseq	r1, r5, r1, lsl #22
 474:	91020000 	mrsls	r0, (UNDEF: 2)
 478:	01850864 	orreq	r0, r5, r4, ror #16
 47c:	1b010000 	blne	40484 <shift+0x40484>
 480:	000000fe 	strdeq	r0, [r0], -lr
 484:	08609102 	stmdaeq	r0!, {r1, r8, ip, pc}^
 488:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 48c:	00681b01 	rsbeq	r1, r8, r1, lsl #22
 490:	91020000 	mrsls	r0, (UNDEF: 2)
 494:	6170035c 	cmnvs	r0, ip, asr r3
 498:	1b010064 	blne	40630 <shift+0x40630>
 49c:	00000068 	andeq	r0, r0, r8, rrx
 4a0:	09589102 	ldmdbeq	r8, {r1, r8, ip, pc}^
 4a4:	01006370 	tsteq	r0, r0, ror r3
 4a8:	0000681d 	andeq	r6, r0, sp, lsl r8
 4ac:	0a540100 	beq	15008b4 <shift+0x15008b4>
 4b0:	0000018c 	andeq	r0, r0, ip, lsl #3
 4b4:	00681d01 	rsbeq	r1, r8, r1, lsl #26
 4b8:	57010000 	strpl	r0, [r1, -r0]
 4bc:	000aac0b 	andeq	sl, sl, fp, lsl #24
 4c0:	00005882 	andeq	r5, r0, r2, lsl #17
 4c4:	656c0900 	strbvs	r0, [ip, #-2304]!	; 0x900
 4c8:	2001006e 	andcs	r0, r1, lr, rrx
 4cc:	00000068 	andeq	r0, r0, r8, rrx
 4d0:	70095501 	andvc	r5, r9, r1, lsl #10
 4d4:	01007274 	tsteq	r0, r4, ror r2
 4d8:	0000fe21 	andeq	pc, r0, r1, lsr #28
 4dc:	00560100 	subseq	r0, r6, r0, lsl #2
 4e0:	04040400 	streq	r0, [r4], #-1024	; 0x400
 4e4:	0c000001 	stceq	0, cr0, [r0], {1}
 4e8:	00000061 	andeq	r0, r0, r1, rrx
 4ec:	0001b607 	andeq	fp, r1, r7, lsl #12
 4f0:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
 4f4:	b4000000 	strlt	r0, [r0], #-0
 4f8:	8082000b 	addhi	r0, r2, fp
 4fc:	01000001 	tsteq	r0, r1
 500:	0001c89c 	muleq	r1, ip, r8
 504:	756f0300 	strbvc	r0, [pc, #-768]!	; 20c <shift+0x20c>
 508:	3f010074 	svccc	0x00010074
 50c:	00000055 	andeq	r0, r0, r5, asr r0
 510:	034c9102 	movteq	r9, #49410	; 0xc102
 514:	3f010069 	svccc	0x00010069
 518:	00000068 	andeq	r0, r0, r8, rrx
 51c:	03489102 	movteq	r9, #33026	; 0x8102
 520:	3f010062 	svccc	0x00010062
 524:	00000068 	andeq	r0, r0, r8, rrx
 528:	03449102 	movteq	r9, #16642	; 0x4102
 52c:	01006773 	tsteq	r0, r3, ror r7
 530:	0000683f 	andeq	r6, r0, pc, lsr r8
 534:	40910200 	addsmi	r0, r1, r0, lsl #4
 538:	0001b008 	andeq	fp, r1, r8
 53c:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
 540:	02000000 	andeq	r0, r0, #0
 544:	70030091 	mulvc	r3, r1, r0
 548:	01006461 	tsteq	r0, r1, ror #8
 54c:	0000683f 	andeq	r6, r0, pc, lsr r8
 550:	04910200 	ldreq	r0, [r1], #512	; 0x200
 554:	00017d08 	andeq	r7, r1, r8, lsl #26
 558:	68400100 	stmdavs	r0, {r8}^
 55c:	02000000 	andeq	r0, r0, #0
 560:	9e0a0891 	mcrls	8, 0, r0, cr10, cr1, {4}
 564:	01000001 	tsteq	r0, r1
 568:	0001c842 	andeq	ip, r1, r2, asr #16
 56c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 570:	01007309 	tsteq	r0, r9, lsl #6
 574:	00005b43 	andeq	r5, r0, r3, asr #22
 578:	09540100 	ldmdbeq	r4, {r8}^
 57c:	44010074 	strmi	r0, [r1], #-116	; 0x74
 580:	00000068 	andeq	r0, r0, r8, rrx
 584:	6e095601 	cfmadd32vs	mvax0, mvfx5, mvfx9, mvfx1
 588:	01006765 	tsteq	r0, r5, ror #14
 58c:	00006844 	andeq	r6, r0, r4, asr #16
 590:	09580100 	ldmdbeq	r8, {r8}^
 594:	01006370 	tsteq	r0, r0, ror r3
 598:	00006844 	andeq	r6, r0, r4, asr #16
 59c:	09550100 	ldmdbeq	r5, {r8}^
 5a0:	45010075 	strmi	r0, [r1, #-117]	; 0x75
 5a4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 5a8:	0d005701 	stceq	7, cr5, [r0, #-4]
 5ac:	00000061 	andeq	r0, r0, r1, rrx
 5b0:	000001d8 	ldrdeq	r0, [r0], -r8
 5b4:	0001d80e 	andeq	sp, r1, lr, lsl #16
 5b8:	05000b00 	streq	r0, [r0, #-2816]	; 0xb00
 5bc:	01130704 	tsteq	r3, r4, lsl #14
 5c0:	04050000 	streq	r0, [r5], #-0
 5c4:	0000a407 	andeq	sl, r0, r7, lsl #8
 5c8:	00ff0700 	rscseq	r0, pc, r0, lsl #14
 5cc:	6c010000 	stcvs	0, cr0, [r1], {-0}
 5d0:	00000068 	andeq	r0, r0, r8, rrx
 5d4:	82000d34 	andhi	r0, r0, #52, 26	; 0xd00
 5d8:	000002dc 	ldrdeq	r0, [r0], -ip
 5dc:	027d9c01 	rsbseq	r9, sp, #256	; 0x100
 5e0:	6f030000 	svcvs	0x00030000
 5e4:	01007475 	tsteq	r0, r5, ror r4
 5e8:	0000556c 	andeq	r5, r0, ip, ror #10
 5ec:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 5f0:	0000de08 	andeq	sp, r0, r8, lsl #28
 5f4:	7d6c0100 	stfvce	f0, [ip, #-0]
 5f8:	02000002 	andeq	r0, r0, #2
 5fc:	b00a5091 	mullt	sl, r1, r0
 600:	01000001 	tsteq	r0, r1
 604:	0000686e 	andeq	r6, r0, lr, ror #16
 608:	09560100 	ldmdbeq	r6, {r8}^
 60c:	00646170 	rsbeq	r6, r4, r0, ror r1
 610:	00686e01 	rsbeq	r6, r8, r1, lsl #28
 614:	57010000 	strpl	r0, [r1, -r0]
 618:	00637009 	rsbeq	r7, r3, r9
 61c:	00686f01 	rsbeq	r6, r8, r1, lsl #30
 620:	55010000 	strpl	r0, [r1, #-0]
 624:	0000d70a 	andeq	sp, r0, sl, lsl #14
 628:	5b700100 	blpl	1c00a30 <shift+0x1c00a30>
 62c:	01000000 	mrseq	r0, (UNDEF: 0)
 630:	63730954 	cmnvs	r3, #84, 18	; 0x150000
 634:	71010072 	tstvc	r1, r2, ror r0
 638:	00000283 	andeq	r0, r0, r3, lsl #5
 63c:	0f5c9102 	svceq	0x005c9102
 640:	0074756f 	rsbseq	r7, r4, pc, ror #10
 644:	0fc0a401 	svceq	0x00c0a401
 648:	100b8200 	andne	r8, fp, r0, lsl #4
 64c:	4482000e 	strmi	r0, [r2], #14
 650:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 654:	88010073 	stmdahi	r1, {r0, r1, r4, r5, r6}
 658:	0000005b 	andeq	r0, r0, fp, asr r0
 65c:	00005801 	andeq	r5, r0, r1, lsl #16
 660:	00680404 	rsbeq	r0, r8, r4, lsl #8
 664:	610d0000 	mrsvs	r0, (UNDEF: 13)
 668:	93000000 	movwls	r0, #0
 66c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 670:	000001d8 	ldrdeq	r0, [r0], -r8
 674:	bd100001 	ldclt	0, cr0, [r0, #-4]
 678:	01000001 	tsteq	r0, r1
 67c:	001010b0 	ldrheq	r1, [r0], -r0
 680:	00001482 	andeq	r1, r0, r2, lsl #9
 684:	009c0100 	addseq	r0, ip, r0, lsl #2
 688:	00000153 	andeq	r0, r0, r3, asr r1
 68c:	028b0002 	addeq	r0, fp, #2
 690:	01040000 	mrseq	r0, (UNDEF: 4)
 694:	00000368 	andeq	r0, r0, r8, ror #6
 698:	82001024 	andhi	r1, r0, #36	; 0x24
 69c:	82001230 	andhi	r1, r0, #48, 4
 6a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5ec <shift+0x5ec>
 6a4:	75622f65 	strbvc	r2, [r2, #-3941]!	; 0xf65
 6a8:	73646c69 	cmnvc	r4, #26880	; 0x6900
 6ac:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
 6b0:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
 6b4:	6170736b 	cmnvs	r0, fp, ror #6
 6b8:	422f6563 	eormi	r6, pc, #415236096	; 0x18c00000
 6bc:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 6c0:	6c655279 	sfmvs	f5, 2, [r5], #-484	; 0xfffffe1c
 6c4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
 6c8:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 6cc:	682f6c65 	stmdavs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 6d0:	6e7a7465 	cdpvs	4, 7, cr7, cr10, cr5, {3}
 6d4:	742f7265 	strtvc	r7, [pc], #-613	; 6dc <shift+0x6dc>
 6d8:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
 6dc:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 6e0:	61652d6d 	cmnvs	r5, sp, ror #26
 6e4:	732f6962 	teqvc	pc, #1605632	; 0x188000
 6e8:	7370616e 	cmnvc	r0, #-2147483621	; 0x8000001b
 6ec:	73746f68 	cmnvc	r4, #104, 30	; 0x1a0
 6f0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 6f4:	6e696c2d 	cdpvs	12, 6, cr6, cr9, cr13, {1}
 6f8:	2d6f7261 	sfmcs	f7, 2, [pc, #-388]!	; 57c <shift+0x57c>
 6fc:	2d392e34 	ldccs	14, cr2, [r9, #-208]!	; 0xffffff30
 700:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
 704:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
 708:	696c2f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, sp}^
 70c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
 710:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
 714:	2f676966 	svccs	0x00676966
 718:	2f6d7261 	svccs	0x006d7261
 71c:	3162696c 	cmncc	r2, ip, ror #18
 720:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 724:	00532e73 	subseq	r2, r3, r3, ror lr
 728:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 674 <shift+0x674>
 72c:	75622f65 	strbvc	r2, [r2, #-3941]!	; 0xf65
 730:	73646c69 	cmnvc	r4, #26880	; 0x6900
 734:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
 738:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
 73c:	6170736b 	cmnvs	r0, fp, ror #6
 740:	422f6563 	eormi	r6, pc, #415236096	; 0x18c00000
 744:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 748:	6c655279 	sfmvs	f5, 2, [r5], #-484	; 0xfffffe1c
 74c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
 750:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 754:	682f6c65 	stmdavs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 758:	6e7a7465 	cdpvs	4, 7, cr7, cr10, cr5, {3}
 75c:	742f7265 	strtvc	r7, [pc], #-613	; 764 <shift+0x764>
 760:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
 764:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 768:	61652d6d 	cmnvs	r5, sp, ror #26
 76c:	5f2f6962 	svcpl	0x002f6962
 770:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 774:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
 778:	73646c69 	cmnvc	r4, #26880	; 0x6900
 77c:	3638782f 	ldrtcc	r7, [r8], -pc, lsr #16
 780:	2d34365f 	ldccs	6, cr3, [r4, #-380]!	; 0xfffffe84
 784:	6e6b6e75 	mcrvs	14, 3, r6, cr11, cr5, {3}
 788:	2d6e776f 	stclcs	7, cr7, [lr, #-444]!	; 0xfffffe44
 78c:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0x96c
 790:	6e672d78 	mcrvs	13, 3, r2, cr7, cr8, {3}
 794:	72612f75 	rsbvc	r2, r1, #468	; 0x1d4
 798:	61652d6d 	cmnvs	r5, sp, ror #26
 79c:	672f6962 	strvs	r6, [pc, -r2, ror #18]!
 7a0:	6c2d6363 	stcvs	3, cr6, [sp], #-396	; 0xfffffe74
 7a4:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 7a8:	2e342d6f 	cdpcs	13, 3, cr2, cr4, cr15, {3}
 7ac:	30322d39 	eorscc	r2, r2, r9, lsr sp
 7b0:	302e3531 	eorcc	r3, lr, r1, lsr r5
 7b4:	2d332d31 	ldccs	13, cr2, [r3, #-196]!	; 0xffffff3c
 7b8:	67617473 			; <UNDEFINED> instruction: 0x67617473
 7bc:	612f3265 	teqvs	pc, r5, ror #4
 7c0:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 7c4:	2f696261 	svccs	0x00696261
 7c8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
 7cc:	47006363 	strmi	r6, [r0, -r3, ror #6]
 7d0:	4120554e 	teqmi	r0, lr, asr #10
 7d4:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
 7d8:	302e3432 	eorcc	r3, lr, r2, lsr r4
 7dc:	53800100 	orrpl	r0, r0, #0, 2
 7e0:	02000001 	andeq	r0, r0, #1
 7e4:	00029f00 	andeq	r9, r2, r0, lsl #30
 7e8:	43010400 	movwmi	r0, #5120	; 0x1400
 7ec:	30000004 	andcc	r0, r0, r4
 7f0:	34820012 	strcc	r0, [r2], #18
 7f4:	2f820012 	svccs	0x00820012
 7f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 7fc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 800:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 804:	2f657661 	svccs	0x00657661
 808:	6b726f77 	blvs	1c9c5ec <shift+0x1c9c5ec>
 80c:	63617073 	cmnvs	r1, #115	; 0x73
 810:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 814:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 818:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 81c:	2f657361 	svccs	0x00657361
 820:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 824:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 828:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 82c:	61742f72 	cmnvs	r4, r2, ror pc
 830:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 834:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 838:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 83c:	6e732f69 	cdpvs	15, 7, cr2, cr3, cr9, {3}
 840:	68737061 	ldmdavs	r3!, {r0, r5, r6, ip, sp, lr}^
 844:	2f73746f 	svccs	0x0073746f
 848:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 84c:	616e696c 	cmnvs	lr, ip, ror #18
 850:	342d6f72 	strtcc	r6, [sp], #-3954	; 0xf72
 854:	322d392e 	eorcc	r3, sp, #753664	; 0xb8000
 858:	2e353130 	mrccs	1, 1, r3, cr5, cr0, {1}
 85c:	332d3130 	teqcc	sp, #48, 2
 860:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 864:	2f636367 	svccs	0x00636367
 868:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 86c:	612f6769 	teqvs	pc, r9, ror #14
 870:	6c2f6d72 	stcvs	13, cr6, [pc], #-456	; 6b0 <shift+0x6b0>
 874:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
 878:	73636e75 	cmnvc	r3, #1872	; 0x750
 87c:	2f00532e 	svccs	0x0000532e
 880:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 884:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 888:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 88c:	2f657661 	svccs	0x00657661
 890:	6b726f77 	blvs	1c9c674 <shift+0x1c9c674>
 894:	63617073 	cmnvs	r1, #115	; 0x73
 898:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 89c:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 8a0:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 8a4:	2f657361 	svccs	0x00657361
 8a8:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 8ac:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 8b0:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 8b4:	61742f72 	cmnvs	r4, r2, ror pc
 8b8:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 8bc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 8c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 8c4:	625f2f69 	subsvs	r2, pc, #420	; 0x1a4
 8c8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 8cc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 8d0:	2f73646c 	svccs	0x0073646c
 8d4:	5f363878 	svcpl	0x00363878
 8d8:	752d3436 	strvc	r3, [sp, #-1078]!	; 0x436
 8dc:	6f6e6b6e 	svcvs	0x006e6b6e
 8e0:	6c2d6e77 	stcvs	14, cr6, [sp], #-476	; 0xfffffe24
 8e4:	78756e69 	ldmdavc	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 8e8:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0x72d
 8ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 8f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 8f4:	63672f69 	cmnvs	r7, #420	; 0x1a4
 8f8:	696c2d63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sl, fp, sp}^
 8fc:	6f72616e 	svcvs	0x0072616e
 900:	392e342d 	stmdbcc	lr!, {r0, r2, r3, r5, sl, ip, sp}
 904:	3130322d 	teqcc	r0, sp, lsr #4
 908:	31302e35 	teqcc	r0, r5, lsr lr
 90c:	732d332d 	teqvc	sp, #-1275068416	; 0xb4000000
 910:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
 914:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
 918:	61652d6d 	cmnvs	r5, sp, ror #26
 91c:	6c2f6962 	stcvs	9, cr6, [pc], #-392	; 79c <shift+0x79c>
 920:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
 924:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
 928:	53412055 	movtpl	r2, #4181	; 0x1055
 92c:	322e3220 	eorcc	r3, lr, #32, 4
 930:	00302e34 	eorseq	r2, r0, r4, lsr lr
 934:	Address 0x0000000000000934 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <shift+0x200c14>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  18:	030b130e 	movweq	r1, #45838	; 0xb30e
  1c:	110e1b0e 	tstne	lr, lr, lsl #22
  20:	10061201 	andne	r1, r6, r1, lsl #4
  24:	02000017 	andeq	r0, r0, #23
  28:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <shift+0xe83840>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	01111349 	tsteq	r1, r9, asr #6
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194296 	mulseq	r9, r6, r2
  40:	00240300 	eoreq	r0, r4, r0, lsl #6
  44:	0b3e0b0b 	bleq	f82c78 <shift+0xf82c78>
  48:	00000803 	andeq	r0, r0, r3, lsl #16
  4c:	3f012e04 	svccc	0x00012e04
  50:	3a0e0319 	bcc	380cbc <shift+0x380cbc>
  54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  5c:	96184006 	ldrls	r4, [r8], -r6
  60:	13011942 	movwne	r1, #6466	; 0x1942
  64:	05050000 	streq	r0, [r5, #-0]
  68:	3a080300 	bcc	200c70 <shift+0x200c70>
  6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	00180213 	andseq	r0, r8, r3, lsl r2
  74:	000f0600 	andeq	r0, pc, r0, lsl #12
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	24070000 	strcs	r0, [r7], #-0
  80:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  84:	000e030b 	andeq	r0, lr, fp, lsl #6
  88:	11010000 	mrsne	r0, (UNDEF: 1)
  8c:	130e2501 	movwne	r2, #58625	; 0xe501
  90:	1b0e030b 	blne	380cc4 <shift+0x380cc4>
  94:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  98:	00171006 	andseq	r1, r7, r6
  9c:	012e0200 	teqeq	lr, r0, lsl #4
  a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <shift+0xec2d94>
  a8:	13491927 	movtne	r1, #39207	; 0x9927
  ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b4:	00130119 	andseq	r0, r3, r9, lsl r1
  b8:	00340300 	eorseq	r0, r4, r0, lsl #6
  bc:	0b3a0803 	bleq	e820d0 <shift+0xe820d0>
  c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c4:	00001802 	andeq	r1, r0, r2, lsl #16
  c8:	0b002404 	bleq	90e0 <shift+0x90e0>
  cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  d0:	05000008 	streq	r0, [r0, #-8]
  d4:	0b0b0024 	bleq	2c016c <shift+0x2c016c>
  d8:	0e030b3e 	vmoveq.16	d3[0], r0
  dc:	34060000 	strcc	r0, [r6], #-0
  e0:	3a0e0300 	bcc	380ce8 <shift+0x380ce8>
  e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	00180213 	andseq	r0, r8, r3, lsl r2
  ec:	00050700 	andeq	r0, r5, r0, lsl #14
  f0:	0b3a0803 	bleq	e82104 <shift+0xe82104>
  f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	0b000f08 	bleq	3d24 <shift+0x3d24>
 100:	0013490b 	andseq	r4, r3, fp, lsl #18
 104:	012e0900 	teqeq	lr, r0, lsl #18
 108:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 10c:	0b3b0b3a 	bleq	ec2dfc <shift+0xec2dfc>
 110:	13491927 	movtne	r1, #39207	; 0x9927
 114:	06120111 			; <UNDEFINED> instruction: 0x06120111
 118:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 11c:	00130119 	andseq	r0, r3, r9, lsl r1
 120:	00260a00 	eoreq	r0, r6, r0, lsl #20
 124:	00001349 	andeq	r1, r0, r9, asr #6
 128:	3f012e0b 	svccc	0x00012e0b
 12c:	3a0e0319 	bcc	380d98 <shift+0x380d98>
 130:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 134:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 138:	96184006 	ldrls	r4, [r8], -r6
 13c:	13011942 	movwne	r1, #6466	; 0x1942
 140:	010c0000 	mrseq	r0, (UNDEF: 12)
 144:	01134901 	tsteq	r3, r1, lsl #18
 148:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 14c:	13490021 	movtne	r0, #36897	; 0x9021
 150:	00000b2f 	andeq	r0, r0, pc, lsr #22
 154:	0300050e 	movweq	r0, #1294	; 0x50e
 158:	3b0b3a0e 	blcc	2ce998 <shift+0x2ce998>
 15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 160:	0f000018 	svceq	0x00000018
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	3f012e10 	svccc	0x00012e10
 16c:	3a0e0319 	bcc	380dd8 <shift+0x380dd8>
 170:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 174:	3c134919 	ldccc	9, cr4, [r3], {25}
 178:	00130119 	andseq	r0, r3, r9, lsl r1
 17c:	00051100 	andeq	r1, r5, r0, lsl #2
 180:	00001349 	andeq	r1, r0, r9, asr #6
 184:	3f012e12 	svccc	0x00012e12
 188:	3a0e0319 	bcc	380df4 <shift+0x380df4>
 18c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 190:	11134919 	tstne	r3, r9, lsl r9
 194:	40061201 	andmi	r1, r6, r1, lsl #4
 198:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 19c:	01000000 	mrseq	r0, (UNDEF: 0)
 1a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1a4:	0e030b13 	vmoveq.32	d3[0], r0
 1a8:	01110e1b 	tsteq	r1, fp, lsl lr
 1ac:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1b0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <shift+0x2ce9f8>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	00001301 	andeq	r1, r0, r1, lsl #6
 1cc:	03000503 	movweq	r0, #1283	; 0x503
 1d0:	3b0b3a08 	blcc	2ce9f8 <shift+0x2ce9f8>
 1d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1d8:	04000018 	streq	r0, [r0], #-24
 1dc:	0b0b000f 	bleq	2c0220 <shift+0x2c0220>
 1e0:	00001349 	andeq	r1, r0, r9, asr #6
 1e4:	0b002405 	bleq	9200 <shift+0x9200>
 1e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1ec:	0600000e 	streq	r0, [r0], -lr
 1f0:	0b0b0024 	bleq	2c0288 <shift+0x2c0288>
 1f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1f8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 1fc:	03193f01 	tsteq	r9, #1, 30
 200:	3b0b3a0e 	blcc	2cea40 <shift+0x2cea40>
 204:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 208:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 20c:	96184006 	ldrls	r4, [r8], -r6
 210:	13011942 	movwne	r1, #6466	; 0x1942
 214:	05080000 	streq	r0, [r8, #-0]
 218:	3a0e0300 	bcc	380e20 <shift+0x380e20>
 21c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 220:	00180213 	andseq	r0, r8, r3, lsl r2
 224:	00340900 	eorseq	r0, r4, r0, lsl #18
 228:	0b3a0803 	bleq	e8223c <shift+0xe8223c>
 22c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 230:	00001802 	andeq	r1, r0, r2, lsl #16
 234:	0300340a 	movweq	r3, #1034	; 0x40a
 238:	3b0b3a0e 	blcc	2cea78 <shift+0x2cea78>
 23c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 240:	0b000018 	bleq	2a8 <shift+0x2a8>
 244:	0111010b 	tsteq	r1, fp, lsl #2
 248:	00000612 	andeq	r0, r0, r2, lsl r6
 24c:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
 250:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 254:	13490101 	movtne	r0, #37121	; 0x9101
 258:	00001301 	andeq	r1, r0, r1, lsl #6
 25c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 260:	000b2f13 	andeq	r2, fp, r3, lsl pc
 264:	000a0f00 	andeq	r0, sl, r0, lsl #30
 268:	0b3a0803 	bleq	e8227c <shift+0xe8227c>
 26c:	01110b3b 	tsteq	r1, fp, lsr fp
 270:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 274:	03193f00 	tsteq	r9, #0, 30
 278:	3b0b3a0e 	blcc	2ceab8 <shift+0x2ceab8>
 27c:	1119270b 	tstne	r9, fp, lsl #14
 280:	40061201 	andmi	r1, r6, r1, lsl #4
 284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	06100011 			; <UNDEFINED> instruction: 0x06100011
 290:	01120111 	tsteq	r2, r1, lsl r1
 294:	081b0803 	ldmdaeq	fp, {r0, r1, fp}
 298:	05130825 	ldreq	r0, [r3, #-2085]	; 0x825
 29c:	01000000 	mrseq	r0, (UNDEF: 0)
 2a0:	06100011 			; <UNDEFINED> instruction: 0x06100011
 2a4:	01120111 	tsteq	r2, r1, lsl r1
 2a8:	081b0803 	ldmdaeq	fp, {r0, r1, fp}
 2ac:	05130825 	ldreq	r0, [r3, #-2085]	; 0x825
 2b0:	Address 0x00000000000002b0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	0000005c 	andeq	r0, r0, ip, asr r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00490002 	subeq	r0, r9, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	8200005c 	andhi	r0, r0, #92	; 0x5c
  34:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00d40002 	sbcseq	r0, r4, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	82000108 	andhi	r0, r0, #8, 2
  54:	00000918 	andeq	r0, r0, r8, lsl r9
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	03e30002 	mvneq	r0, #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	82000a20 	andhi	r0, r0, #32, 20	; 0x20000
  74:	00000604 	andeq	r0, r0, r4, lsl #12
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	06880002 	streq	r0, [r8], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	82001024 	andhi	r1, r0, #36	; 0x24
  94:	0000020c 	andeq	r0, r0, ip, lsl #4
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07df0002 	ldrbeq	r0, [pc, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	82001230 	andhi	r1, r0, #48, 4
  b4:	00000004 	andeq	r0, r0, r4
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
   8:	20332e39 	eorscs	r2, r3, r9, lsr lr
   c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
  10:	33313130 	teqcc	r1, #48, 2
  14:	72702820 	rsbsvc	r2, r0, #32, 16	; 0x200000
  18:	6c657265 	sfmvs	f7, 2, [r5], #-404	; 0xfffffe6c
  1c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  20:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
  24:	206d7261 	rsbcs	r7, sp, r1, ror #4
  28:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  2c:	6f633d75 	svcvs	0x00633d75
  30:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
  34:	2038612d 	eorscs	r6, r8, sp, lsr #2
  38:	70666d2d 	rsbvc	r6, r6, sp, lsr #26
  3c:	656e3d75 	strbvs	r3, [lr, #-3445]!	; 0xd75
  40:	2d206e6f 	stccs	14, cr6, [r0, #-444]!	; 0xfffffe44
  44:	6f6c666d 	svcvs	0x006c666d
  48:	612d7461 	teqvs	sp, r1, ror #8
  4c:	733d6962 	teqvc	sp, #1605632	; 0x188000
  50:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
  54:	6d2d2070 	stcvs	0, cr2, [sp, #-448]!	; 0xfffffe40
  58:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  5c:	63706161 	cmnvs	r0, #1073741848	; 0x40000018
  60:	696c2d73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
  64:	2078756e 	rsbscs	r7, r8, lr, ror #10
  68:	7500672d 	strvc	r6, [r0, #-1837]	; 0x72d
  6c:	2d747261 	lfmcs	f7, 2, [r4, #-388]!	; 0xfffffe7c
  70:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  74:	00632e32 	rsbeq	r2, r3, r2, lsr lr
  78:	6f746f67 	svcvs	0x00746f67
  7c:	646e615f 	strbtvs	r6, [lr], #-351	; 0x15f
  80:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
  84:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
  88:	2f656d6f 	svccs	0x00656d6f
  8c:	31333173 	teqcc	r3, r3, ror r1
  90:	36323131 			; <UNDEFINED> instruction: 0x36323131
  94:	3173652f 	cmncc	r3, pc, lsr #10
  98:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  9c:	6d003430 	cfstrsvs	mvf3, [r0, #-192]	; 0xffffff40
  a0:	006e6961 	rsbeq	r6, lr, r1, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  b0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  b4:	6e790070 	mrcvs	0, 3, r0, cr9, cr0, {3}
  b8:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
  bc:	41550072 	cmpmi	r5, r2, ror r0
  c0:	705f5452 	subsvc	r5, pc, r2, asr r4	; <UNPREDICTABLE>
  c4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
  c8:	41550066 	cmpmi	r5, r6, rrx
  cc:	735f5452 	cmpvc	pc, #1375731712	; 0x52000000
  d0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  d4:	66006674 			; <UNDEFINED> instruction: 0x66006674
  d8:	616d726f 	cmnvs	sp, pc, ror #4
  dc:	61760074 	cmnvs	r6, r4, ror r0
  e0:	55006772 	strpl	r6, [r0, #-1906]	; 0x772
  e4:	5f545241 	svcpl	0x00545241
  e8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
  ec:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
  f0:	6b636f6c 	blvs	18dbea8 <shift+0x18dbea8>
  f4:	52415500 	subpl	r5, r1, #0, 10
  f8:	65675f54 	strbvs	r5, [r7, #-3924]!	; 0xf54
  fc:	70006374 	andvc	r6, r0, r4, ror r3
 100:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 104:	746f6700 	strbtvc	r6, [pc], #-1792	; 10c <shift+0x10c>
 108:	7165736f 	cmnvc	r5, pc, ror #6
 10c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
 110:	73003165 	movwvc	r3, #357	; 0x165
 114:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
 118:	00657079 	rsbeq	r7, r5, r9, ror r0
 11c:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
 120:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 124:	00786568 	rsbseq	r6, r8, r8, ror #10
 128:	6d756e78 	ldclvs	14, cr6, [r5, #-480]!	; 0xfffffe20
 12c:	00726562 	rsbseq	r6, r2, r2, ror #10
 130:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 134:	5500632e 	strpl	r6, [r0, #-814]	; 0x32e
 138:	5f545241 	svcpl	0x00545241
 13c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 140:	52415500 	subpl	r5, r1, #0, 10
 144:	75705f54 	ldrbvc	r5, [r0, #-3924]!	; 0xf54
 148:	55006374 	strpl	r6, [r0, #-884]	; 0x374
 14c:	5f545241 	svcpl	0x00545241
 150:	6f746f67 	svcvs	0x00746f67
 154:	52415500 	subpl	r5, r1, #0, 10
 158:	6c635f54 	stclvs	15, cr5, [r3], #-336	; 0xfffffeb0
 15c:	00726165 	rsbseq	r6, r2, r5, ror #2
 160:	696d6573 	stmdbvs	sp!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 164:	6f6c6f63 	svcvs	0x006c6f63
 168:	7365006e 	cmnvc	r5, #110	; 0x6e
 16c:	6e717363 	cdpvs	3, 7, cr7, cr1, cr3, {3}
 170:	55006563 	strpl	r6, [r0, #-1379]	; 0x563
 174:	5f545241 	svcpl	0x00545241
 178:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 17c:	74656c00 	strbtvc	r6, [r5], #-3072	; 0xc00
 180:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 184:	72747300 	rsbsvc	r7, r4, #0, 6
 188:	00676e69 	rsbeq	r6, r7, r9, ror #28
 18c:	63646170 	cmnvs	r4, #112, 2
 190:	00726168 	rsbseq	r6, r2, r8, ror #2
 194:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 198:	61686374 	smcvs	34356	; 0x8634
 19c:	72700072 	rsbsvc	r0, r0, #114	; 0x72
 1a0:	5f746e69 	svcpl	0x00746e69
 1a4:	00667562 	rsbeq	r7, r6, r2, ror #10
 1a8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1ac:	00632e74 	rsbeq	r2, r3, r4, ror lr
 1b0:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 1b4:	72700068 	rsbsvc	r0, r0, #104	; 0x68
 1b8:	69746e69 	ldmdbvs	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 1bc:	69617200 	stmdbvs	r1!, {r9, ip, sp, lr}^
 1c0:	70006573 	andvc	r6, r0, r3, ror r5
 1c4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 1c8:	Address 0x00000000000001c8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	8200005c 	andhi	r0, r0, #92	; 0x5c
  1c:	00000068 	andeq	r0, r0, r8, rrx
  20:	8b080e42 	blhi	203930 <shift+0x203930>
  24:	42018e02 	andmi	r8, r1, #2, 28
  28:	00040b0c 	andeq	r0, r4, ip, lsl #22
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	820000c4 	andhi	r0, r0, #196	; 0xc4
  38:	00000044 	andeq	r0, r0, r4, asr #32
  3c:	8b080e42 	blhi	20394c <shift+0x20394c>
  40:	42018e02 	andmi	r8, r1, #2, 28
  44:	5c040b0c 	stcpl	11, cr0, [r4], {12}
  48:	00080d0c 	andeq	r0, r8, ip, lsl #26
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  54:	7c020001 	stcvc	0, cr0, [r2], {1}
  58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	0000004c 	andeq	r0, r0, ip, asr #32
  64:	82000108 	andhi	r0, r0, #8, 2
  68:	00000054 	andeq	r0, r0, r4, asr r0
  6c:	8b080e42 	blhi	20397c <shift+0x20397c>
  70:	42018e02 	andmi	r8, r1, #2, 28
  74:	64040b0c 	strvs	r0, [r4], #-2828	; 0xb0c
  78:	00080d0c 	andeq	r0, r8, ip, lsl #26
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	0000004c 	andeq	r0, r0, ip, asr #32
  84:	8200015c 	andhi	r0, r0, #92, 2
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	8b080e42 	blhi	20399c <shift+0x20399c>
  90:	42018e02 	andmi	r8, r1, #2, 28
  94:	56040b0c 	strpl	r0, [r4], -ip, lsl #22
  98:	00080d0c 	andeq	r0, r8, ip, lsl #26
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	0000004c 	andeq	r0, r0, ip, asr #32
  a4:	82000194 	andhi	r0, r0, #148, 2	; 0x25
  a8:	000002a8 	andeq	r0, r0, r8, lsr #5
  ac:	8b080e42 	blhi	2039bc <shift+0x2039bc>
  b0:	42018e02 	andmi	r8, r1, #2, 28
  b4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  b8:	0d0c014e 	stfeqs	f0, [ip, #-312]	; 0xfffffec8
  bc:	00000008 	andeq	r0, r0, r8
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0000004c 	andeq	r0, r0, ip, asr #32
  c8:	8200043c 	andhi	r0, r0, #60, 8	; 0x3c000000
  cc:	000000d8 	ldrdeq	r0, [r0], -r8
  d0:	8b080e42 	blhi	2039e0 <shift+0x2039e0>
  d4:	42018e02 	andmi	r8, r1, #2, 28
  d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  dc:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0000004c 	andeq	r0, r0, ip, asr #32
  e8:	82000514 	andhi	r0, r0, #20, 10	; 0x5000000
  ec:	000000a4 	andeq	r0, r0, r4, lsr #1
  f0:	8b040e42 	blhi	103a00 <shift+0x103a00>
  f4:	0b0d4201 	bleq	350900 <shift+0x350900>
  f8:	0d0d4a02 	vstreq	s8, [sp, #-8]
  fc:	000ecb42 	andeq	ip, lr, r2, asr #22
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	820005b8 	andhi	r0, r0, #184, 10	; 0x2e000000
 10c:	00000070 	andeq	r0, r0, r0, ror r0
 110:	8b040e42 	blhi	103a20 <shift+0x103a20>
 114:	0b0d4201 	bleq	350920 <shift+0x350920>
 118:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 11c:	00000ecb 	andeq	r0, r0, fp, asr #29
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	0000004c 	andeq	r0, r0, ip, asr #32
 128:	82000628 	andhi	r0, r0, #40, 12	; 0x2800000
 12c:	000000b4 	strheq	r0, [r0], -r4
 130:	8b080e42 	blhi	203a40 <shift+0x203a40>
 134:	42018e02 	andmi	r8, r1, #2, 28
 138:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 13c:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
 140:	00000020 	andeq	r0, r0, r0, lsr #32
 144:	0000004c 	andeq	r0, r0, ip, asr #32
 148:	820006dc 	andhi	r0, r0, #220, 12	; 0xdc00000
 14c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 150:	8b080e42 	blhi	203a60 <shift+0x203a60>
 154:	42018e02 	andmi	r8, r1, #2, 28
 158:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 15c:	0d0c0162 	stfeqs	f0, [ip, #-392]	; 0xfffffe78
 160:	00000008 	andeq	r0, r0, r8
 164:	00000034 	andeq	r0, r0, r4, lsr r0
 168:	0000004c 	andeq	r0, r0, ip, asr #32
 16c:	820009ac 	andhi	r0, r0, #172, 18	; 0x2b0000
 170:	00000040 	andeq	r0, r0, r0, asr #32
 174:	810c0e42 	tsthi	ip, r2, asr #28
 178:	83028203 	movwhi	r8, #8707	; 0x2203
 17c:	180e4201 	stmdane	lr, {r0, r9, lr}
 180:	058b0684 	streq	r0, [fp, #1668]	; 0x684
 184:	0c42048e 	cfstrdeq	mvd0, [r2], {142}	; 0x8e
 188:	0c54100b 	mrrceq	0, 0, r1, r4, cr11
 18c:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 190:	0c0ec4cb 	cfstrseq	mvf12, [lr], {203}	; 0xcb
 194:	c1c2c342 	bicgt	ip, r2, r2, asr #6
 198:	0000000e 	andeq	r0, r0, lr
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	0000004c 	andeq	r0, r0, ip, asr #32
 1a4:	820009ec 	andhi	r0, r0, #236, 18	; 0x3b0000
 1a8:	00000034 	andeq	r0, r0, r4, lsr r0
 1ac:	80100e42 	andshi	r0, r0, r2, asr #28
 1b0:	82038104 	andhi	r8, r3, #4, 2
 1b4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 1b8:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 1bc:	068b0785 	streq	r0, [fp], r5, lsl #15
 1c0:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 1c4:	0c4e140b 	cfstrdeq	mvd1, [lr], {11}
 1c8:	ce42200d 	cdpgt	0, 4, cr2, cr2, cr13, {0}
 1cc:	0ec4c5cb 	cdpeq	5, 12, cr12, cr4, cr11, {6}
 1d0:	c2c34210 	sbcgt	r4, r3, #16, 4
 1d4:	000ec0c1 	andeq	ip, lr, r1, asr #1
 1d8:	0000000c 	andeq	r0, r0, ip
 1dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	000001d8 	ldrdeq	r0, [r0], -r8
 1f0:	82000a20 	andhi	r0, r0, #32, 20	; 0x20000
 1f4:	0000005c 	andeq	r0, r0, ip, asr r0
 1f8:	8b080e42 	blhi	203b08 <shift+0x203b08>
 1fc:	42018e02 	andmi	r8, r1, #2, 28
 200:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
 204:	00080d0c 	andeq	r0, r8, ip, lsl #26
 208:	00000024 	andeq	r0, r0, r4, lsr #32
 20c:	000001d8 	ldrdeq	r0, [r0], -r8
 210:	82000a7c 	andhi	r0, r0, #124, 20	; 0x7c000
 214:	00000138 	andeq	r0, r0, r8, lsr r1
 218:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 21c:	86058506 	strhi	r8, [r5], -r6, lsl #10
 220:	8b038704 	blhi	e1e38 <shift+0xe1e38>
 224:	42018e02 	andmi	r8, r1, #2, 28
 228:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 22c:	180d0c96 	stmdane	sp, {r1, r2, r4, r7, sl, fp}
 230:	00000028 	andeq	r0, r0, r8, lsr #32
 234:	000001d8 	ldrdeq	r0, [r0], -r8
 238:	82000bb4 	andhi	r0, r0, #180, 22	; 0x2d000
 23c:	00000180 	andeq	r0, r0, r0, lsl #3
 240:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 244:	86068507 	strhi	r8, [r6], -r7, lsl #10
 248:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 24c:	8e028b03 	vmlahi.f64	d8, d2, d3
 250:	0b0c4201 	bleq	310a5c <shift+0x310a5c>
 254:	0cba0204 	lfmeq	f0, 4, [sl], #16
 258:	00001c0d 	andeq	r1, r0, sp, lsl #24
 25c:	00000028 	andeq	r0, r0, r8, lsr #32
 260:	000001d8 	ldrdeq	r0, [r0], -r8
 264:	82000d34 	andhi	r0, r0, #52, 26	; 0xd00
 268:	000002dc 	ldrdeq	r0, [r0], -ip
 26c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 270:	86068507 	strhi	r8, [r6], -r7, lsl #10
 274:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 278:	8e028b03 	vmlahi.f64	d8, d2, d3
 27c:	0b0c4201 	bleq	310a88 <shift+0x310a88>
 280:	01680304 	cmneq	r8, r4, lsl #6
 284:	001c0d0c 	andseq	r0, ip, ip, lsl #26
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	000001d8 	ldrdeq	r0, [r0], -r8
 290:	82001010 	andhi	r1, r0, #16
 294:	00000014 	andeq	r0, r0, r4, lsl r0
 298:	8b040e42 	blhi	103ba8 <shift+0x103ba8>
 29c:	0b0d4201 	bleq	350aa8 <shift+0x350aa8>
 2a0:	420d0d42 	andmi	r0, sp, #4224	; 0x1080
 2a4:	00000ecb 	andeq	r0, r0, fp, asr #29
 2a8:	0000000c 	andeq	r0, r0, ip
 2ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b0:	7c010001 	stcvc	0, cr0, [r1], {1}
 2b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	000002a8 	andeq	r0, r0, r8, lsr #5
 2c0:	82001024 	andhi	r1, r0, #36	; 0x24
 2c4:	000001ec 	andeq	r0, r0, ip, ror #3
