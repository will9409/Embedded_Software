
uart-test1.elf:     file format elf32-littlearm
uart-test1.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00010000 vaddr 0x82000000 paddr 0x82000000 align 2**16
         filesz 0x000012f0 memsz 0x000012f0 flags r-x
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001224  82000000  82000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000000cc  82001224  82001224  00011224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.attributes 00000039  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY
  3 .comment      0000003c  00000000  00000000  00011329  2**0
                  CONTENTS, READONLY
  4 .debug_line   000004fc  00000000  00000000  00011365  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000933  00000000  00000000  00011861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a4  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000c0  00000000  00000000  00012438  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bc  00000000  00000000  000124f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000126b4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
82000000 l    d  .text	00000000 .text
82001224 l    d  .rodata	00000000 .rodata
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 start.o
82000054 l       .text	00000000 _saved_sp
82000058 l       .text	00000000 _svc_stack
00000000 l    df *ABS*	00000000 uart-test1.c
82001224 l       .rodata	00000000 .LC0
82001254 l       .rodata	00000000 .LC1
82001258 l       .rodata	00000000 .LC2
82001290 l       .rodata	00000000 .LC3
82001298 l       .rodata	00000000 .LC4
820012d0 l       .rodata	00000000 .LC5
00000000 l    df *ABS*	00000000 uart.c
820012d4 l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 print.c
820012e8 l       .rodata	00000000 .LC0
00000000 l    df *ABS*	00000000 _udivsi3.o
82001014 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
8200014c g     F .text	00000038 UART_getc_noblock
82000d24 g     F .text	000002dc print
82001014 g     F .text	000001ec .hidden __udivsi3
820005a8 g     F .text	00000070 UART_puts
8200004c g       .text	00000000 _bss_start
82000ba4 g     F .text	00000180 printi
82000050 g       .text	00000000 _bss_end
82000184 g     F .text	000002a8 UART_gethex
82000000 g       .text	00000000 _start
82000a6c g     F .text	00000138 prints
820000f8 g     F .text	00000054 UART_getc
8200042c g     F .text	000000d8 UART_gets
82001220  w    F .text	00000004 .hidden __aeabi_ldiv0
820012f0 g       .rodata	00000000 __bss_start
8200005c g     F .text	0000009c main
82001014 g     F .text	00000000 .hidden __aeabi_uidiv
8200099c g     F .text	00000040 UART_sprintf
82000a10 g     F .text	0000005c printchar
82000504 g     F .text	000000a4 UART_putc
820009dc g     F .text	00000034 UART_printf
82001200 g     F .text	00000020 .hidden __aeabi_uidivmod
820012f0 g       .rodata	00000000 _end
820006cc g     F .text	000002d0 UART_goto
82001220  w    F .text	00000004 .hidden __aeabi_idiv0
82000618 g     F .text	000000b4 UART_clear
82001000 g     F .text	00000014 raise



Disassembly of section .text:

82000000 <_start>:
# File: start.S
# ======================================================================

.globl _start
_start:
	mov	r4, #0			// r4=0
82000000:	e3a04000 	mov	r4, #0
	mcr	p15, #0, r4, c7, c5, #0	// invalidate i-cache
82000004:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
	dsb				// data synchronization barrier
82000008:	f57ff04f 	dsb	sy
	mcr	p15, #0, r4, c7, c5, #4	// flush prefetch buffer
8200000c:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}

	push	{lr}			// save lr
82000010:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	str	sp, _saved_sp		// save u-boot sp
82000014:	e58fd038 	str	sp, [pc, #56]	; 82000054 <_saved_sp>
	ldr	sp, _svc_stack		// set svc stack
82000018:	e59fd038 	ldr	sp, [pc, #56]	; 82000058 <_svc_stack>

	ldr	r4, _bss_start		// r4=bss_start
8200001c:	e59f4028 	ldr	r4, [pc, #40]	; 8200004c <_bss_start>
	ldr	r5, _bss_end		// r5=bss_end
82000020:	e59f5028 	ldr	r5, [pc, #40]	; 82000050 <_bss_end>
	cmp	r4, r5			// if r4==r5
82000024:	e1540005 	cmp	r4, r5
	beq	.L1 			// then goto .L1
82000028:	0a000004 	beq	82000040 <_start+0x40>
	mov	r6, #0			// r6=0
8200002c:	e3a06000 	mov	r6, #0
.L0:
	str	r6, [r4]		// *r4=r6
82000030:	e5846000 	str	r6, [r4]
	add	r4, r4, #4		// r4=r4+4
82000034:	e2844004 	add	r4, r4, #4
	cmp	r4, r5			// if r4!=r5
82000038:	e1540005 	cmp	r4, r5
	bne	.L0			// then goto .L0
8200003c:	1afffffb 	bne	82000030 <_start+0x30>
.L1:
	bl	main			// main(argc, argv);
82000040:	eb000005 	bl	8200005c <main>

	ldr	sp, _saved_sp		// restore u-boot sp
82000044:	e59fd008 	ldr	sp, [pc, #8]	; 82000054 <_saved_sp>
	pop	{pc}			// restore pc
82000048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

8200004c <_bss_start>:
8200004c:	820012f0 	andhi	r1, r0, #240, 4

82000050 <_bss_end>:
82000050:	820012f0 	andhi	r1, r0, #240, 4

82000054 <_saved_sp>:
82000054:	00000000 	andeq	r0, r0, r0

82000058 <_svc_stack>:
82000058:	82000000 	andhi	r0, r0, #0

8200005c <main>:
#include "uart.h"

// ======================================================================

int main(void)
{
8200005c:	e92d4800 	push	{fp, lr}
82000060:	e28db004 	add	fp, sp, #4
82000064:	e24ddf82 	sub	sp, sp, #520	; 0x208
  unsigned int x;
  char buf[512];

  UART_puts("If you type a character, it will be printed: ");
82000068:	e3010224 	movw	r0, #4644	; 0x1224
8200006c:	e3480200 	movt	r0, #33280	; 0x8200
82000070:	eb00014c 	bl	820005a8 <UART_puts>
  UART_gets(buf);
82000074:	e24b3f82 	sub	r3, fp, #520	; 0x208
82000078:	e1a00003 	mov	r0, r3
8200007c:	eb0000ea 	bl	8200042c <UART_gets>
  UART_putc((int) buf[0]);
82000080:	e55b3208 	ldrb	r3, [fp, #-520]	; 0x208
82000084:	e1a00003 	mov	r0, r3
82000088:	eb00011d 	bl	82000504 <UART_putc>
  UART_printf("\n");
8200008c:	e3010254 	movw	r0, #4692	; 0x1254
82000090:	e3480200 	movt	r0, #33280	; 0x8200
82000094:	eb000250 	bl	820009dc <UART_printf>

  UART_puts("If you type a hexa-decimal number, it will be printed: ");
82000098:	e3010258 	movw	r0, #4696	; 0x1258
8200009c:	e3480200 	movt	r0, #33280	; 0x8200
820000a0:	eb000140 	bl	820005a8 <UART_puts>
  x = UART_gethex();
820000a4:	eb000036 	bl	82000184 <UART_gethex>
820000a8:	e50b0008 	str	r0, [fp, #-8]
  UART_printf("%08x\n", x);
820000ac:	e51b1008 	ldr	r1, [fp, #-8]
820000b0:	e3010290 	movw	r0, #4752	; 0x1290
820000b4:	e3480200 	movt	r0, #33280	; 0x8200
820000b8:	eb000247 	bl	820009dc <UART_printf>

  UART_puts("If you type a line of characters, it will be printed: ");
820000bc:	e3010298 	movw	r0, #4760	; 0x1298
820000c0:	e3480200 	movt	r0, #33280	; 0x8200
820000c4:	eb000137 	bl	820005a8 <UART_puts>
  UART_gets(buf);
820000c8:	e24b3f82 	sub	r3, fp, #520	; 0x208
820000cc:	e1a00003 	mov	r0, r3
820000d0:	eb0000d5 	bl	8200042c <UART_gets>
  UART_printf("%s\n", buf);
820000d4:	e24b3f82 	sub	r3, fp, #520	; 0x208
820000d8:	e1a01003 	mov	r1, r3
820000dc:	e30102d0 	movw	r0, #4816	; 0x12d0
820000e0:	e3480200 	movt	r0, #33280	; 0x8200
820000e4:	eb00023c 	bl	820009dc <UART_printf>

  return 0;
820000e8:	e3a03000 	mov	r3, #0
}
820000ec:	e1a00003 	mov	r0, r3
820000f0:	e24bd004 	sub	sp, fp, #4
820000f4:	e8bd8800 	pop	{fp, pc}

820000f8 <UART_getc>:
#define LSR_TX_FIFO_E	0x20	// LSR transmit fifo empty

// ======================================================================

int UART_getc(void)
{
820000f8:	e92d4800 	push	{fp, lr}
820000fc:	e28db004 	add	fp, sp, #4
82000100:	e24dd008 	sub	sp, sp, #8
  unsigned int c;

  while ((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
82000104:	e1a00000 	nop			; (mov r0, r0)
82000108:	e3093014 	movw	r3, #36884	; 0x9014
8200010c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000110:	e5933000 	ldr	r3, [r3]
82000114:	e2033001 	and	r3, r3, #1
82000118:	e3530000 	cmp	r3, #0
8200011c:	0afffff9 	beq	82000108 <UART_getc+0x10>

  c = IO_READ(UART1_RHR_REG);
82000120:	e3a03a09 	mov	r3, #36864	; 0x9000
82000124:	e34434e0 	movt	r3, #17632	; 0x44e0
82000128:	e5933000 	ldr	r3, [r3]
8200012c:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
82000130:	e51b3008 	ldr	r3, [fp, #-8]
82000134:	e1a00003 	mov	r0, r3
82000138:	eb0000f1 	bl	82000504 <UART_putc>

  return (int)c;
8200013c:	e51b3008 	ldr	r3, [fp, #-8]
}
82000140:	e1a00003 	mov	r0, r3
82000144:	e24bd004 	sub	sp, fp, #4
82000148:	e8bd8800 	pop	{fp, pc}

8200014c <UART_getc_noblock>:

// ======================================================================

int UART_getc_noblock(void)
{
8200014c:	e92d4800 	push	{fp, lr}
82000150:	e28db004 	add	fp, sp, #4
82000154:	e24dd008 	sub	sp, sp, #8
  unsigned int c;
  
  c = IO_READ(UART1_RHR_REG);
82000158:	e3a03a09 	mov	r3, #36864	; 0x9000
8200015c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000160:	e5933000 	ldr	r3, [r3]
82000164:	e50b3008 	str	r3, [fp, #-8]

  UART_putc(c);
82000168:	e51b3008 	ldr	r3, [fp, #-8]
8200016c:	e1a00003 	mov	r0, r3
82000170:	eb0000e3 	bl	82000504 <UART_putc>

  return (int)c;
82000174:	e51b3008 	ldr	r3, [fp, #-8]
}
82000178:	e1a00003 	mov	r0, r3
8200017c:	e24bd004 	sub	sp, fp, #4
82000180:	e8bd8800 	pop	{fp, pc}

82000184 <UART_gethex>:

// ======================================================================

unsigned int UART_gethex(void)
{
82000184:	e92d4800 	push	{fp, lr}
82000188:	e28db004 	add	fp, sp, #4
8200018c:	e24dd010 	sub	sp, sp, #16
  unsigned int temp;
  unsigned int hex= 0x00000000;
82000190:	e3a03000 	mov	r3, #0
82000194:	e50b300c 	str	r3, [fp, #-12]
  int i = 0;
82000198:	e3a03000 	mov	r3, #0
8200019c:	e50b3010 	str	r3, [fp, #-16]
  while(1){

  while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
820001a0:	e1a00000 	nop			; (mov r0, r0)
820001a4:	e3093014 	movw	r3, #36884	; 0x9014
820001a8:	e34434e0 	movt	r3, #17632	; 0x44e0
820001ac:	e5933000 	ldr	r3, [r3]
820001b0:	e2033001 	and	r3, r3, #1
820001b4:	e3530000 	cmp	r3, #0
820001b8:	0afffff9 	beq	820001a4 <UART_gethex+0x20>
    temp = IO_READ(UART1_RHR_REG);
820001bc:	e3a03a09 	mov	r3, #36864	; 0x9000
820001c0:	e34434e0 	movt	r3, #17632	; 0x44e0
820001c4:	e5933000 	ldr	r3, [r3]
820001c8:	e50b3008 	str	r3, [fp, #-8]
    UART_putc(temp);
820001cc:	e51b3008 	ldr	r3, [fp, #-8]
820001d0:	e1a00003 	mov	r0, r3
820001d4:	eb0000ca 	bl	82000504 <UART_putc>
    if(temp == '\n' || temp == '\r')return hex;
820001d8:	e51b3008 	ldr	r3, [fp, #-8]
820001dc:	e353000a 	cmp	r3, #10
820001e0:	0a000002 	beq	820001f0 <UART_gethex+0x6c>
820001e4:	e51b3008 	ldr	r3, [fp, #-8]
820001e8:	e353000d 	cmp	r3, #13
820001ec:	1a000001 	bne	820001f8 <UART_gethex+0x74>
820001f0:	e51b300c 	ldr	r3, [fp, #-12]
820001f4:	ea000089 	b	82000420 <UART_gethex+0x29c>
    else if(temp == '0')temp = 0x00000000;
820001f8:	e51b3008 	ldr	r3, [fp, #-8]
820001fc:	e3530030 	cmp	r3, #48	; 0x30
82000200:	1a000002 	bne	82000210 <UART_gethex+0x8c>
82000204:	e3a03000 	mov	r3, #0
82000208:	e50b3008 	str	r3, [fp, #-8]
8200020c:	ea00006d 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '1')temp = 0x00000001;
82000210:	e51b3008 	ldr	r3, [fp, #-8]
82000214:	e3530031 	cmp	r3, #49	; 0x31
82000218:	1a000002 	bne	82000228 <UART_gethex+0xa4>
8200021c:	e3a03001 	mov	r3, #1
82000220:	e50b3008 	str	r3, [fp, #-8]
82000224:	ea000067 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '2')temp = 0x00000002;
82000228:	e51b3008 	ldr	r3, [fp, #-8]
8200022c:	e3530032 	cmp	r3, #50	; 0x32
82000230:	1a000002 	bne	82000240 <UART_gethex+0xbc>
82000234:	e3a03002 	mov	r3, #2
82000238:	e50b3008 	str	r3, [fp, #-8]
8200023c:	ea000061 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '3')temp = 0x00000003;
82000240:	e51b3008 	ldr	r3, [fp, #-8]
82000244:	e3530033 	cmp	r3, #51	; 0x33
82000248:	1a000002 	bne	82000258 <UART_gethex+0xd4>
8200024c:	e3a03003 	mov	r3, #3
82000250:	e50b3008 	str	r3, [fp, #-8]
82000254:	ea00005b 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '4')temp = 0x00000004;
82000258:	e51b3008 	ldr	r3, [fp, #-8]
8200025c:	e3530034 	cmp	r3, #52	; 0x34
82000260:	1a000002 	bne	82000270 <UART_gethex+0xec>
82000264:	e3a03004 	mov	r3, #4
82000268:	e50b3008 	str	r3, [fp, #-8]
8200026c:	ea000055 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '5')temp = 0x00000005;
82000270:	e51b3008 	ldr	r3, [fp, #-8]
82000274:	e3530035 	cmp	r3, #53	; 0x35
82000278:	1a000002 	bne	82000288 <UART_gethex+0x104>
8200027c:	e3a03005 	mov	r3, #5
82000280:	e50b3008 	str	r3, [fp, #-8]
82000284:	ea00004f 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '6')temp = 0x00000006;
82000288:	e51b3008 	ldr	r3, [fp, #-8]
8200028c:	e3530036 	cmp	r3, #54	; 0x36
82000290:	1a000002 	bne	820002a0 <UART_gethex+0x11c>
82000294:	e3a03006 	mov	r3, #6
82000298:	e50b3008 	str	r3, [fp, #-8]
8200029c:	ea000049 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '7')temp = 0x00000007;
820002a0:	e51b3008 	ldr	r3, [fp, #-8]
820002a4:	e3530037 	cmp	r3, #55	; 0x37
820002a8:	1a000002 	bne	820002b8 <UART_gethex+0x134>
820002ac:	e3a03007 	mov	r3, #7
820002b0:	e50b3008 	str	r3, [fp, #-8]
820002b4:	ea000043 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '8')temp = 0x00000008;
820002b8:	e51b3008 	ldr	r3, [fp, #-8]
820002bc:	e3530038 	cmp	r3, #56	; 0x38
820002c0:	1a000002 	bne	820002d0 <UART_gethex+0x14c>
820002c4:	e3a03008 	mov	r3, #8
820002c8:	e50b3008 	str	r3, [fp, #-8]
820002cc:	ea00003d 	b	820003c8 <UART_gethex+0x244>
    else if(temp == '9')temp = 0x00000009;
820002d0:	e51b3008 	ldr	r3, [fp, #-8]
820002d4:	e3530039 	cmp	r3, #57	; 0x39
820002d8:	1a000002 	bne	820002e8 <UART_gethex+0x164>
820002dc:	e3a03009 	mov	r3, #9
820002e0:	e50b3008 	str	r3, [fp, #-8]
820002e4:	ea000037 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'A' || temp == 'a')temp = 0x0000000A;
820002e8:	e51b3008 	ldr	r3, [fp, #-8]
820002ec:	e3530041 	cmp	r3, #65	; 0x41
820002f0:	0a000002 	beq	82000300 <UART_gethex+0x17c>
820002f4:	e51b3008 	ldr	r3, [fp, #-8]
820002f8:	e3530061 	cmp	r3, #97	; 0x61
820002fc:	1a000002 	bne	8200030c <UART_gethex+0x188>
82000300:	e3a0300a 	mov	r3, #10
82000304:	e50b3008 	str	r3, [fp, #-8]
82000308:	ea00002e 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'B' || temp == 'b')temp = 0x0000000B;
8200030c:	e51b3008 	ldr	r3, [fp, #-8]
82000310:	e3530042 	cmp	r3, #66	; 0x42
82000314:	0a000002 	beq	82000324 <UART_gethex+0x1a0>
82000318:	e51b3008 	ldr	r3, [fp, #-8]
8200031c:	e3530062 	cmp	r3, #98	; 0x62
82000320:	1a000002 	bne	82000330 <UART_gethex+0x1ac>
82000324:	e3a0300b 	mov	r3, #11
82000328:	e50b3008 	str	r3, [fp, #-8]
8200032c:	ea000025 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'C' || temp == 'c')temp = 0x0000000C;
82000330:	e51b3008 	ldr	r3, [fp, #-8]
82000334:	e3530043 	cmp	r3, #67	; 0x43
82000338:	0a000002 	beq	82000348 <UART_gethex+0x1c4>
8200033c:	e51b3008 	ldr	r3, [fp, #-8]
82000340:	e3530063 	cmp	r3, #99	; 0x63
82000344:	1a000002 	bne	82000354 <UART_gethex+0x1d0>
82000348:	e3a0300c 	mov	r3, #12
8200034c:	e50b3008 	str	r3, [fp, #-8]
82000350:	ea00001c 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'D' || temp == 'd')temp = 0x0000000D;
82000354:	e51b3008 	ldr	r3, [fp, #-8]
82000358:	e3530044 	cmp	r3, #68	; 0x44
8200035c:	0a000002 	beq	8200036c <UART_gethex+0x1e8>
82000360:	e51b3008 	ldr	r3, [fp, #-8]
82000364:	e3530064 	cmp	r3, #100	; 0x64
82000368:	1a000002 	bne	82000378 <UART_gethex+0x1f4>
8200036c:	e3a0300d 	mov	r3, #13
82000370:	e50b3008 	str	r3, [fp, #-8]
82000374:	ea000013 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'E' || temp == 'e')temp = 0x0000000E;
82000378:	e51b3008 	ldr	r3, [fp, #-8]
8200037c:	e3530045 	cmp	r3, #69	; 0x45
82000380:	0a000002 	beq	82000390 <UART_gethex+0x20c>
82000384:	e51b3008 	ldr	r3, [fp, #-8]
82000388:	e3530065 	cmp	r3, #101	; 0x65
8200038c:	1a000002 	bne	8200039c <UART_gethex+0x218>
82000390:	e3a0300e 	mov	r3, #14
82000394:	e50b3008 	str	r3, [fp, #-8]
82000398:	ea00000a 	b	820003c8 <UART_gethex+0x244>
    else if(temp == 'F' || temp == 'f')temp = 0x0000000F;
8200039c:	e51b3008 	ldr	r3, [fp, #-8]
820003a0:	e3530046 	cmp	r3, #70	; 0x46
820003a4:	0a000002 	beq	820003b4 <UART_gethex+0x230>
820003a8:	e51b3008 	ldr	r3, [fp, #-8]
820003ac:	e3530066 	cmp	r3, #102	; 0x66
820003b0:	1a000002 	bne	820003c0 <UART_gethex+0x23c>
820003b4:	e3a0300f 	mov	r3, #15
820003b8:	e50b3008 	str	r3, [fp, #-8]
820003bc:	ea000001 	b	820003c8 <UART_gethex+0x244>
    else return temp;
820003c0:	e51b3008 	ldr	r3, [fp, #-8]
820003c4:	ea000015 	b	82000420 <UART_gethex+0x29c>
    if( i == 0 ){
820003c8:	e51b3010 	ldr	r3, [fp, #-16]
820003cc:	e3530000 	cmp	r3, #0
820003d0:	1a000007 	bne	820003f4 <UART_gethex+0x270>
      hex = hex + temp;
820003d4:	e51b200c 	ldr	r2, [fp, #-12]
820003d8:	e51b3008 	ldr	r3, [fp, #-8]
820003dc:	e0823003 	add	r3, r2, r3
820003e0:	e50b300c 	str	r3, [fp, #-12]
      i++;
820003e4:	e51b3010 	ldr	r3, [fp, #-16]
820003e8:	e2833001 	add	r3, r3, #1
820003ec:	e50b3010 	str	r3, [fp, #-16]
820003f0:	ea000009 	b	8200041c <UART_gethex+0x298>
    }
    else{
      hex = hex << 4;
820003f4:	e51b300c 	ldr	r3, [fp, #-12]
820003f8:	e1a03203 	lsl	r3, r3, #4
820003fc:	e50b300c 	str	r3, [fp, #-12]
      hex = hex + temp;
82000400:	e51b200c 	ldr	r2, [fp, #-12]
82000404:	e51b3008 	ldr	r3, [fp, #-8]
82000408:	e0823003 	add	r3, r2, r3
8200040c:	e50b300c 	str	r3, [fp, #-12]
      i++;
82000410:	e51b3010 	ldr	r3, [fp, #-16]
82000414:	e2833001 	add	r3, r3, #1
82000418:	e50b3010 	str	r3, [fp, #-16]
    }
  }
8200041c:	eaffff5f 	b	820001a0 <UART_gethex+0x1c>
  return hex;
}
82000420:	e1a00003 	mov	r0, r3
82000424:	e24bd004 	sub	sp, fp, #4
82000428:	e8bd8800 	pop	{fp, pc}

8200042c <UART_gets>:

// ======================================================================

char *UART_gets(char *str)
{
8200042c:	e92d4800 	push	{fp, lr}
82000430:	e28db004 	add	fp, sp, #4
82000434:	e24dd018 	sub	sp, sp, #24
82000438:	e50b0018 	str	r0, [fp, #-24]
  int j = 0;
8200043c:	e3a03000 	mov	r3, #0
82000440:	e50b3008 	str	r3, [fp, #-8]
  int i = 0;
82000444:	e3a03000 	mov	r3, #0
82000448:	e50b300c 	str	r3, [fp, #-12]
  int q;

  for(j; j < 512; j++){
8200044c:	ea000007 	b	82000470 <UART_gets+0x44>
     str[j] = '\0';
82000450:	e51b3008 	ldr	r3, [fp, #-8]
82000454:	e51b2018 	ldr	r2, [fp, #-24]
82000458:	e0823003 	add	r3, r2, r3
8200045c:	e3a02000 	mov	r2, #0
82000460:	e5c32000 	strb	r2, [r3]
{
  int j = 0;
  int i = 0;
  int q;

  for(j; j < 512; j++){
82000464:	e51b3008 	ldr	r3, [fp, #-8]
82000468:	e2833001 	add	r3, r3, #1
8200046c:	e50b3008 	str	r3, [fp, #-8]
82000470:	e51b3008 	ldr	r3, [fp, #-8]
82000474:	e3530c02 	cmp	r3, #512	; 0x200
82000478:	bafffff4 	blt	82000450 <UART_gets+0x24>
     str[j] = '\0';
  }

  while(1){

    while((IO_READ(UART1_LSR_REG) & LSR_RX_FIFO_E) == 0);
8200047c:	e1a00000 	nop			; (mov r0, r0)
82000480:	e3093014 	movw	r3, #36884	; 0x9014
82000484:	e34434e0 	movt	r3, #17632	; 0x44e0
82000488:	e5933000 	ldr	r3, [r3]
8200048c:	e2033001 	and	r3, r3, #1
82000490:	e3530000 	cmp	r3, #0
82000494:	0afffff9 	beq	82000480 <UART_gets+0x54>

    q = IO_READ(UART1_RHR_REG);
82000498:	e3a03a09 	mov	r3, #36864	; 0x9000
8200049c:	e34434e0 	movt	r3, #17632	; 0x44e0
820004a0:	e5933000 	ldr	r3, [r3]
820004a4:	e50b3010 	str	r3, [fp, #-16]
    UART_putc(q);
820004a8:	e51b0010 	ldr	r0, [fp, #-16]
820004ac:	eb000014 	bl	82000504 <UART_putc>
    if(q == '\n' || q == '\r'){
820004b0:	e51b3010 	ldr	r3, [fp, #-16]
820004b4:	e353000a 	cmp	r3, #10
820004b8:	0a000002 	beq	820004c8 <UART_gets+0x9c>
820004bc:	e51b3010 	ldr	r3, [fp, #-16]
820004c0:	e353000d 	cmp	r3, #13
820004c4:	1a000001 	bne	820004d0 <UART_gets+0xa4>
        return str;
820004c8:	e51b3018 	ldr	r3, [fp, #-24]
820004cc:	ea000009 	b	820004f8 <UART_gets+0xcc>
    }
    str[i] = q;
820004d0:	e51b300c 	ldr	r3, [fp, #-12]
820004d4:	e51b2018 	ldr	r2, [fp, #-24]
820004d8:	e0823003 	add	r3, r2, r3
820004dc:	e51b2010 	ldr	r2, [fp, #-16]
820004e0:	e6ef2072 	uxtb	r2, r2
820004e4:	e5c32000 	strb	r2, [r3]
    i++;
820004e8:	e51b300c 	ldr	r3, [fp, #-12]
820004ec:	e2833001 	add	r3, r3, #1
820004f0:	e50b300c 	str	r3, [fp, #-12]
  }  
820004f4:	eaffffe0 	b	8200047c <UART_gets+0x50>
}
820004f8:	e1a00003 	mov	r0, r3
820004fc:	e24bd004 	sub	sp, fp, #4
82000500:	e8bd8800 	pop	{fp, pc}

82000504 <UART_putc>:

// ======================================================================

int UART_putc(int c)
{
82000504:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
82000508:	e28db000 	add	fp, sp, #0
8200050c:	e24dd00c 	sub	sp, sp, #12
82000510:	e50b0008 	str	r0, [fp, #-8]
  if ((c == '\r') || (c == '\n')){
82000514:	e51b3008 	ldr	r3, [fp, #-8]
82000518:	e353000d 	cmp	r3, #13
8200051c:	0a000002 	beq	8200052c <UART_putc+0x28>
82000520:	e51b3008 	ldr	r3, [fp, #-8]
82000524:	e353000a 	cmp	r3, #10
82000528:	1a00000e 	bne	82000568 <UART_putc+0x64>
    c = '\r';
8200052c:	e3a0300d 	mov	r3, #13
82000530:	e50b3008 	str	r3, [fp, #-8]
 
  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000534:	e1a00000 	nop			; (mov r0, r0)
82000538:	e3093014 	movw	r3, #36884	; 0x9014
8200053c:	e34434e0 	movt	r3, #17632	; 0x44e0
82000540:	e5933000 	ldr	r3, [r3]
82000544:	e2033020 	and	r3, r3, #32
82000548:	e3530000 	cmp	r3, #0
8200054c:	0afffff9 	beq	82000538 <UART_putc+0x34>

    IO_WRITE(UART1_THR_REG, c);
82000550:	e3a03a09 	mov	r3, #36864	; 0x9000
82000554:	e34434e0 	movt	r3, #17632	; 0x44e0
82000558:	e51b2008 	ldr	r2, [fp, #-8]
8200055c:	e5832000 	str	r2, [r3]

    c = '\n';
82000560:	e3a0300a 	mov	r3, #10
82000564:	e50b3008 	str	r3, [fp, #-8]
  }

  while ((IO_READ(UART1_LSR_REG) & LSR_TX_FIFO_E) == 0);
82000568:	e1a00000 	nop			; (mov r0, r0)
8200056c:	e3093014 	movw	r3, #36884	; 0x9014
82000570:	e34434e0 	movt	r3, #17632	; 0x44e0
82000574:	e5933000 	ldr	r3, [r3]
82000578:	e2033020 	and	r3, r3, #32
8200057c:	e3530000 	cmp	r3, #0
82000580:	0afffff9 	beq	8200056c <UART_putc+0x68>

  IO_WRITE(UART1_THR_REG, c);
82000584:	e3a03a09 	mov	r3, #36864	; 0x9000
82000588:	e34434e0 	movt	r3, #17632	; 0x44e0
8200058c:	e51b2008 	ldr	r2, [fp, #-8]
82000590:	e5832000 	str	r2, [r3]

  return c;
82000594:	e51b3008 	ldr	r3, [fp, #-8]
  

}
82000598:	e1a00003 	mov	r0, r3
8200059c:	e24bd000 	sub	sp, fp, #0
820005a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
820005a4:	e12fff1e 	bx	lr

820005a8 <UART_puts>:

// ======================================================================

int UART_puts(const char *s)
{
820005a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
820005ac:	e28db000 	add	fp, sp, #0
820005b0:	e24dd014 	sub	sp, sp, #20
820005b4:	e50b0010 	str	r0, [fp, #-16]
    int i = 0;
820005b8:	e3a03000 	mov	r3, #0
820005bc:	e50b3008 	str	r3, [fp, #-8]
    while(s[i] != '\0'){
820005c0:	ea000009 	b	820005ec <UART_puts+0x44>
    IO_WRITE(UART1_THR_REG,s[i]);
820005c4:	e3a03a09 	mov	r3, #36864	; 0x9000
820005c8:	e34434e0 	movt	r3, #17632	; 0x44e0
820005cc:	e51b2008 	ldr	r2, [fp, #-8]
820005d0:	e51b1010 	ldr	r1, [fp, #-16]
820005d4:	e0812002 	add	r2, r1, r2
820005d8:	e5d22000 	ldrb	r2, [r2]
820005dc:	e5832000 	str	r2, [r3]
    i++;
820005e0:	e51b3008 	ldr	r3, [fp, #-8]
820005e4:	e2833001 	add	r3, r3, #1
820005e8:	e50b3008 	str	r3, [fp, #-8]
// ======================================================================

int UART_puts(const char *s)
{
    int i = 0;
    while(s[i] != '\0'){
820005ec:	e51b3008 	ldr	r3, [fp, #-8]
820005f0:	e51b2010 	ldr	r2, [fp, #-16]
820005f4:	e0823003 	add	r3, r2, r3
820005f8:	e5d33000 	ldrb	r3, [r3]
820005fc:	e3530000 	cmp	r3, #0
82000600:	1affffef 	bne	820005c4 <UART_puts+0x1c>
    IO_WRITE(UART1_THR_REG,s[i]);
    i++;
    }
  return (int)s;
82000604:	e51b3010 	ldr	r3, [fp, #-16]
}
82000608:	e1a00003 	mov	r0, r3
8200060c:	e24bd000 	sub	sp, fp, #0
82000610:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82000614:	e12fff1e 	bx	lr

82000618 <UART_clear>:

// ======================================================================

void UART_clear(void)
{
82000618:	e92d4800 	push	{fp, lr}
8200061c:	e28db004 	add	fp, sp, #4
82000620:	e24dd018 	sub	sp, sp, #24
  char escsqnce[20] = "\033[2J\033[0;0H";
82000624:	e30122d4 	movw	r2, #4820	; 0x12d4
82000628:	e3482200 	movt	r2, #33280	; 0x8200
8200062c:	e24b3018 	sub	r3, fp, #24
82000630:	e8920007 	ldm	r2, {r0, r1, r2}
82000634:	e8a30003 	stmia	r3!, {r0, r1}
82000638:	e1c320b0 	strh	r2, [r3]
8200063c:	e2833002 	add	r3, r3, #2
82000640:	e1a02822 	lsr	r2, r2, #16
82000644:	e5c32000 	strb	r2, [r3]
82000648:	e24b300d 	sub	r3, fp, #13
8200064c:	e3a02000 	mov	r2, #0
82000650:	e5c32000 	strb	r2, [r3]
82000654:	e2833001 	add	r3, r3, #1
82000658:	e3a02000 	mov	r2, #0
8200065c:	e5c32000 	strb	r2, [r3]
82000660:	e2833001 	add	r3, r3, #1
82000664:	e3a02000 	mov	r2, #0
82000668:	e5c32000 	strb	r2, [r3]
8200066c:	e2833001 	add	r3, r3, #1
82000670:	e3a02000 	mov	r2, #0
82000674:	e5c32000 	strb	r2, [r3]
82000678:	e2833001 	add	r3, r3, #1
8200067c:	e3a02000 	mov	r2, #0
82000680:	e5c32000 	strb	r2, [r3]
82000684:	e2833001 	add	r3, r3, #1
82000688:	e3a02000 	mov	r2, #0
8200068c:	e5c32000 	strb	r2, [r3]
82000690:	e2833001 	add	r3, r3, #1
82000694:	e3a02000 	mov	r2, #0
82000698:	e5c32000 	strb	r2, [r3]
8200069c:	e2833001 	add	r3, r3, #1
820006a0:	e3a02000 	mov	r2, #0
820006a4:	e5c32000 	strb	r2, [r3]
820006a8:	e2833001 	add	r3, r3, #1
820006ac:	e3a02000 	mov	r2, #0
820006b0:	e5c32000 	strb	r2, [r3]
820006b4:	e2833001 	add	r3, r3, #1
  UART_puts(escsqnce);
820006b8:	e24b3018 	sub	r3, fp, #24
820006bc:	e1a00003 	mov	r0, r3
820006c0:	ebffffb8 	bl	820005a8 <UART_puts>
}
820006c4:	e24bd004 	sub	sp, fp, #4
820006c8:	e8bd8800 	pop	{fp, pc}

820006cc <UART_goto>:

// ======================================================================

void UART_goto(int x, int y)
{
820006cc:	e92d4800 	push	{fp, lr}
820006d0:	e28db004 	add	fp, sp, #4
820006d4:	e24dd020 	sub	sp, sp, #32
820006d8:	e50b0020 	str	r0, [fp, #-32]
820006dc:	e50b1024 	str	r1, [fp, #-36]	; 0x24
  char xnumber[3];
  char ynumber[3];
  char gotosequence1[5]= "\033[";
820006e0:	e3053b1b 	movw	r3, #23323	; 0x5b1b
820006e4:	e50b301c 	str	r3, [fp, #-28]
820006e8:	e3a03000 	mov	r3, #0
820006ec:	e54b3018 	strb	r3, [fp, #-24]
  char semicolon = ';';
820006f0:	e3a0303b 	mov	r3, #59	; 0x3b
820006f4:	e54b3009 	strb	r3, [fp, #-9]
  char end = 'H';
820006f8:	e3a03048 	mov	r3, #72	; 0x48
820006fc:	e54b300a 	strb	r3, [fp, #-10]
  int i = 0;
82000700:	e3a03000 	mov	r3, #0
82000704:	e50b3008 	str	r3, [fp, #-8]
  for(i; i< 3; i++){
82000708:	ea000083 	b	8200091c <UART_goto+0x250>
    if(i == 0){
8200070c:	e51b3008 	ldr	r3, [fp, #-8]
82000710:	e3530000 	cmp	r3, #0
82000714:	1a00001e 	bne	82000794 <UART_goto+0xc8>
    xnumber[i] = x/100+48;
82000718:	e51b1020 	ldr	r1, [fp, #-32]
8200071c:	e308351f 	movw	r3, #34079	; 0x851f
82000720:	e34531eb 	movt	r3, #20971	; 0x51eb
82000724:	e0c32391 	smull	r2, r3, r1, r3
82000728:	e1a022c3 	asr	r2, r3, #5
8200072c:	e1a03fc1 	asr	r3, r1, #31
82000730:	e0633002 	rsb	r3, r3, r2
82000734:	e6ef3073 	uxtb	r3, r3
82000738:	e2833030 	add	r3, r3, #48	; 0x30
8200073c:	e6ef1073 	uxtb	r1, r3
82000740:	e24b2010 	sub	r2, fp, #16
82000744:	e51b3008 	ldr	r3, [fp, #-8]
82000748:	e0823003 	add	r3, r2, r3
8200074c:	e1a02001 	mov	r2, r1
82000750:	e5c32000 	strb	r2, [r3]
    ynumber[i] = y/100+48;
82000754:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
82000758:	e308351f 	movw	r3, #34079	; 0x851f
8200075c:	e34531eb 	movt	r3, #20971	; 0x51eb
82000760:	e0c32391 	smull	r2, r3, r1, r3
82000764:	e1a022c3 	asr	r2, r3, #5
82000768:	e1a03fc1 	asr	r3, r1, #31
8200076c:	e0633002 	rsb	r3, r3, r2
82000770:	e6ef3073 	uxtb	r3, r3
82000774:	e2833030 	add	r3, r3, #48	; 0x30
82000778:	e6ef1073 	uxtb	r1, r3
8200077c:	e24b2014 	sub	r2, fp, #20
82000780:	e51b3008 	ldr	r3, [fp, #-8]
82000784:	e0823003 	add	r3, r2, r3
82000788:	e1a02001 	mov	r2, r1
8200078c:	e5c32000 	strb	r2, [r3]
82000790:	ea00005e 	b	82000910 <UART_goto+0x244>
    }
    else if(i == 1){
82000794:	e51b3008 	ldr	r3, [fp, #-8]
82000798:	e3530001 	cmp	r3, #1
8200079c:	1a000032 	bne	8200086c <UART_goto+0x1a0>
    xnumber[i] = ((x/10)%10)+48;
820007a0:	e51b1020 	ldr	r1, [fp, #-32]
820007a4:	e3063667 	movw	r3, #26215	; 0x6667
820007a8:	e3463666 	movt	r3, #26214	; 0x6666
820007ac:	e0c32391 	smull	r2, r3, r1, r3
820007b0:	e1a02143 	asr	r2, r3, #2
820007b4:	e1a03fc1 	asr	r3, r1, #31
820007b8:	e0632002 	rsb	r2, r3, r2
820007bc:	e3063667 	movw	r3, #26215	; 0x6667
820007c0:	e3463666 	movt	r3, #26214	; 0x6666
820007c4:	e0c10392 	smull	r0, r1, r2, r3
820007c8:	e1a01141 	asr	r1, r1, #2
820007cc:	e1a03fc2 	asr	r3, r2, #31
820007d0:	e0633001 	rsb	r3, r3, r1
820007d4:	e1a03083 	lsl	r3, r3, #1
820007d8:	e1a01103 	lsl	r1, r3, #2
820007dc:	e0833001 	add	r3, r3, r1
820007e0:	e0633002 	rsb	r3, r3, r2
820007e4:	e6ef3073 	uxtb	r3, r3
820007e8:	e2833030 	add	r3, r3, #48	; 0x30
820007ec:	e6ef1073 	uxtb	r1, r3
820007f0:	e24b2010 	sub	r2, fp, #16
820007f4:	e51b3008 	ldr	r3, [fp, #-8]
820007f8:	e0823003 	add	r3, r2, r3
820007fc:	e1a02001 	mov	r2, r1
82000800:	e5c32000 	strb	r2, [r3]
    ynumber[i] = ((y/10)%10)+48;
82000804:	e51b1024 	ldr	r1, [fp, #-36]	; 0x24
82000808:	e3063667 	movw	r3, #26215	; 0x6667
8200080c:	e3463666 	movt	r3, #26214	; 0x6666
82000810:	e0c32391 	smull	r2, r3, r1, r3
82000814:	e1a02143 	asr	r2, r3, #2
82000818:	e1a03fc1 	asr	r3, r1, #31
8200081c:	e0632002 	rsb	r2, r3, r2
82000820:	e3063667 	movw	r3, #26215	; 0x6667
82000824:	e3463666 	movt	r3, #26214	; 0x6666
82000828:	e0c10392 	smull	r0, r1, r2, r3
8200082c:	e1a01141 	asr	r1, r1, #2
82000830:	e1a03fc2 	asr	r3, r2, #31
82000834:	e0633001 	rsb	r3, r3, r1
82000838:	e1a03083 	lsl	r3, r3, #1
8200083c:	e1a01103 	lsl	r1, r3, #2
82000840:	e0833001 	add	r3, r3, r1
82000844:	e0633002 	rsb	r3, r3, r2
82000848:	e6ef3073 	uxtb	r3, r3
8200084c:	e2833030 	add	r3, r3, #48	; 0x30
82000850:	e6ef1073 	uxtb	r1, r3
82000854:	e24b2014 	sub	r2, fp, #20
82000858:	e51b3008 	ldr	r3, [fp, #-8]
8200085c:	e0823003 	add	r3, r2, r3
82000860:	e1a02001 	mov	r2, r1
82000864:	e5c32000 	strb	r2, [r3]
82000868:	ea000028 	b	82000910 <UART_goto+0x244>
    }
    else if(i == 2){
8200086c:	e51b3008 	ldr	r3, [fp, #-8]
82000870:	e3530002 	cmp	r3, #2
82000874:	1a000025 	bne	82000910 <UART_goto+0x244>
    xnumber[i] = (x%10)+48;
82000878:	e51b2020 	ldr	r2, [fp, #-32]
8200087c:	e3063667 	movw	r3, #26215	; 0x6667
82000880:	e3463666 	movt	r3, #26214	; 0x6666
82000884:	e0c10392 	smull	r0, r1, r2, r3
82000888:	e1a01141 	asr	r1, r1, #2
8200088c:	e1a03fc2 	asr	r3, r2, #31
82000890:	e0633001 	rsb	r3, r3, r1
82000894:	e1a03083 	lsl	r3, r3, #1
82000898:	e1a01103 	lsl	r1, r3, #2
8200089c:	e0833001 	add	r3, r3, r1
820008a0:	e0633002 	rsb	r3, r3, r2
820008a4:	e6ef3073 	uxtb	r3, r3
820008a8:	e2833030 	add	r3, r3, #48	; 0x30
820008ac:	e6ef1073 	uxtb	r1, r3
820008b0:	e24b2010 	sub	r2, fp, #16
820008b4:	e51b3008 	ldr	r3, [fp, #-8]
820008b8:	e0823003 	add	r3, r2, r3
820008bc:	e1a02001 	mov	r2, r1
820008c0:	e5c32000 	strb	r2, [r3]
    ynumber[i] = (y%10)+48;
820008c4:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
820008c8:	e3063667 	movw	r3, #26215	; 0x6667
820008cc:	e3463666 	movt	r3, #26214	; 0x6666
820008d0:	e0c10392 	smull	r0, r1, r2, r3
820008d4:	e1a01141 	asr	r1, r1, #2
820008d8:	e1a03fc2 	asr	r3, r2, #31
820008dc:	e0633001 	rsb	r3, r3, r1
820008e0:	e1a03083 	lsl	r3, r3, #1
820008e4:	e1a01103 	lsl	r1, r3, #2
820008e8:	e0833001 	add	r3, r3, r1
820008ec:	e0633002 	rsb	r3, r3, r2
820008f0:	e6ef3073 	uxtb	r3, r3
820008f4:	e2833030 	add	r3, r3, #48	; 0x30
820008f8:	e6ef1073 	uxtb	r1, r3
820008fc:	e24b2014 	sub	r2, fp, #20
82000900:	e51b3008 	ldr	r3, [fp, #-8]
82000904:	e0823003 	add	r3, r2, r3
82000908:	e1a02001 	mov	r2, r1
8200090c:	e5c32000 	strb	r2, [r3]
  char ynumber[3];
  char gotosequence1[5]= "\033[";
  char semicolon = ';';
  char end = 'H';
  int i = 0;
  for(i; i< 3; i++){
82000910:	e51b3008 	ldr	r3, [fp, #-8]
82000914:	e2833001 	add	r3, r3, #1
82000918:	e50b3008 	str	r3, [fp, #-8]
8200091c:	e51b3008 	ldr	r3, [fp, #-8]
82000920:	e3530002 	cmp	r3, #2
82000924:	daffff78 	ble	8200070c <UART_goto+0x40>
    }
  }
  


  UART_puts(gotosequence1);
82000928:	e24b301c 	sub	r3, fp, #28
8200092c:	e1a00003 	mov	r0, r3
82000930:	ebffff1c 	bl	820005a8 <UART_puts>
  UART_putc(ynumber[0]);
82000934:	e55b3014 	ldrb	r3, [fp, #-20]
82000938:	e1a00003 	mov	r0, r3
8200093c:	ebfffef0 	bl	82000504 <UART_putc>
  UART_putc(ynumber[1]);
82000940:	e55b3013 	ldrb	r3, [fp, #-19]
82000944:	e1a00003 	mov	r0, r3
82000948:	ebfffeed 	bl	82000504 <UART_putc>
  UART_putc(ynumber[2]);
8200094c:	e55b3012 	ldrb	r3, [fp, #-18]
82000950:	e1a00003 	mov	r0, r3
82000954:	ebfffeea 	bl	82000504 <UART_putc>
  UART_putc(semicolon);
82000958:	e55b3009 	ldrb	r3, [fp, #-9]
8200095c:	e1a00003 	mov	r0, r3
82000960:	ebfffee7 	bl	82000504 <UART_putc>
  UART_putc(xnumber[0]);
82000964:	e55b3010 	ldrb	r3, [fp, #-16]
82000968:	e1a00003 	mov	r0, r3
8200096c:	ebfffee4 	bl	82000504 <UART_putc>
  UART_putc(xnumber[1]);
82000970:	e55b300f 	ldrb	r3, [fp, #-15]
82000974:	e1a00003 	mov	r0, r3
82000978:	ebfffee1 	bl	82000504 <UART_putc>
  UART_putc(xnumber[2]);
8200097c:	e55b300e 	ldrb	r3, [fp, #-14]
82000980:	e1a00003 	mov	r0, r3
82000984:	ebfffede 	bl	82000504 <UART_putc>
  UART_putc(end);
82000988:	e55b300a 	ldrb	r3, [fp, #-10]
8200098c:	e1a00003 	mov	r0, r3
82000990:	ebfffedb 	bl	82000504 <UART_putc>
}
82000994:	e24bd004 	sub	sp, fp, #4
82000998:	e8bd8800 	pop	{fp, pc}

8200099c <UART_sprintf>:

// ======================================================================

int UART_sprintf(char *out, const char *format, ...)
{
8200099c:	e92d000e 	push	{r1, r2, r3}
820009a0:	e92d4810 	push	{r4, fp, lr}
820009a4:	e28db008 	add	fp, sp, #8
820009a8:	e24dd008 	sub	sp, sp, #8
820009ac:	e50b000c 	str	r0, [fp, #-12]
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
820009b0:	e28b4004 	add	r4, fp, #4
  return print(&out, varg);
820009b4:	e24b300c 	sub	r3, fp, #12
820009b8:	e1a01004 	mov	r1, r4
820009bc:	e1a00003 	mov	r0, r3
820009c0:	eb0000d7 	bl	82000d24 <print>
820009c4:	e1a03000 	mov	r3, r0
}
820009c8:	e1a00003 	mov	r0, r3
820009cc:	e24bd008 	sub	sp, fp, #8
820009d0:	e8bd4810 	pop	{r4, fp, lr}
820009d4:	e28dd00c 	add	sp, sp, #12
820009d8:	e12fff1e 	bx	lr

820009dc <UART_printf>:

// ======================================================================

int UART_printf(const char *format, ...)
{
820009dc:	e92d000f 	push	{r0, r1, r2, r3}
820009e0:	e92d4830 	push	{r4, r5, fp, lr}
820009e4:	e28db00c 	add	fp, sp, #12
  extern int print(char **out, int *varg);

  register int *varg = (int *) (&format);
820009e8:	e28b4004 	add	r4, fp, #4
  return print(0, varg);
820009ec:	e1a01004 	mov	r1, r4
820009f0:	e3a00000 	mov	r0, #0
820009f4:	eb0000ca 	bl	82000d24 <print>
820009f8:	e1a03000 	mov	r3, r0
}
820009fc:	e1a00003 	mov	r0, r3
82000a00:	e24bd00c 	sub	sp, fp, #12
82000a04:	e8bd4830 	pop	{r4, r5, fp, lr}
82000a08:	e28dd010 	add	sp, sp, #16
82000a0c:	e12fff1e 	bx	lr

82000a10 <printchar>:
#define PRINT_BUF_LEN	12

// ======================================================================

void printchar(char **str, int c)
{
82000a10:	e92d4800 	push	{fp, lr}
82000a14:	e28db004 	add	fp, sp, #4
82000a18:	e24dd008 	sub	sp, sp, #8
82000a1c:	e50b0008 	str	r0, [fp, #-8]
82000a20:	e50b100c 	str	r1, [fp, #-12]
  if (str) {
82000a24:	e51b3008 	ldr	r3, [fp, #-8]
82000a28:	e3530000 	cmp	r3, #0
82000a2c:	0a00000a 	beq	82000a5c <printchar+0x4c>
    **str = c;
82000a30:	e51b3008 	ldr	r3, [fp, #-8]
82000a34:	e5933000 	ldr	r3, [r3]
82000a38:	e51b200c 	ldr	r2, [fp, #-12]
82000a3c:	e6ef2072 	uxtb	r2, r2
82000a40:	e5c32000 	strb	r2, [r3]
    ++(*str);
82000a44:	e51b3008 	ldr	r3, [fp, #-8]
82000a48:	e5933000 	ldr	r3, [r3]
82000a4c:	e2832001 	add	r2, r3, #1
82000a50:	e51b3008 	ldr	r3, [fp, #-8]
82000a54:	e5832000 	str	r2, [r3]
82000a58:	ea000001 	b	82000a64 <printchar+0x54>
  } else
    (void) UART_putc(c);
82000a5c:	e51b000c 	ldr	r0, [fp, #-12]
82000a60:	ebfffea7 	bl	82000504 <UART_putc>
}
82000a64:	e24bd004 	sub	sp, fp, #4
82000a68:	e8bd8800 	pop	{fp, pc}

82000a6c <prints>:

// ======================================================================

int prints(char **out, const char *string, int width, int pad)
{
82000a6c:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
82000a70:	e28db014 	add	fp, sp, #20
82000a74:	e24dd010 	sub	sp, sp, #16
82000a78:	e50b0018 	str	r0, [fp, #-24]
82000a7c:	e50b101c 	str	r1, [fp, #-28]
82000a80:	e50b2020 	str	r2, [fp, #-32]
82000a84:	e50b3024 	str	r3, [fp, #-36]	; 0x24
  register int pc = 0, padchar = ' ';
82000a88:	e3a04000 	mov	r4, #0
82000a8c:	e3a07020 	mov	r7, #32

  if (width > 0) {
82000a90:	e51b3020 	ldr	r3, [fp, #-32]
82000a94:	e3530000 	cmp	r3, #0
82000a98:	da000015 	ble	82000af4 <prints+0x88>
    register int len = 0;
82000a9c:	e3a05000 	mov	r5, #0
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000aa0:	e51b601c 	ldr	r6, [fp, #-28]
82000aa4:	ea000001 	b	82000ab0 <prints+0x44>
      ++len;
82000aa8:	e2855001 	add	r5, r5, #1
  register int pc = 0, padchar = ' ';

  if (width > 0) {
    register int len = 0;
    register const char *ptr;
    for (ptr = string; *ptr; ++ptr)
82000aac:	e2866001 	add	r6, r6, #1
82000ab0:	e5d63000 	ldrb	r3, [r6]
82000ab4:	e3530000 	cmp	r3, #0
82000ab8:	1afffffa 	bne	82000aa8 <prints+0x3c>
      ++len;
    if (len >= width)
82000abc:	e51b3020 	ldr	r3, [fp, #-32]
82000ac0:	e1550003 	cmp	r5, r3
82000ac4:	ba000002 	blt	82000ad4 <prints+0x68>
      width = 0;
82000ac8:	e3a03000 	mov	r3, #0
82000acc:	e50b3020 	str	r3, [fp, #-32]
82000ad0:	ea000002 	b	82000ae0 <prints+0x74>
    else
      width -= len;
82000ad4:	e51b3020 	ldr	r3, [fp, #-32]
82000ad8:	e0653003 	rsb	r3, r5, r3
82000adc:	e50b3020 	str	r3, [fp, #-32]
    if (pad & PAD_ZERO)
82000ae0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000ae4:	e2033002 	and	r3, r3, #2
82000ae8:	e3530000 	cmp	r3, #0
82000aec:	0a000000 	beq	82000af4 <prints+0x88>
      padchar = '0';
82000af0:	e3a07030 	mov	r7, #48	; 0x30
  }
  if (!(pad & PAD_RIGHT)) {
82000af4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
82000af8:	e2033001 	and	r3, r3, #1
82000afc:	e3530000 	cmp	r3, #0
82000b00:	1a00000a 	bne	82000b30 <prints+0xc4>
    for (; width > 0; --width) {
82000b04:	ea000006 	b	82000b24 <prints+0xb8>
      printchar(out, padchar);
82000b08:	e1a01007 	mov	r1, r7
82000b0c:	e51b0018 	ldr	r0, [fp, #-24]
82000b10:	ebffffbe 	bl	82000a10 <printchar>
      ++pc;
82000b14:	e2844001 	add	r4, r4, #1
      width -= len;
    if (pad & PAD_ZERO)
      padchar = '0';
  }
  if (!(pad & PAD_RIGHT)) {
    for (; width > 0; --width) {
82000b18:	e51b3020 	ldr	r3, [fp, #-32]
82000b1c:	e2433001 	sub	r3, r3, #1
82000b20:	e50b3020 	str	r3, [fp, #-32]
82000b24:	e51b3020 	ldr	r3, [fp, #-32]
82000b28:	e3530000 	cmp	r3, #0
82000b2c:	cafffff5 	bgt	82000b08 <prints+0x9c>
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000b30:	ea000008 	b	82000b58 <prints+0xec>
    printchar(out, *string);
82000b34:	e51b301c 	ldr	r3, [fp, #-28]
82000b38:	e5d33000 	ldrb	r3, [r3]
82000b3c:	e1a01003 	mov	r1, r3
82000b40:	e51b0018 	ldr	r0, [fp, #-24]
82000b44:	ebffffb1 	bl	82000a10 <printchar>
    ++pc;
82000b48:	e2844001 	add	r4, r4, #1
    for (; width > 0; --width) {
      printchar(out, padchar);
      ++pc;
    }
  }
  for (; *string; ++string) {
82000b4c:	e51b301c 	ldr	r3, [fp, #-28]
82000b50:	e2833001 	add	r3, r3, #1
82000b54:	e50b301c 	str	r3, [fp, #-28]
82000b58:	e51b301c 	ldr	r3, [fp, #-28]
82000b5c:	e5d33000 	ldrb	r3, [r3]
82000b60:	e3530000 	cmp	r3, #0
82000b64:	1afffff2 	bne	82000b34 <prints+0xc8>
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000b68:	ea000006 	b	82000b88 <prints+0x11c>
    printchar(out, padchar);
82000b6c:	e1a01007 	mov	r1, r7
82000b70:	e51b0018 	ldr	r0, [fp, #-24]
82000b74:	ebffffa5 	bl	82000a10 <printchar>
    ++pc;
82000b78:	e2844001 	add	r4, r4, #1
  }
  for (; *string; ++string) {
    printchar(out, *string);
    ++pc;
  }
  for (; width > 0; --width) {
82000b7c:	e51b3020 	ldr	r3, [fp, #-32]
82000b80:	e2433001 	sub	r3, r3, #1
82000b84:	e50b3020 	str	r3, [fp, #-32]
82000b88:	e51b3020 	ldr	r3, [fp, #-32]
82000b8c:	e3530000 	cmp	r3, #0
82000b90:	cafffff5 	bgt	82000b6c <prints+0x100>
    printchar(out, padchar);
    ++pc;
  }

  return pc;
82000b94:	e1a03004 	mov	r3, r4
}
82000b98:	e1a00003 	mov	r0, r3
82000b9c:	e24bd014 	sub	sp, fp, #20
82000ba0:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

82000ba4 <printi>:

// ======================================================================

int printi(char **out, int i, int b, int sg, int width, int pad,
	   int letbase)
{
82000ba4:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000ba8:	e28db018 	add	fp, sp, #24
82000bac:	e24dd024 	sub	sp, sp, #36	; 0x24
82000bb0:	e50b0030 	str	r0, [fp, #-48]	; 0x30
82000bb4:	e50b1034 	str	r1, [fp, #-52]	; 0x34
82000bb8:	e50b2038 	str	r2, [fp, #-56]	; 0x38
82000bbc:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
  char print_buf[PRINT_BUF_LEN];
  register char *s;
  register int t, neg = 0, pc = 0;
82000bc0:	e3a08000 	mov	r8, #0
82000bc4:	e3a05000 	mov	r5, #0
  register unsigned int u = i;
82000bc8:	e51b7034 	ldr	r7, [fp, #-52]	; 0x34

  if (i == 0) {
82000bcc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000bd0:	e3530000 	cmp	r3, #0
82000bd4:	1a00000a 	bne	82000c04 <printi+0x60>
    print_buf[0] = '0';
82000bd8:	e3a03030 	mov	r3, #48	; 0x30
82000bdc:	e54b3028 	strb	r3, [fp, #-40]	; 0x28
    print_buf[1] = '\0';
82000be0:	e3a03000 	mov	r3, #0
82000be4:	e54b3027 	strb	r3, [fp, #-39]	; 0x27
    return prints(out, print_buf, width, pad);
82000be8:	e24b1028 	sub	r1, fp, #40	; 0x28
82000bec:	e59b3008 	ldr	r3, [fp, #8]
82000bf0:	e59b2004 	ldr	r2, [fp, #4]
82000bf4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000bf8:	ebffff9b 	bl	82000a6c <prints>
82000bfc:	e1a03000 	mov	r3, r0
82000c00:	ea000044 	b	82000d18 <printi+0x174>
  }

  if (sg && b == 10 && i < 0) {
82000c04:	e51b303c 	ldr	r3, [fp, #-60]	; 0x3c
82000c08:	e3530000 	cmp	r3, #0
82000c0c:	0a000009 	beq	82000c38 <printi+0x94>
82000c10:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000c14:	e353000a 	cmp	r3, #10
82000c18:	1a000006 	bne	82000c38 <printi+0x94>
82000c1c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000c20:	e3530000 	cmp	r3, #0
82000c24:	aa000003 	bge	82000c38 <printi+0x94>
    neg = 1;
82000c28:	e3a08001 	mov	r8, #1
    u = -i;
82000c2c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
82000c30:	e2633000 	rsb	r3, r3, #0
82000c34:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
82000c38:	e24b4028 	sub	r4, fp, #40	; 0x28
82000c3c:	e284400b 	add	r4, r4, #11
  *s = '\0';
82000c40:	e3a03000 	mov	r3, #0
82000c44:	e5c43000 	strb	r3, [r4]

  while (u) {
82000c48:	ea000015 	b	82000ca4 <printi+0x100>
    t = u % b;
82000c4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000c50:	e1a01003 	mov	r1, r3
82000c54:	e1a00007 	mov	r0, r7
82000c58:	eb000168 	bl	82001200 <__aeabi_uidivmod>
82000c5c:	e1a03001 	mov	r3, r1
82000c60:	e1a06003 	mov	r6, r3
    if (t >= 10)
82000c64:	e3560009 	cmp	r6, #9
82000c68:	da000002 	ble	82000c78 <printi+0xd4>
      t += letbase - '0' - 10;
82000c6c:	e59b300c 	ldr	r3, [fp, #12]
82000c70:	e243303a 	sub	r3, r3, #58	; 0x3a
82000c74:	e0866003 	add	r6, r6, r3
    *--s = t + '0';
82000c78:	e2444001 	sub	r4, r4, #1
82000c7c:	e6ef3076 	uxtb	r3, r6
82000c80:	e2833030 	add	r3, r3, #48	; 0x30
82000c84:	e6ef3073 	uxtb	r3, r3
82000c88:	e5c43000 	strb	r3, [r4]
    u /= b;
82000c8c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
82000c90:	e1a01003 	mov	r1, r3
82000c94:	e1a00007 	mov	r0, r7
82000c98:	eb0000dd 	bl	82001014 <__aeabi_uidiv>
82000c9c:	e1a03000 	mov	r3, r0
82000ca0:	e1a07003 	mov	r7, r3
  }

  s = print_buf + PRINT_BUF_LEN - 1;
  *s = '\0';

  while (u) {
82000ca4:	e3570000 	cmp	r7, #0
82000ca8:	1affffe7 	bne	82000c4c <printi+0xa8>
      t += letbase - '0' - 10;
    *--s = t + '0';
    u /= b;
  }

  if (neg) {
82000cac:	e3580000 	cmp	r8, #0
82000cb0:	0a000011 	beq	82000cfc <printi+0x158>
    if (width && (pad & PAD_ZERO)) {
82000cb4:	e59b3004 	ldr	r3, [fp, #4]
82000cb8:	e3530000 	cmp	r3, #0
82000cbc:	0a00000b 	beq	82000cf0 <printi+0x14c>
82000cc0:	e59b3008 	ldr	r3, [fp, #8]
82000cc4:	e2033002 	and	r3, r3, #2
82000cc8:	e3530000 	cmp	r3, #0
82000ccc:	0a000007 	beq	82000cf0 <printi+0x14c>
      printchar(out, '-');
82000cd0:	e3a0102d 	mov	r1, #45	; 0x2d
82000cd4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000cd8:	ebffff4c 	bl	82000a10 <printchar>
      ++pc;
82000cdc:	e2855001 	add	r5, r5, #1
      --width;
82000ce0:	e59b3004 	ldr	r3, [fp, #4]
82000ce4:	e2433001 	sub	r3, r3, #1
82000ce8:	e58b3004 	str	r3, [fp, #4]
82000cec:	ea000002 	b	82000cfc <printi+0x158>
    } else {
      *--s = '-';
82000cf0:	e2444001 	sub	r4, r4, #1
82000cf4:	e3a0302d 	mov	r3, #45	; 0x2d
82000cf8:	e5c43000 	strb	r3, [r4]
    }
  }

  return pc + prints(out, s, width, pad);
82000cfc:	e59b3008 	ldr	r3, [fp, #8]
82000d00:	e59b2004 	ldr	r2, [fp, #4]
82000d04:	e1a01004 	mov	r1, r4
82000d08:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
82000d0c:	ebffff56 	bl	82000a6c <prints>
82000d10:	e1a03000 	mov	r3, r0
82000d14:	e0833005 	add	r3, r3, r5
}
82000d18:	e1a00003 	mov	r0, r3
82000d1c:	e24bd018 	sub	sp, fp, #24
82000d20:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

82000d24 <print>:

// ======================================================================

int print(char **out, int *varg)
{
82000d24:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
82000d28:	e28db018 	add	fp, sp, #24
82000d2c:	e24dd024 	sub	sp, sp, #36	; 0x24
82000d30:	e50b0028 	str	r0, [fp, #-40]	; 0x28
82000d34:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
  register int width, pad;
  register int pc = 0;
82000d38:	e3a05000 	mov	r5, #0
  register char *format = (char *) (*varg++);
82000d3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000d40:	e2832004 	add	r2, r3, #4
82000d44:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000d48:	e5933000 	ldr	r3, [r3]
82000d4c:	e1a04003 	mov	r4, r3
  char scr[2];

  for (; *format != 0; ++format) {
82000d50:	ea00009c 	b	82000fc8 <print+0x2a4>
    if (*format == '%') {
82000d54:	e5d43000 	ldrb	r3, [r4]
82000d58:	e3530025 	cmp	r3, #37	; 0x25
82000d5c:	1a000093 	bne	82000fb0 <print+0x28c>
      ++format;
82000d60:	e2844001 	add	r4, r4, #1
      width = pad = 0;
82000d64:	e3a07000 	mov	r7, #0
82000d68:	e1a06007 	mov	r6, r7
      if (*format == '\0')
82000d6c:	e5d43000 	ldrb	r3, [r4]
82000d70:	e3530000 	cmp	r3, #0
82000d74:	1a000000 	bne	82000d7c <print+0x58>
	break;
82000d78:	ea000095 	b	82000fd4 <print+0x2b0>
      if (*format == '%')
82000d7c:	e5d43000 	ldrb	r3, [r4]
82000d80:	e3530025 	cmp	r3, #37	; 0x25
82000d84:	1a000000 	bne	82000d8c <print+0x68>
	goto out;
82000d88:	ea000088 	b	82000fb0 <print+0x28c>
      if (*format == '-') {
82000d8c:	e5d43000 	ldrb	r3, [r4]
82000d90:	e353002d 	cmp	r3, #45	; 0x2d
82000d94:	1a000001 	bne	82000da0 <print+0x7c>
	++format;
82000d98:	e2844001 	add	r4, r4, #1
	pad = PAD_RIGHT;
82000d9c:	e3a07001 	mov	r7, #1
      }
      while (*format == '0') {
82000da0:	ea000001 	b	82000dac <print+0x88>
	++format;
82000da4:	e2844001 	add	r4, r4, #1
	pad |= PAD_ZERO;
82000da8:	e3877002 	orr	r7, r7, #2
	goto out;
      if (*format == '-') {
	++format;
	pad = PAD_RIGHT;
      }
      while (*format == '0') {
82000dac:	e5d43000 	ldrb	r3, [r4]
82000db0:	e3530030 	cmp	r3, #48	; 0x30
82000db4:	0afffffa 	beq	82000da4 <print+0x80>
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000db8:	ea000007 	b	82000ddc <print+0xb8>
	width *= 10;
82000dbc:	e1a03006 	mov	r3, r6
82000dc0:	e1a03083 	lsl	r3, r3, #1
82000dc4:	e1a02103 	lsl	r2, r3, #2
82000dc8:	e0836002 	add	r6, r3, r2
	width += *format - '0';
82000dcc:	e5d43000 	ldrb	r3, [r4]
82000dd0:	e2433030 	sub	r3, r3, #48	; 0x30
82000dd4:	e0866003 	add	r6, r6, r3
      }
      while (*format == '0') {
	++format;
	pad |= PAD_ZERO;
      }
      for (; *format >= '0' && *format <= '9'; ++format) {
82000dd8:	e2844001 	add	r4, r4, #1
82000ddc:	e5d43000 	ldrb	r3, [r4]
82000de0:	e353002f 	cmp	r3, #47	; 0x2f
82000de4:	9a000002 	bls	82000df4 <print+0xd0>
82000de8:	e5d43000 	ldrb	r3, [r4]
82000dec:	e3530039 	cmp	r3, #57	; 0x39
82000df0:	9afffff1 	bls	82000dbc <print+0x98>
	width *= 10;
	width += *format - '0';
      }
      if (*format == 's') {
82000df4:	e5d43000 	ldrb	r3, [r4]
82000df8:	e3530073 	cmp	r3, #115	; 0x73
82000dfc:	1a000010 	bne	82000e44 <print+0x120>
	register char *s = *((char **) varg++);
82000e00:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000e04:	e2832004 	add	r2, r3, #4
82000e08:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000e0c:	e5938000 	ldr	r8, [r3]
	pc += prints(out, s ? s : "(null)", width, pad);
82000e10:	e3580000 	cmp	r8, #0
82000e14:	0a000001 	beq	82000e20 <print+0xfc>
82000e18:	e1a01008 	mov	r1, r8
82000e1c:	ea000001 	b	82000e28 <print+0x104>
82000e20:	e30112e8 	movw	r1, #4840	; 0x12e8
82000e24:	e3481200 	movt	r1, #33280	; 0x8200
82000e28:	e1a03007 	mov	r3, r7
82000e2c:	e1a02006 	mov	r2, r6
82000e30:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000e34:	ebffff0c 	bl	82000a6c <prints>
82000e38:	e1a03000 	mov	r3, r0
82000e3c:	e0855003 	add	r5, r5, r3
	continue;
82000e40:	ea00005f 	b	82000fc4 <print+0x2a0>
      }
      if (*format == 'd') {
82000e44:	e5d43000 	ldrb	r3, [r4]
82000e48:	e3530064 	cmp	r3, #100	; 0x64
82000e4c:	1a00000e 	bne	82000e8c <print+0x168>
	pc += printi(out, *varg++, 10, 1, width, pad, 'a');
82000e50:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000e54:	e2832004 	add	r2, r3, #4
82000e58:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000e5c:	e5931000 	ldr	r1, [r3]
82000e60:	e3a03061 	mov	r3, #97	; 0x61
82000e64:	e58d3008 	str	r3, [sp, #8]
82000e68:	e58d7004 	str	r7, [sp, #4]
82000e6c:	e58d6000 	str	r6, [sp]
82000e70:	e3a03001 	mov	r3, #1
82000e74:	e3a0200a 	mov	r2, #10
82000e78:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000e7c:	ebffff48 	bl	82000ba4 <printi>
82000e80:	e1a03000 	mov	r3, r0
82000e84:	e0855003 	add	r5, r5, r3
	continue;
82000e88:	ea00004d 	b	82000fc4 <print+0x2a0>
      }
      if (*format == 'x') {
82000e8c:	e5d43000 	ldrb	r3, [r4]
82000e90:	e3530078 	cmp	r3, #120	; 0x78
82000e94:	1a00000e 	bne	82000ed4 <print+0x1b0>
	pc += printi(out, *varg++, 16, 0, width, pad, 'a');
82000e98:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000e9c:	e2832004 	add	r2, r3, #4
82000ea0:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000ea4:	e5931000 	ldr	r1, [r3]
82000ea8:	e3a03061 	mov	r3, #97	; 0x61
82000eac:	e58d3008 	str	r3, [sp, #8]
82000eb0:	e58d7004 	str	r7, [sp, #4]
82000eb4:	e58d6000 	str	r6, [sp]
82000eb8:	e3a03000 	mov	r3, #0
82000ebc:	e3a02010 	mov	r2, #16
82000ec0:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000ec4:	ebffff36 	bl	82000ba4 <printi>
82000ec8:	e1a03000 	mov	r3, r0
82000ecc:	e0855003 	add	r5, r5, r3
	continue;
82000ed0:	ea00003b 	b	82000fc4 <print+0x2a0>
      }
      if (*format == 'X') {
82000ed4:	e5d43000 	ldrb	r3, [r4]
82000ed8:	e3530058 	cmp	r3, #88	; 0x58
82000edc:	1a00000e 	bne	82000f1c <print+0x1f8>
	pc += printi(out, *varg++, 16, 0, width, pad, 'A');
82000ee0:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000ee4:	e2832004 	add	r2, r3, #4
82000ee8:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000eec:	e5931000 	ldr	r1, [r3]
82000ef0:	e3a03041 	mov	r3, #65	; 0x41
82000ef4:	e58d3008 	str	r3, [sp, #8]
82000ef8:	e58d7004 	str	r7, [sp, #4]
82000efc:	e58d6000 	str	r6, [sp]
82000f00:	e3a03000 	mov	r3, #0
82000f04:	e3a02010 	mov	r2, #16
82000f08:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000f0c:	ebffff24 	bl	82000ba4 <printi>
82000f10:	e1a03000 	mov	r3, r0
82000f14:	e0855003 	add	r5, r5, r3
	continue;
82000f18:	ea000029 	b	82000fc4 <print+0x2a0>
      }
      if (*format == 'u') {
82000f1c:	e5d43000 	ldrb	r3, [r4]
82000f20:	e3530075 	cmp	r3, #117	; 0x75
82000f24:	1a00000e 	bne	82000f64 <print+0x240>
	pc += printi(out, *varg++, 10, 0, width, pad, 'a');
82000f28:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000f2c:	e2832004 	add	r2, r3, #4
82000f30:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000f34:	e5931000 	ldr	r1, [r3]
82000f38:	e3a03061 	mov	r3, #97	; 0x61
82000f3c:	e58d3008 	str	r3, [sp, #8]
82000f40:	e58d7004 	str	r7, [sp, #4]
82000f44:	e58d6000 	str	r6, [sp]
82000f48:	e3a03000 	mov	r3, #0
82000f4c:	e3a0200a 	mov	r2, #10
82000f50:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000f54:	ebffff12 	bl	82000ba4 <printi>
82000f58:	e1a03000 	mov	r3, r0
82000f5c:	e0855003 	add	r5, r5, r3
	continue;
82000f60:	ea000017 	b	82000fc4 <print+0x2a0>
      }
      if (*format == 'c') {
82000f64:	e5d43000 	ldrb	r3, [r4]
82000f68:	e3530063 	cmp	r3, #99	; 0x63
82000f6c:	1a000014 	bne	82000fc4 <print+0x2a0>
	/* char are converted to int then pushed on the stack */
	scr[0] = *varg++;
82000f70:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
82000f74:	e2832004 	add	r2, r3, #4
82000f78:	e50b202c 	str	r2, [fp, #-44]	; 0x2c
82000f7c:	e5933000 	ldr	r3, [r3]
82000f80:	e6ef3073 	uxtb	r3, r3
82000f84:	e54b3020 	strb	r3, [fp, #-32]
	scr[1] = '\0';
82000f88:	e3a03000 	mov	r3, #0
82000f8c:	e54b301f 	strb	r3, [fp, #-31]
	pc += prints(out, scr, width, pad);
82000f90:	e24b1020 	sub	r1, fp, #32
82000f94:	e1a03007 	mov	r3, r7
82000f98:	e1a02006 	mov	r2, r6
82000f9c:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000fa0:	ebfffeb1 	bl	82000a6c <prints>
82000fa4:	e1a03000 	mov	r3, r0
82000fa8:	e0855003 	add	r5, r5, r3
	continue;
82000fac:	ea000004 	b	82000fc4 <print+0x2a0>
      }
    } else {
    out:
      printchar(out, *format);
82000fb0:	e5d43000 	ldrb	r3, [r4]
82000fb4:	e1a01003 	mov	r1, r3
82000fb8:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
82000fbc:	ebfffe93 	bl	82000a10 <printchar>
      ++pc;
82000fc0:	e2855001 	add	r5, r5, #1
  register int width, pad;
  register int pc = 0;
  register char *format = (char *) (*varg++);
  char scr[2];

  for (; *format != 0; ++format) {
82000fc4:	e2844001 	add	r4, r4, #1
82000fc8:	e5d43000 	ldrb	r3, [r4]
82000fcc:	e3530000 	cmp	r3, #0
82000fd0:	1affff5f 	bne	82000d54 <print+0x30>
    out:
      printchar(out, *format);
      ++pc;
    }
  }
  if (out)
82000fd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
82000fd8:	e3530000 	cmp	r3, #0
82000fdc:	0a000003 	beq	82000ff0 <print+0x2cc>
    **out = '\0';
82000fe0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
82000fe4:	e5933000 	ldr	r3, [r3]
82000fe8:	e3a02000 	mov	r2, #0
82000fec:	e5c32000 	strb	r2, [r3]
  return pc;
82000ff0:	e1a03005 	mov	r3, r5
}
82000ff4:	e1a00003 	mov	r0, r3
82000ff8:	e24bd018 	sub	sp, fp, #24
82000ffc:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

82001000 <raise>:

// ======================================================================

void raise(void)
{
82001000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
82001004:	e28db000 	add	fp, sp, #0
}
82001008:	e24bd000 	sub	sp, fp, #0
8200100c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
82001010:	e12fff1e 	bx	lr

82001014 <__aeabi_uidiv>:
82001014:	e2512001 	subs	r2, r1, #1
82001018:	012fff1e 	bxeq	lr
8200101c:	3a000074 	bcc	820011f4 <__aeabi_uidiv+0x1e0>
82001020:	e1500001 	cmp	r0, r1
82001024:	9a00006b 	bls	820011d8 <__aeabi_uidiv+0x1c4>
82001028:	e1110002 	tst	r1, r2
8200102c:	0a00006c 	beq	820011e4 <__aeabi_uidiv+0x1d0>
82001030:	e16f3f10 	clz	r3, r0
82001034:	e16f2f11 	clz	r2, r1
82001038:	e0423003 	sub	r3, r2, r3
8200103c:	e273301f 	rsbs	r3, r3, #31
82001040:	10833083 	addne	r3, r3, r3, lsl #1
82001044:	e3a02000 	mov	r2, #0
82001048:	108ff103 	addne	pc, pc, r3, lsl #2
8200104c:	e320f000 	nop	{0}
82001050:	e1500f81 	cmp	r0, r1, lsl #31
82001054:	e0a22002 	adc	r2, r2, r2
82001058:	20400f81 	subcs	r0, r0, r1, lsl #31
8200105c:	e1500f01 	cmp	r0, r1, lsl #30
82001060:	e0a22002 	adc	r2, r2, r2
82001064:	20400f01 	subcs	r0, r0, r1, lsl #30
82001068:	e1500e81 	cmp	r0, r1, lsl #29
8200106c:	e0a22002 	adc	r2, r2, r2
82001070:	20400e81 	subcs	r0, r0, r1, lsl #29
82001074:	e1500e01 	cmp	r0, r1, lsl #28
82001078:	e0a22002 	adc	r2, r2, r2
8200107c:	20400e01 	subcs	r0, r0, r1, lsl #28
82001080:	e1500d81 	cmp	r0, r1, lsl #27
82001084:	e0a22002 	adc	r2, r2, r2
82001088:	20400d81 	subcs	r0, r0, r1, lsl #27
8200108c:	e1500d01 	cmp	r0, r1, lsl #26
82001090:	e0a22002 	adc	r2, r2, r2
82001094:	20400d01 	subcs	r0, r0, r1, lsl #26
82001098:	e1500c81 	cmp	r0, r1, lsl #25
8200109c:	e0a22002 	adc	r2, r2, r2
820010a0:	20400c81 	subcs	r0, r0, r1, lsl #25
820010a4:	e1500c01 	cmp	r0, r1, lsl #24
820010a8:	e0a22002 	adc	r2, r2, r2
820010ac:	20400c01 	subcs	r0, r0, r1, lsl #24
820010b0:	e1500b81 	cmp	r0, r1, lsl #23
820010b4:	e0a22002 	adc	r2, r2, r2
820010b8:	20400b81 	subcs	r0, r0, r1, lsl #23
820010bc:	e1500b01 	cmp	r0, r1, lsl #22
820010c0:	e0a22002 	adc	r2, r2, r2
820010c4:	20400b01 	subcs	r0, r0, r1, lsl #22
820010c8:	e1500a81 	cmp	r0, r1, lsl #21
820010cc:	e0a22002 	adc	r2, r2, r2
820010d0:	20400a81 	subcs	r0, r0, r1, lsl #21
820010d4:	e1500a01 	cmp	r0, r1, lsl #20
820010d8:	e0a22002 	adc	r2, r2, r2
820010dc:	20400a01 	subcs	r0, r0, r1, lsl #20
820010e0:	e1500981 	cmp	r0, r1, lsl #19
820010e4:	e0a22002 	adc	r2, r2, r2
820010e8:	20400981 	subcs	r0, r0, r1, lsl #19
820010ec:	e1500901 	cmp	r0, r1, lsl #18
820010f0:	e0a22002 	adc	r2, r2, r2
820010f4:	20400901 	subcs	r0, r0, r1, lsl #18
820010f8:	e1500881 	cmp	r0, r1, lsl #17
820010fc:	e0a22002 	adc	r2, r2, r2
82001100:	20400881 	subcs	r0, r0, r1, lsl #17
82001104:	e1500801 	cmp	r0, r1, lsl #16
82001108:	e0a22002 	adc	r2, r2, r2
8200110c:	20400801 	subcs	r0, r0, r1, lsl #16
82001110:	e1500781 	cmp	r0, r1, lsl #15
82001114:	e0a22002 	adc	r2, r2, r2
82001118:	20400781 	subcs	r0, r0, r1, lsl #15
8200111c:	e1500701 	cmp	r0, r1, lsl #14
82001120:	e0a22002 	adc	r2, r2, r2
82001124:	20400701 	subcs	r0, r0, r1, lsl #14
82001128:	e1500681 	cmp	r0, r1, lsl #13
8200112c:	e0a22002 	adc	r2, r2, r2
82001130:	20400681 	subcs	r0, r0, r1, lsl #13
82001134:	e1500601 	cmp	r0, r1, lsl #12
82001138:	e0a22002 	adc	r2, r2, r2
8200113c:	20400601 	subcs	r0, r0, r1, lsl #12
82001140:	e1500581 	cmp	r0, r1, lsl #11
82001144:	e0a22002 	adc	r2, r2, r2
82001148:	20400581 	subcs	r0, r0, r1, lsl #11
8200114c:	e1500501 	cmp	r0, r1, lsl #10
82001150:	e0a22002 	adc	r2, r2, r2
82001154:	20400501 	subcs	r0, r0, r1, lsl #10
82001158:	e1500481 	cmp	r0, r1, lsl #9
8200115c:	e0a22002 	adc	r2, r2, r2
82001160:	20400481 	subcs	r0, r0, r1, lsl #9
82001164:	e1500401 	cmp	r0, r1, lsl #8
82001168:	e0a22002 	adc	r2, r2, r2
8200116c:	20400401 	subcs	r0, r0, r1, lsl #8
82001170:	e1500381 	cmp	r0, r1, lsl #7
82001174:	e0a22002 	adc	r2, r2, r2
82001178:	20400381 	subcs	r0, r0, r1, lsl #7
8200117c:	e1500301 	cmp	r0, r1, lsl #6
82001180:	e0a22002 	adc	r2, r2, r2
82001184:	20400301 	subcs	r0, r0, r1, lsl #6
82001188:	e1500281 	cmp	r0, r1, lsl #5
8200118c:	e0a22002 	adc	r2, r2, r2
82001190:	20400281 	subcs	r0, r0, r1, lsl #5
82001194:	e1500201 	cmp	r0, r1, lsl #4
82001198:	e0a22002 	adc	r2, r2, r2
8200119c:	20400201 	subcs	r0, r0, r1, lsl #4
820011a0:	e1500181 	cmp	r0, r1, lsl #3
820011a4:	e0a22002 	adc	r2, r2, r2
820011a8:	20400181 	subcs	r0, r0, r1, lsl #3
820011ac:	e1500101 	cmp	r0, r1, lsl #2
820011b0:	e0a22002 	adc	r2, r2, r2
820011b4:	20400101 	subcs	r0, r0, r1, lsl #2
820011b8:	e1500081 	cmp	r0, r1, lsl #1
820011bc:	e0a22002 	adc	r2, r2, r2
820011c0:	20400081 	subcs	r0, r0, r1, lsl #1
820011c4:	e1500001 	cmp	r0, r1
820011c8:	e0a22002 	adc	r2, r2, r2
820011cc:	20400001 	subcs	r0, r0, r1
820011d0:	e1a00002 	mov	r0, r2
820011d4:	e12fff1e 	bx	lr
820011d8:	03a00001 	moveq	r0, #1
820011dc:	13a00000 	movne	r0, #0
820011e0:	e12fff1e 	bx	lr
820011e4:	e16f2f11 	clz	r2, r1
820011e8:	e262201f 	rsb	r2, r2, #31
820011ec:	e1a00230 	lsr	r0, r0, r2
820011f0:	e12fff1e 	bx	lr
820011f4:	e3500000 	cmp	r0, #0
820011f8:	13e00000 	mvnne	r0, #0
820011fc:	ea000007 	b	82001220 <__aeabi_idiv0>

82001200 <__aeabi_uidivmod>:
82001200:	e3510000 	cmp	r1, #0
82001204:	0afffffa 	beq	820011f4 <__aeabi_uidiv+0x1e0>
82001208:	e92d4003 	push	{r0, r1, lr}
8200120c:	ebffff80 	bl	82001014 <__aeabi_uidiv>
82001210:	e8bd4006 	pop	{r1, r2, lr}
82001214:	e0030092 	mul	r3, r2, r0
82001218:	e0411003 	sub	r1, r1, r3
8200121c:	e12fff1e 	bx	lr

82001220 <__aeabi_idiv0>:
82001220:	e12fff1e 	bx	lr

Disassembly of section .rodata:

82001224 <.LC0>:
82001224:	79206649 	stmdbvc	r0!, {r0, r3, r6, r9, sl, sp, lr}
82001228:	7420756f 	strtvc	r7, [r0], #-1391	; 0x56f
8200122c:	20657079 	rsbcs	r7, r5, r9, ror r0
82001230:	68632061 	stmdavs	r3!, {r0, r5, r6, sp}^
82001234:	63617261 	cmnvs	r1, #268435462	; 0x10000006
82001238:	2c726574 	cfldr64cs	mvdx6, [r2], #-464	; 0xfffffe30
8200123c:	20746920 	rsbscs	r6, r4, r0, lsr #18
82001240:	6c6c6977 	stclvs	9, cr6, [ip], #-476	; 0xfffffe24
82001244:	20656220 	rsbcs	r6, r5, r0, lsr #4
82001248:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
8200124c:	3a646574 	bcc	8391a824 <__bss_start+0x1919534>
82001250:	00000020 	andeq	r0, r0, r0, lsr #32

82001254 <.LC1>:
82001254:	0000000a 	andeq	r0, r0, sl

82001258 <.LC2>:
82001258:	79206649 	stmdbvc	r0!, {r0, r3, r6, r9, sl, sp, lr}
8200125c:	7420756f 	strtvc	r7, [r0], #-1391	; 0x56f
82001260:	20657079 	rsbcs	r7, r5, r9, ror r0
82001264:	65682061 	strbvs	r2, [r8, #-97]!	; 0x61
82001268:	642d6178 	strtvs	r6, [sp], #-376	; 0x178
8200126c:	6d696365 	stclvs	3, cr6, [r9, #-404]!	; 0xfffffe6c
82001270:	6e206c61 	cdpvs	12, 2, cr6, cr0, cr1, {3}
82001274:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
82001278:	69202c72 	stmdbvs	r0!, {r1, r4, r5, r6, sl, fp, sp}
8200127c:	69772074 	ldmdbvs	r7!, {r2, r4, r5, r6, sp}^
82001280:	62206c6c 	eorvs	r6, r0, #108, 24	; 0x6c00
82001284:	72702065 	rsbsvc	r2, r0, #101	; 0x65
82001288:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
8200128c:	00203a64 	eoreq	r3, r0, r4, ror #20

82001290 <.LC3>:
82001290:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
82001294:	0000000a 	andeq	r0, r0, sl

82001298 <.LC4>:
82001298:	79206649 	stmdbvc	r0!, {r0, r3, r6, r9, sl, sp, lr}
8200129c:	7420756f 	strtvc	r7, [r0], #-1391	; 0x56f
820012a0:	20657079 	rsbcs	r7, r5, r9, ror r0
820012a4:	696c2061 	stmdbvs	ip!, {r0, r5, r6, sp}^
820012a8:	6f20656e 	svcvs	0x0020656e
820012ac:	68632066 	stmdavs	r3!, {r1, r2, r5, r6, sp}^
820012b0:	63617261 	cmnvs	r1, #268435462	; 0x10000006
820012b4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
820012b8:	7469202c 	strbtvc	r2, [r9], #-44	; 0x2c
820012bc:	6c697720 	stclvs	7, cr7, [r9], #-128	; 0xffffff80
820012c0:	6562206c 	strbvs	r2, [r2, #-108]!	; 0x6c
820012c4:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
820012c8:	6465746e 	strbtvs	r7, [r5], #-1134	; 0x46e
820012cc:	0000203a 	andeq	r2, r0, sl, lsr r0

820012d0 <.LC5>:
820012d0:	000a7325 	andeq	r7, sl, r5, lsr #6

820012d4 <.LC0>:
820012d4:	4a325b1b 	bmi	82c97f48 <__bss_start+0xc96c58>
820012d8:	3b305b1b 	blcc	82c17f4c <__bss_start+0xc16c5c>
820012dc:	00004830 	andeq	r4, r0, r0, lsr r8
	...

820012e8 <.LC0>:
820012e8:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
820012ec:	0000296c 	andeq	r2, r0, ip, ror #18

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003841 	andeq	r3, r0, r1, asr #16
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002e 	andeq	r0, r0, lr, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	06003841 	streq	r3, [r0], -r1, asr #16
  1c:	0841070a 	stmdaeq	r1, {r1, r3, r8, r9, sl}^
  20:	0a020901 	beq	8242c <shift+0x8242c>
  24:	12010c03 	andne	r0, r1, #768	; 0x300
  28:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  30:	1b021a01 	blne	8683c <shift+0x8683c>
  34:	44012203 	strmi	r2, [r1], #-515	; 0x203
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <shift+0x10d0d24>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	31302e35 	teqcc	r0, r5, lsr lr
  1c:	2029332d 	eorcs	r3, r9, sp, lsr #6
  20:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  24:	30322033 	eorscc	r2, r2, r3, lsr r0
  28:	31303531 	teqcc	r0, r1, lsr r5
  2c:	28203331 	stmdacs	r0!, {r0, r4, r5, r8, r9, ip, sp}
  30:	72657270 	rsbvc	r7, r5, #112, 4
  34:	61656c65 	cmnvs	r5, r5, ror #24
  38:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000043 	andeq	r0, r0, r3, asr #32
   4:	001e0002 	andseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  20:	00532e74 	subseq	r2, r3, r4, ror lr
  24:	00000000 	andeq	r0, r0, r0
  28:	00020500 	andeq	r0, r2, r0, lsl #10
  2c:	18820000 	stmne	r2, {}	; <UNPREDICTABLE>
  30:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  34:	2f302f2f 	svccs	0x00302f2f
  38:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  3c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  40:	0a022f30 	beq	8bd08 <shift+0x8bd08>
  44:	44010100 	strmi	r0, [r1], #-256	; 0x100
  48:	02000000 	andeq	r0, r0, #0
  4c:	00002300 	andeq	r2, r0, r0, lsl #6
  50:	fb010200 	blx	4085a <shift+0x4085a>
  54:	01000d0e 	tsteq	r0, lr, lsl #26
  58:	00010101 	andeq	r0, r1, r1, lsl #2
  5c:	00010000 	andeq	r0, r1, r0
  60:	75000100 	strvc	r0, [r0, #-256]	; 0x100
  64:	2d747261 	lfmcs	f7, 2, [r4, #-388]!	; 0xfffffe7c
  68:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  6c:	00632e31 	rsbeq	r2, r3, r1, lsr lr
  70:	00000000 	andeq	r0, r0, r0
  74:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
  78:	03820000 	orreq	r0, r2, #0
  7c:	676a0109 	strbvs	r0, [sl, -r9, lsl #2]!
  80:	67686767 	strbvs	r6, [r8, -r7, ror #14]!
  84:	6767844b 	strbvs	r8, [r7, -fp, asr #8]!
  88:	06022fa0 	streq	r2, [r2], -r0, lsr #31
  8c:	95010100 	strls	r0, [r1, #-256]	; 0x100
  90:	02000001 	andeq	r0, r0, #1
  94:	00001d00 	andeq	r1, r0, r0, lsl #26
  98:	fb010200 	blx	408a2 <shift+0x408a2>
  9c:	01000d0e 	tsteq	r0, lr, lsl #26
  a0:	00010101 	andeq	r0, r1, r1, lsl #2
  a4:	00010000 	andeq	r0, r1, r0
  a8:	75000100 	strvc	r0, [r0, #-256]	; 0x100
  ac:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  b0:	00000063 	andeq	r0, r0, r3, rrx
  b4:	05000000 	streq	r0, [r0, #-0]
  b8:	0000f802 	andeq	pc, r0, r2, lsl #16
  bc:	01170382 	tsteq	r7, r2, lsl #7
  c0:	04020069 	streq	r0, [r2], #-105	; 0x69
  c4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
  c8:	2f6884bc 	svccs	0x006884bc
  cc:	6884696b 	stmvs	r4, {r0, r1, r3, r5, r6, r8, fp, sp, lr}
  d0:	4b686b2f 	blmi	1a1ad94 <shift+0x1a1ad94>
  d4:	01040200 	mrseq	r0, R12_usr
  d8:	6783d74d 	strvs	sp, [r3, sp, asr #14]
  dc:	02040200 	andeq	r0, r4, #0, 4
  e0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
  e4:	06660304 	strbteq	r0, [r6], -r4, lsl #6
  e8:	0402004b 	streq	r0, [r2], #-75	; 0x4b
  ec:	06660601 	strbteq	r0, [r6], -r1, lsl #12
  f0:	04020067 	streq	r0, [r2], #-103	; 0x67
  f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
  f8:	04020067 	streq	r0, [r2], #-103	; 0x67
  fc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 100:	04020067 	streq	r0, [r2], #-103	; 0x67
 104:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 108:	04020067 	streq	r0, [r2], #-103	; 0x67
 10c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 110:	04020067 	streq	r0, [r2], #-103	; 0x67
 114:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 118:	04020067 	streq	r0, [r2], #-103	; 0x67
 11c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 120:	04020067 	streq	r0, [r2], #-103	; 0x67
 124:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 128:	04020067 	streq	r0, [r2], #-103	; 0x67
 12c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 130:	04020067 	streq	r0, [r2], #-103	; 0x67
 134:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 138:	04020067 	streq	r0, [r2], #-103	; 0x67
 13c:	00660602 	rsbeq	r0, r6, r2, lsl #12
 140:	66030402 	strvs	r0, [r3], -r2, lsl #8
 144:	02006706 	andeq	r6, r0, #1572864	; 0x180000
 148:	66060204 	strvs	r0, [r6], -r4, lsl #4
 14c:	03040200 	movweq	r0, #16896	; 0x4200
 150:	00670666 	rsbeq	r0, r7, r6, ror #12
 154:	06020402 	streq	r0, [r2], -r2, lsl #8
 158:	04020066 	streq	r0, [r2], #-102	; 0x66
 15c:	67066603 	strvs	r6, [r6, -r3, lsl #12]
 160:	02040200 	andeq	r0, r4, #0, 4
 164:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 168:	06660304 	strbteq	r0, [r6], -r4, lsl #6
 16c:	04020067 	streq	r0, [r2], #-103	; 0x67
 170:	00660602 	rsbeq	r0, r6, r2, lsl #12
 174:	66030402 	strvs	r0, [r3], -r2, lsl #8
 178:	02006706 	andeq	r6, r0, #1572864	; 0x180000
 17c:	66060204 	strvs	r0, [r6], -r4, lsl #4
 180:	03040200 	movweq	r0, #16896	; 0x4200
 184:	4b670666 	blmi	19c1b24 <shift+0x19c1b24>
 188:	67858367 	strvs	r8, [r5, r7, ror #6]
 18c:	6b306883 	blvs	c1a3a0 <shift+0xc1a3a0>
 190:	004d4b83 	subeq	r4, sp, r3, lsl #23
 194:	2f020402 	svccs	0x00020402
 198:	02040200 	andeq	r0, r4, #0, 4
 19c:	0402009d 	streq	r0, [r2], #-157	; 0x9d
 1a0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 1a4:	0402006c 	streq	r0, [r2], #-108	; 0x6c
 1a8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 1ac:	004b83bc 	strheq	r8, [fp], #-60	; 0xffffffc4
 1b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b4:	4c670666 	stclmi	6, cr0, [r7], #-408	; 0xfffffe68
 1b8:	020067bb 	andeq	r6, r0, #49020928	; 0x2ec0000
 1bc:	6b2f0104 	blvs	bc05d4 <shift+0xbc05d4>
 1c0:	04020083 	streq	r0, [r2], #-131	; 0x83
 1c4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 1c8:	02004c67 	andeq	r4, r0, #26368	; 0x6700
 1cc:	2e060104 	adfcss	f0, f6, f4
 1d0:	4d84bc06 	stcmi	12, cr11, [r4, #24]
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	bc062e06 	stclt	14, cr2, [r6], {6}
 1dc:	83873184 	orrhi	r3, r7, #132, 2	; 0x21
 1e0:	64d72f4b 	ldrbvs	r2, [r7], #3915	; 0xf4b
 1e4:	67872fbe 			; <UNDEFINED> instruction: 0x67872fbe
 1e8:	67134a02 	ldrvs	r4, [r3, -r2, lsl #20]
 1ec:	4b83a14f 	blmi	fe0e8730 <__bss_start+0x7c0e7440>
 1f0:	672f4b4b 	strvs	r4, [pc, -fp, asr #22]!
 1f4:	e608c908 	str	ip, [r8], -r8, lsl #18
 1f8:	13320267 	teqne	r2, #1879048198	; 0x70000006
 1fc:	67143402 	ldrvs	r3, [r4, -r2, lsl #8]
 200:	03132602 	tsteq	r3, #2097152	; 0x200000
 204:	01260275 	teqeq	r6, r5, ror r2
 208:	01040200 	mrseq	r0, R12_usr
 20c:	03066606 	movweq	r6, #26118	; 0x6606
 210:	67676611 			; <UNDEFINED> instruction: 0x67676611
 214:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 218:	4f676767 	svcmi	0x00676767
 21c:	a39f2fa1 	orrsge	r2, pc, #644	; 0x284
 220:	02832f69 	addeq	r2, r3, #420	; 0x1a4
 224:	0101000a 	tsteq	r1, sl
 228:	0000013d 	andeq	r0, r0, sp, lsr r1
 22c:	001e0002 	andseq	r0, lr, r2
 230:	01020000 	mrseq	r0, (UNDEF: 2)
 234:	000d0efb 	strdeq	r0, [sp], -fp
 238:	01010101 	tsteq	r1, r1, lsl #2
 23c:	01000000 	mrseq	r0, (UNDEF: 0)
 240:	00010000 	andeq	r0, r1, r0
 244:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 248:	00632e74 	rsbeq	r2, r3, r4, ror lr
 24c:	00000000 	andeq	r0, r0, r0
 250:	10020500 	andne	r0, r2, r0, lsl #10
 254:	0382000a 	orreq	r0, r2, #10
 258:	679f0110 			; <UNDEFINED> instruction: 0x679f0110
 25c:	4f4bbc9f 	svcmi	0x004bbc9f
 260:	30674cd7 	ldrdcc	r4, [r7], #-199	; 0xffffff39	; <UNPREDICTABLE>
 264:	03040200 	movweq	r0, #16896	; 0x4200
 268:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 26c:	02002d03 	andeq	r2, r0, #3, 26	; 0xc0
 270:	2e060104 	adfcss	f0, f6, f4
 274:	68676806 	stmdavs	r7!, {r1, r2, fp, sp, lr}^
 278:	83308367 	teqhi	r0, #-1677721599	; 0x9c000001
 27c:	02040200 	andeq	r0, r4, #0, 4
 280:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 284:	02006702 	andeq	r6, r0, #524288	; 0x80000
 288:	002c0204 	eoreq	r0, ip, r4, lsl #4
 28c:	06010402 	streq	r0, [r1], -r2, lsl #8
 290:	006b0666 	rsbeq	r0, fp, r6, ror #12
 294:	2f020402 	svccs	0x00020402
 298:	02040200 	andeq	r0, r4, #0, 4
 29c:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 2a0:	02002c02 	andeq	r2, r0, #512	; 0x200
 2a4:	66060104 	strvs	r0, [r6], -r4, lsl #2
 2a8:	02008606 	andeq	r8, r0, #6291456	; 0x600000
 2ac:	002f0204 	eoreq	r0, pc, r4, lsl #4
 2b0:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 2b4:	02040200 	andeq	r0, r4, #0, 4
 2b8:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 2bc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2c0:	d96c2f6b 	stmdble	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, sp}^
 2c4:	4b67304b 	blmi	19cc3f8 <shift+0x19cc3f8>
 2c8:	0200d94b 	andeq	sp, r0, #1228800	; 0x12c000
 2cc:	66060104 	strvs	r0, [r6], -r4, lsl #2
 2d0:	02040200 	andeq	r0, r4, #0, 4
 2d4:	2f670666 	svccs	0x00670666
 2d8:	2f4c4b69 	svccs	0x004c4b69
 2dc:	9f674bbb 	svcls	0x00674bbb
 2e0:	004b52b5 	strheq	r5, [fp], #-37	; 0xffffffdb
 2e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2e8:	67830666 	strvs	r0, [r3, r6, ror #12]
 2ec:	006a842f 	rsbeq	r8, sl, pc, lsr #8
 2f0:	d7010402 	strle	r0, [r1, -r2, lsl #8]
 2f4:	a12fa06b 	teqge	pc, fp, rrx
 2f8:	4b2f672f 	blmi	bd9fbc <shift+0xbd9fbc>
 2fc:	2f672f67 	svccs	0x00672f67
 300:	2f302f67 	svccs	0x00302f67
 304:	006a2c2f 	rsbeq	r2, sl, pc, lsr #24
 308:	2f030402 	svccs	0x00030402
 30c:	03040200 	movweq	r0, #16896	; 0x4200
 310:	04020083 	streq	r0, [r2], #-131	; 0x83
 314:	02006403 	andeq	r6, r0, #50331648	; 0x3000000
 318:	2e060104 	adfcss	f0, f6, f4
 31c:	02040200 	andeq	r0, r4, #0, 4
 320:	676a0666 	strbvs	r0, [sl, -r6, ror #12]!
 324:	04020083 	streq	r0, [r2], #-131	; 0x83
 328:	004a0601 	subeq	r0, sl, r1, lsl #12
 32c:	4a020402 	bmi	8133c <shift+0x8133c>
 330:	04040200 	streq	r0, [r4], #-512	; 0x200
 334:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 338:	30bb0604 	adcscc	r0, fp, r4, lsl #12
 33c:	30ad0867 	adccc	r0, sp, r7, ror #16
 340:	30ad0867 	adccc	r0, sp, r7, ror #16
 344:	30ad0867 	adccc	r0, sp, r7, ror #16
 348:	30ad0867 	adccc	r0, sp, r7, ror #16
 34c:	d74bbb68 	strble	fp, [fp, -r8, ror #22]
 350:	4d038332 	stcmi	3, cr8, [r3, #-200]	; 0xffffff38
 354:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 358:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 35c:	67663603 	strbvs	r3, [r6, -r3, lsl #12]!
 360:	4b6b2f83 	blmi	1acc174 <shift+0x1acc174>
 364:	01000602 	tsteq	r0, r2, lsl #12
 368:	0000d701 	andeq	sp, r0, r1, lsl #14
 36c:	9e000200 	cdpls	2, 0, cr0, cr0, cr0, {0}
 370:	02000000 	andeq	r0, r0, #0
 374:	0d0efb01 	vstreq	d15, [lr, #-4]
 378:	01010100 	mrseq	r0, (UNDEF: 17)
 37c:	00000001 	andeq	r0, r0, r1
 380:	01000001 	tsteq	r0, r1
 384:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2d0 <shift+0x2d0>
 388:	75622f65 	strbvc	r2, [r2, #-3941]!	; 0xf65
 38c:	73646c69 	cmnvc	r4, #26880	; 0x6900
 390:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
 394:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
 398:	6170736b 	cmnvs	r0, fp, ror #6
 39c:	422f6563 	eormi	r6, pc, #415236096	; 0x18c00000
 3a0:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 3a4:	6c655279 	sfmvs	f5, 2, [r5], #-484	; 0xfffffe1c
 3a8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
 3ac:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 3b0:	682f6c65 	stmdavs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 3b4:	6e7a7465 	cdpvs	4, 7, cr7, cr10, cr5, {3}
 3b8:	742f7265 	strtvc	r7, [pc], #-613	; 3c0 <shift+0x3c0>
 3bc:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
 3c0:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 3c4:	61652d6d 	cmnvs	r5, sp, ror #26
 3c8:	732f6962 	teqvc	pc, #1605632	; 0x188000
 3cc:	7370616e 	cmnvc	r0, #-2147483621	; 0x8000001b
 3d0:	73746f68 	cmnvc	r4, #104, 30	; 0x1a0
 3d4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 3d8:	6e696c2d 	cdpvs	12, 6, cr6, cr9, cr13, {1}
 3dc:	2d6f7261 	sfmcs	f7, 2, [pc, #-388]!	; 260 <shift+0x260>
 3e0:	2d392e34 	ldccs	14, cr2, [r9, #-208]!	; 0xffffff30
 3e4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
 3e8:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
 3ec:	696c2f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, sp}^
 3f0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
 3f4:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
 3f8:	2f676966 	svccs	0x00676966
 3fc:	006d7261 	rsbeq	r7, sp, r1, ror #4
 400:	62696c00 	rsbvs	r6, r9, #0, 24
 404:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
 408:	532e7363 	teqpl	lr, #-1946157055	; 0x8c000001
 40c:	00000100 	andeq	r0, r0, r0, lsl #2
 410:	02050000 	andeq	r0, r5, #0
 414:	82001014 	andhi	r1, r0, #20
 418:	0107cf03 	tsteq	r7, r3, lsl #30
 41c:	2f2f2f30 	svccs	0x002f2f30
 420:	e0032f2f 	and	r2, r3, pc, lsr #30
 424:	a4032e7c 	strge	r2, [r3], #-3708	; 0xe7c
 428:	01d00203 	bicseq	r0, r0, r3, lsl #4
 42c:	2f312f01 	svccs	0x00312f01
 430:	2f4c302f 	svccs	0x004c302f
 434:	66160332 			; <UNDEFINED> instruction: 0x66160332
 438:	2f2f2f2f 	svccs	0x002f2f2f
 43c:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
 440:	01010002 	tsteq	r1, r2
 444:	000000b4 	strheq	r0, [r0], -r4
 448:	009e0002 	addseq	r0, lr, r2
 44c:	01020000 	mrseq	r0, (UNDEF: 2)
 450:	000d0efb 	strdeq	r0, [sp], -fp
 454:	01010101 	tsteq	r1, r1, lsl #2
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	2f010000 	svccs	0x00010000
 460:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
 464:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 468:	6c73646c 	cfldrdvs	mvd6, [r3], #-432	; 0xfffffe50
 46c:	2f657661 	svccs	0x00657661
 470:	6b726f77 	blvs	1c9c254 <shift+0x1c9c254>
 474:	63617073 	cmnvs	r1, #115	; 0x73
 478:	69422f65 	stmdbvs	r2, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 47c:	7972616e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 480:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0x552
 484:	2f657361 	svccs	0x00657361
 488:	6562616c 	strbvs	r6, [r2, #-364]!	; 0x16c
 48c:	65682f6c 	strbvs	r2, [r8, #-3948]!	; 0xf6c
 490:	656e7a74 	strbvs	r7, [lr, #-2676]!	; 0xa74
 494:	61742f72 	cmnvs	r4, r2, ror pc
 498:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
 49c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4a4:	6e732f69 	cdpvs	15, 7, cr2, cr3, cr9, {3}
 4a8:	68737061 	ldmdavs	r3!, {r0, r5, r6, ip, sp, lr}^
 4ac:	2f73746f 	svccs	0x0073746f
 4b0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 4b4:	616e696c 	cmnvs	lr, ip, ror #18
 4b8:	342d6f72 	strtcc	r6, [sp], #-3954	; 0xf72
 4bc:	322d392e 	eorcc	r3, sp, #753664	; 0xb8000
 4c0:	2e353130 	mrccs	1, 1, r3, cr5, cr0, {1}
 4c4:	332d3130 	teqcc	sp, #48, 2
 4c8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 4cc:	2f636367 	svccs	0x00636367
 4d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 4d4:	612f6769 	teqvs	pc, r9, ror #14
 4d8:	00006d72 	andeq	r6, r0, r2, ror sp
 4dc:	3162696c 	cmncc	r2, ip, ror #18
 4e0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 4e4:	00532e73 	subseq	r2, r3, r3, ror lr
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	20020500 	andcs	r0, r2, r0, lsl #10
 4f0:	03820012 	orreq	r0, r2, #18
 4f4:	02010a96 	andeq	r0, r1, #614400	; 0x96000
 4f8:	01010002 	tsteq	r1, r2

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000045 	andeq	r0, r0, r5, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	8200005c 	andhi	r0, r0, #92	; 0x5c
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	00532e74 	subseq	r2, r3, r4, ror lr
  20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff6c <__bss_start+0x7dffec7c>
  24:	31732f65 	cmncc	r3, r5, ror #30
  28:	31313133 	teqcc	r1, r3, lsr r1
  2c:	652f3632 	strvs	r3, [pc, #-1586]!	; fffffa02 <__bss_start+0x7dffe712>
  30:	6c2f3173 	stfvss	f3, [pc], #-460	; fffffe6c <__bss_start+0x7dffeb7c>
  34:	34306261 	ldrtcc	r6, [r0], #-609	; 0x261
  38:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  3c:	20534120 	subscs	r4, r3, r0, lsr #2
  40:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
  44:	0100302e 	tsteq	r0, lr, lsr #32
  48:	00008480 	andeq	r8, r0, r0, lsl #9
  4c:	14000400 	strne	r0, [r0], #-1024	; 0x400
  50:	04000000 	streq	r0, [r0], #-0
  54:	00000d01 	andeq	r0, r0, r1, lsl #26
  58:	00780100 	rsbseq	r0, r8, r0, lsl #2
  5c:	00850000 	addeq	r0, r5, r0
  60:	005c0000 	subseq	r0, ip, r0
  64:	009c8200 	addseq	r8, ip, r0, lsl #4
  68:	00470000 	subeq	r0, r7, r0
  6c:	a7020000 	strge	r0, [r2, -r0]
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00005a09 	andeq	r5, r0, r9, lsl #20
  78:	00005c00 	andeq	r5, r0, r0, lsl #24
  7c:	00009c82 	andeq	r9, r0, r2, lsl #25
  80:	5a9c0100 	bpl	fe700488 <__bss_start+0x7c6ff198>
  84:	03000000 	movweq	r0, #0
  88:	0b010078 	bleq	40270 <shift+0x40270>
  8c:	00000061 	andeq	r0, r0, r1, rrx
  90:	03749102 	cmneq	r4, #-2147483648	; 0x80000000
  94:	00667562 	rsbeq	r7, r6, r2, ror #10
  98:	00680c01 	rsbeq	r0, r8, r1, lsl #24
  9c:	91030000 	mrsls	r0, (UNDEF: 3)
  a0:	04007bf4 	streq	r7, [r0], #-3060	; 0xbf4
  a4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a8:	04050074 	streq	r0, [r5], #-116	; 0x74
  ac:	00000007 	andeq	r0, r0, r7
  b0:	00800600 	addeq	r0, r0, r0, lsl #12
  b4:	00790000 	rsbseq	r0, r9, r0
  b8:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
  bc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
  c0:	04050001 	streq	r0, [r5], #-1
  c4:	00009e07 	andeq	r9, r0, r7, lsl #28
  c8:	08010500 	stmdaeq	r1, {r8, sl}
  cc:	00000181 	andeq	r0, r0, r1, lsl #3
  d0:	00030b00 	andeq	r0, r3, r0, lsl #22
  d4:	7b000400 	blvc	10dc <shift+0x10dc>
  d8:	04000000 	streq	r0, [r0], #-0
  dc:	00000d01 	andeq	r0, r0, r1, lsl #26
  e0:	01220100 	teqeq	r2, r0, lsl #2
  e4:	00850000 	addeq	r0, r5, r0
  e8:	00f80000 	rscseq	r0, r8, r0
  ec:	09188200 	ldmdbeq	r8, {r9, pc}
  f0:	008f0000 	addeq	r0, pc, r0
  f4:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
  f8:	01000000 	mrseq	r0, (UNDEF: 0)
  fc:	00004b17 	andeq	r4, r0, r7, lsl fp
 100:	0000f800 	andeq	pc, r0, r0, lsl #16
 104:	00005482 	andeq	r5, r0, r2, lsl #9
 108:	4b9c0100 	blmi	fe700510 <__bss_start+0x7c6ff220>
 10c:	03000000 	movweq	r0, #0
 110:	19010063 	stmdbne	r1, {r0, r1, r5, r6}
 114:	00000052 	andeq	r0, r0, r2, asr r0
 118:	00749102 	rsbseq	r9, r4, r2, lsl #2
 11c:	69050404 	stmdbvs	r5, {r2, sl}
 120:	0500746e 	streq	r7, [r0, #-1134]	; 0x46e
 124:	00000704 	andeq	r0, r0, r4, lsl #14
 128:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	00004b26 	andeq	r4, r0, r6, lsr #22
 134:	00014c00 	andeq	r4, r1, r0, lsl #24
 138:	00003882 	andeq	r3, r0, r2, lsl #17
 13c:	7f9c0100 	svcvc	0x009c0100
 140:	03000000 	movweq	r0, #0
 144:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
 148:	00000052 	andeq	r0, r0, r2, asr r0
 14c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 150:	00010e02 	andeq	r0, r1, r2, lsl #28
 154:	52330100 	eorspl	r0, r3, #0, 2
 158:	84000000 	strhi	r0, [r0], #-0
 15c:	a8820001 	stmge	r2, {r0}
 160:	01000002 	tsteq	r0, r2
 164:	0000c19c 	muleq	r0, ip, r1
 168:	00ac0600 	adceq	r0, ip, r0, lsl #12
 16c:	35010000 	strcc	r0, [r1, #-0]
 170:	00000052 	andeq	r0, r0, r2, asr r0
 174:	03749102 	cmneq	r4, #-2147483648	; 0x80000000
 178:	00786568 	rsbseq	r6, r8, r8, ror #10
 17c:	00523601 	subseq	r3, r2, r1, lsl #12
 180:	91020000 	mrsls	r0, (UNDEF: 2)
 184:	00690370 	rsbeq	r0, r9, r0, ror r3
 188:	004b3701 	subeq	r3, fp, r1, lsl #14
 18c:	91020000 	mrsls	r0, (UNDEF: 2)
 190:	2902006c 	stmdbcs	r2, {r2, r3, r5, r6}
 194:	01000001 	tsteq	r0, r1
 198:	00010d5e 	andeq	r0, r1, lr, asr sp
 19c:	00042c00 	andeq	r2, r4, r0, lsl #24
 1a0:	0000d882 	andeq	sp, r0, r2, lsl #17
 1a4:	0d9c0100 	ldfeqs	f0, [ip]
 1a8:	07000001 	streq	r0, [r0, -r1]
 1ac:	00727473 	rsbseq	r7, r2, r3, ror r4
 1b0:	010d5e01 	tsteq	sp, r1, lsl #28
 1b4:	91020000 	mrsls	r0, (UNDEF: 2)
 1b8:	006a0364 	rsbeq	r0, sl, r4, ror #6
 1bc:	004b6001 	subeq	r6, fp, r1
 1c0:	91020000 	mrsls	r0, (UNDEF: 2)
 1c4:	00690374 	rsbeq	r0, r9, r4, ror r3
 1c8:	004b6101 	subeq	r6, fp, r1, lsl #2
 1cc:	91020000 	mrsls	r0, (UNDEF: 2)
 1d0:	00710370 	rsbseq	r0, r1, r0, ror r3
 1d4:	004b6201 	subeq	r6, fp, r1, lsl #4
 1d8:	91020000 	mrsls	r0, (UNDEF: 2)
 1dc:	0408006c 	streq	r0, [r8], #-108	; 0x6c
 1e0:	00000113 	andeq	r0, r0, r3, lsl r1
 1e4:	81080105 	tsthi	r8, r5, lsl #2
 1e8:	09000001 	stmdbeq	r0, {r0}
 1ec:	00000133 	andeq	r0, r0, r3, lsr r1
 1f0:	004b7801 	subeq	r7, fp, r1, lsl #16
 1f4:	05040000 	streq	r0, [r4, #-0]
 1f8:	00a48200 	adceq	r8, r4, r0, lsl #4
 1fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 200:	00000140 	andeq	r0, r0, r0, asr #2
 204:	01006307 	tsteq	r0, r7, lsl #6
 208:	00004b78 	andeq	r4, r0, r8, ror fp
 20c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 210:	01650900 	cmneq	r5, r0, lsl #18
 214:	8f010000 	svchi	0x00010000
 218:	0000004b 	andeq	r0, r0, fp, asr #32
 21c:	820005a8 	andhi	r0, r0, #168, 10	; 0x2a000000
 220:	00000070 	andeq	r0, r0, r0, ror r0
 224:	01729c01 	cmneq	r2, r1, lsl #24
 228:	73070000 	movwvc	r0, #28672	; 0x7000
 22c:	728f0100 	addvc	r0, pc, #0, 2
 230:	02000001 	andeq	r0, r0, #1
 234:	69036c91 	stmdbvs	r3, {r0, r4, r7, sl, fp, sp, lr}
 238:	4b910100 	blmi	fe440640 <__bss_start+0x7c43f350>
 23c:	02000000 	andeq	r0, r0, #0
 240:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
 244:	00017804 	andeq	r7, r1, r4, lsl #16
 248:	01130a00 	tsteq	r3, r0, lsl #20
 24c:	470b0000 	strmi	r0, [fp, -r0]
 250:	01000001 	tsteq	r0, r1
 254:	0006189b 	muleq	r6, fp, r8
 258:	0000b482 	andeq	fp, r0, r2, lsl #9
 25c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
 260:	06000001 	streq	r0, [r0], -r1
 264:	0000015c 	andeq	r0, r0, ip, asr r1
 268:	01a19d01 			; <UNDEFINED> instruction: 0x01a19d01
 26c:	91020000 	mrsls	r0, (UNDEF: 2)
 270:	130c0064 	movwne	r0, #49252	; 0xc064
 274:	b1000001 	tstlt	r0, r1
 278:	0d000001 	stceq	0, cr0, [r0, #-4]
 27c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 280:	04050013 	streq	r0, [r5], #-19
 284:	00009e07 	andeq	r9, r0, r7, lsl #28
 288:	013d0b00 	teqeq	sp, r0, lsl #22
 28c:	a3010000 	movwge	r0, #4096	; 0x1000
 290:	820006cc 	andhi	r0, r0, #204, 12	; 0xcc00000
 294:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 298:	02389c01 	eorseq	r9, r8, #256	; 0x100
 29c:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 2a0:	4ba30100 	blmi	fe8c06a8 <__bss_start+0x7c8bf3b8>
 2a4:	02000000 	andeq	r0, r0, #0
 2a8:	79075c91 	stmdbvc	r7, {r0, r4, r7, sl, fp, ip, lr}
 2ac:	4ba30100 	blmi	fe8c06b4 <__bss_start+0x7c8bf3c4>
 2b0:	02000000 	andeq	r0, r0, #0
 2b4:	1a065891 	bne	196500 <shift+0x196500>
 2b8:	01000001 	tsteq	r0, r1
 2bc:	000238a5 	andeq	r3, r2, r5, lsr #17
 2c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2c4:	0000b106 	andeq	fp, r0, r6, lsl #2
 2c8:	38a60100 	stmiacc	r6!, {r8}
 2cc:	02000002 	andeq	r0, r0, #2
 2d0:	00066891 	muleq	r6, r1, r8
 2d4:	01000001 	tsteq	r0, r1
 2d8:	000248a7 	andeq	r4, r2, r7, lsr #17
 2dc:	60910200 	addsvs	r0, r1, r0, lsl #4
 2e0:	00015206 	andeq	r5, r1, r6, lsl #4
 2e4:	13a80100 			; <UNDEFINED> instruction: 0x13a80100
 2e8:	02000001 	andeq	r0, r0, #1
 2ec:	65037391 	strvs	r7, [r3, #-913]	; 0x391
 2f0:	0100646e 	tsteq	r0, lr, ror #8
 2f4:	000113a9 	andeq	r1, r1, r9, lsr #7
 2f8:	72910200 	addsvc	r0, r1, #0, 4
 2fc:	01006903 	tsteq	r0, r3, lsl #18
 300:	00004baa 	andeq	r4, r0, sl, lsr #23
 304:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 308:	01130c00 	tsteq	r3, r0, lsl #24
 30c:	02480000 	subeq	r0, r8, #0
 310:	b10d0000 	mrslt	r0, (UNDEF: 13)
 314:	02000001 	andeq	r0, r0, #1
 318:	01130c00 	tsteq	r3, r0, lsl #24
 31c:	02580000 	subseq	r0, r8, #0
 320:	b10d0000 	mrslt	r0, (UNDEF: 13)
 324:	04000001 	streq	r0, [r0], #-1
 328:	00c50200 	sbceq	r0, r5, r0, lsl #4
 32c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
 330:	0000004b 	andeq	r0, r0, fp, asr #32
 334:	8200099c 	andhi	r0, r0, #156, 18	; 0x270000
 338:	00000040 	andeq	r0, r0, r0, asr #32
 33c:	02b69c01 	adcseq	r9, r6, #256	; 0x100
 340:	6f070000 	svcvs	0x00070000
 344:	01007475 	tsteq	r0, r5, ror r4
 348:	00010dc9 	andeq	r0, r1, r9, asr #27
 34c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 350:	0000d20e 	andeq	sp, r0, lr, lsl #4
 354:	72c90100 	sbcvc	r0, r9, #0, 2
 358:	02000001 	andeq	r0, r0, #1
 35c:	100f7491 	mulne	pc, r1, r4	; <UNPREDICTABLE>
 360:	000000fa 	strdeq	r0, [r0], -sl
 364:	004bcb01 	subeq	ip, fp, r1, lsl #22
 368:	02a80000 	adceq	r0, r8, #0
 36c:	b6110000 	ldrlt	r0, [r1], -r0
 370:	11000002 	tstne	r0, r2
 374:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 378:	00d90600 	sbcseq	r0, r9, r0, lsl #12
 37c:	cd010000 	stcgt	0, cr0, [r1, #-0]
 380:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 384:	08005401 	stmdaeq	r0, {r0, sl, ip, lr}
 388:	00010d04 	andeq	r0, r1, r4, lsl #26
 38c:	4b040800 	blmi	102394 <shift+0x102394>
 390:	12000000 	andne	r0, r0, #0
 394:	000000b9 	strheq	r0, [r0], -r9
 398:	004bd301 	subeq	sp, fp, r1, lsl #6
 39c:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
 3a0:	00348200 	eorseq	r8, r4, r0, lsl #4
 3a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3a8:	0000d20e 	andeq	sp, r0, lr, lsl #4
 3ac:	72d30100 	sbcsvc	r0, r3, #0, 2
 3b0:	02000001 	andeq	r0, r0, #1
 3b4:	100f7091 	mulne	pc, r1, r0	; <UNPREDICTABLE>
 3b8:	000000fa 	strdeq	r0, [r0], -sl
 3bc:	004bd501 	subeq	sp, fp, r1, lsl #10
 3c0:	03000000 	movweq	r0, #0
 3c4:	b6110000 	ldrlt	r0, [r1], -r0
 3c8:	11000002 	tstne	r0, r2
 3cc:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 3d0:	00d90600 	sbcseq	r0, r9, r0, lsl #12
 3d4:	d7010000 	strle	r0, [r1, -r0]
 3d8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 3dc:	00005401 	andeq	r5, r0, r1, lsl #8
 3e0:	000002a1 	andeq	r0, r0, r1, lsr #5
 3e4:	01900004 	orrseq	r0, r0, r4
 3e8:	01040000 	mrseq	r0, (UNDEF: 4)
 3ec:	0000000d 	andeq	r0, r0, sp
 3f0:	00019a01 	andeq	r9, r1, r1, lsl #20
 3f4:	00008500 	andeq	r8, r0, r0, lsl #10
 3f8:	000a1000 	andeq	r1, sl, r0
 3fc:	00060482 	andeq	r0, r6, r2, lsl #9
 400:	00022800 	andeq	r2, r2, r0, lsl #16
 404:	01860200 	orreq	r0, r6, r0, lsl #4
 408:	10010000 	andne	r0, r1, r0
 40c:	82000a10 	andhi	r0, r0, #16, 20	; 0x10000
 410:	0000005c 	andeq	r0, r0, ip, asr r0
 414:	00559c01 	subseq	r9, r5, r1, lsl #24
 418:	73030000 	movwvc	r0, #12288	; 0x3000
 41c:	01007274 	tsteq	r0, r4, ror r2
 420:	00005510 	andeq	r5, r0, r0, lsl r5
 424:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 428:	01006303 	tsteq	r0, r3, lsl #6
 42c:	00006810 	andeq	r6, r0, r0, lsl r8
 430:	70910200 	addsvc	r0, r1, r0, lsl #4
 434:	5b040400 	blpl	10143c <shift+0x10143c>
 438:	04000000 	streq	r0, [r0], #-0
 43c:	00006104 	andeq	r6, r0, r4, lsl #2
 440:	08010500 	stmdaeq	r1, {r8, sl}
 444:	00000181 	andeq	r0, r0, r1, lsl #3
 448:	69050406 	stmdbvs	r5, {r1, r2, sl}
 44c:	0700746e 	streq	r7, [r0, -lr, ror #8]
 450:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 454:	00681b01 	rsbeq	r1, r8, r1, lsl #22
 458:	0a6c0000 	beq	1b00460 <shift+0x1b00460>
 45c:	01388200 	teqeq	r8, r0, lsl #4
 460:	9c010000 	stcls	0, cr0, [r1], {-0}
 464:	000000fe 	strdeq	r0, [r0], -lr
 468:	74756f03 	ldrbtvc	r6, [r5], #-3843	; 0xf03
 46c:	551b0100 	ldrpl	r0, [fp, #-256]	; 0x100
 470:	02000000 	andeq	r0, r0, #0
 474:	77086491 			; <UNDEFINED> instruction: 0x77086491
 478:	01000001 	tsteq	r0, r1
 47c:	0000fe1b 	andeq	pc, r0, fp, lsl lr	; <UNPREDICTABLE>
 480:	60910200 	addsvs	r0, r1, r0, lsl #4
 484:	0001a208 	andeq	sl, r1, r8, lsl #4
 488:	681b0100 	ldmdavs	fp, {r8}
 48c:	02000000 	andeq	r0, r0, #0
 490:	70035c91 	mulvc	r3, r1, ip
 494:	01006461 	tsteq	r0, r1, ror #8
 498:	0000681b 	andeq	r6, r0, fp, lsl r8
 49c:	58910200 	ldmpl	r1, {r9}
 4a0:	00637009 	rsbeq	r7, r3, r9
 4a4:	00681d01 	rsbeq	r1, r8, r1, lsl #26
 4a8:	54010000 	strpl	r0, [r1], #-0
 4ac:	00017e0a 	andeq	r7, r1, sl, lsl #28
 4b0:	681d0100 	ldmdavs	sp, {r8}
 4b4:	01000000 	mrseq	r0, (UNDEF: 0)
 4b8:	0a9c0b57 	beq	fe70321c <__bss_start+0x7c701f2c>
 4bc:	00588200 	subseq	r8, r8, r0, lsl #4
 4c0:	6c090000 	stcvs	0, cr0, [r9], {-0}
 4c4:	01006e65 	tsteq	r0, r5, ror #28
 4c8:	00006820 	andeq	r6, r0, r0, lsr #16
 4cc:	09550100 	ldmdbeq	r5, {r8}^
 4d0:	00727470 	rsbseq	r7, r2, r0, ror r4
 4d4:	00fe2101 	rscseq	r2, lr, r1, lsl #2
 4d8:	56010000 	strpl	r0, [r1], -r0
 4dc:	04040000 	streq	r0, [r4], #-0
 4e0:	00000104 	andeq	r0, r0, r4, lsl #2
 4e4:	0000610c 	andeq	r6, r0, ip, lsl #2
 4e8:	01a80700 			; <UNDEFINED> instruction: 0x01a80700
 4ec:	3f010000 	svccc	0x00010000
 4f0:	00000068 	andeq	r0, r0, r8, rrx
 4f4:	82000ba4 	andhi	r0, r0, #164, 22	; 0x29000
 4f8:	00000180 	andeq	r0, r0, r0, lsl #3
 4fc:	01c89c01 	biceq	r9, r8, r1, lsl #24
 500:	6f030000 	svcvs	0x00030000
 504:	01007475 	tsteq	r0, r5, ror r4
 508:	0000553f 	andeq	r5, r0, pc, lsr r5
 50c:	4c910200 	lfmmi	f0, 4, [r1], {0}
 510:	01006903 	tsteq	r0, r3, lsl #18
 514:	0000683f 	andeq	r6, r0, pc, lsr r8
 518:	48910200 	ldmmi	r1, {r9}
 51c:	01006203 	tsteq	r0, r3, lsl #4
 520:	0000683f 	andeq	r6, r0, pc, lsr r8
 524:	44910200 	ldrmi	r0, [r1], #512	; 0x200
 528:	00677303 	rsbeq	r7, r7, r3, lsl #6
 52c:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 530:	91020000 	mrsls	r0, (UNDEF: 2)
 534:	01a20840 			; <UNDEFINED> instruction: 0x01a20840
 538:	3f010000 	svccc	0x00010000
 53c:	00000068 	andeq	r0, r0, r8, rrx
 540:	03009102 	movweq	r9, #258	; 0x102
 544:	00646170 	rsbeq	r6, r4, r0, ror r1
 548:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 54c:	91020000 	mrsls	r0, (UNDEF: 2)
 550:	016f0804 	cmneq	pc, r4, lsl #16
 554:	40010000 	andmi	r0, r1, r0
 558:	00000068 	andeq	r0, r0, r8, rrx
 55c:	0a089102 	beq	22496c <shift+0x22496c>
 560:	00000190 	muleq	r0, r0, r1
 564:	01c84201 	biceq	r4, r8, r1, lsl #4
 568:	91020000 	mrsls	r0, (UNDEF: 2)
 56c:	00730954 	rsbseq	r0, r3, r4, asr r9
 570:	005b4301 	subseq	r4, fp, r1, lsl #6
 574:	54010000 	strpl	r0, [r1], #-0
 578:	01007409 	tsteq	r0, r9, lsl #8
 57c:	00006844 	andeq	r6, r0, r4, asr #16
 580:	09560100 	ldmdbeq	r6, {r8}^
 584:	0067656e 	rsbeq	r6, r7, lr, ror #10
 588:	00684401 	rsbeq	r4, r8, r1, lsl #8
 58c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 590:	00637009 	rsbeq	r7, r3, r9
 594:	00684401 	rsbeq	r4, r8, r1, lsl #8
 598:	55010000 	strpl	r0, [r1, #-0]
 59c:	01007509 	tsteq	r0, r9, lsl #10
 5a0:	0001df45 	andeq	sp, r1, r5, asr #30
 5a4:	00570100 	subseq	r0, r7, r0, lsl #2
 5a8:	0000610d 	andeq	r6, r0, sp, lsl #2
 5ac:	0001d800 	andeq	sp, r1, r0, lsl #16
 5b0:	01d80e00 	bicseq	r0, r8, r0, lsl #28
 5b4:	000b0000 	andeq	r0, fp, r0
 5b8:	9e070405 	cdpls	4, 0, cr0, cr7, cr5, {0}
 5bc:	05000000 	streq	r0, [r0, #-0]
 5c0:	00000704 	andeq	r0, r0, r4, lsl #14
 5c4:	fa070000 	blx	1c05cc <shift+0x1c05cc>
 5c8:	01000000 	mrseq	r0, (UNDEF: 0)
 5cc:	0000686c 	andeq	r6, r0, ip, ror #16
 5d0:	000d2400 	andeq	r2, sp, r0, lsl #8
 5d4:	0002dc82 	andeq	sp, r2, r2, lsl #25
 5d8:	7d9c0100 	ldfvcs	f0, [ip]
 5dc:	03000002 	movweq	r0, #2
 5e0:	0074756f 	rsbseq	r7, r4, pc, ror #10
 5e4:	00556c01 	subseq	r6, r5, r1, lsl #24
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	00d90854 	sbcseq	r0, r9, r4, asr r8
 5f0:	6c010000 	stcvs	0, cr0, [r1], {-0}
 5f4:	0000027d 	andeq	r0, r0, sp, ror r2
 5f8:	0a509102 	beq	1424a08 <shift+0x1424a08>
 5fc:	000001a2 	andeq	r0, r0, r2, lsr #3
 600:	00686e01 	rsbeq	r6, r8, r1, lsl #28
 604:	56010000 	strpl	r0, [r1], -r0
 608:	64617009 	strbtvs	r7, [r1], #-9
 60c:	686e0100 	stmdavs	lr!, {r8}^
 610:	01000000 	mrseq	r0, (UNDEF: 0)
 614:	63700957 	cmnvs	r0, #1425408	; 0x15c000
 618:	686f0100 	stmdavs	pc!, {r8}^	; <UNPREDICTABLE>
 61c:	01000000 	mrseq	r0, (UNDEF: 0)
 620:	00d20a55 	sbcseq	r0, r2, r5, asr sl
 624:	70010000 	andvc	r0, r1, r0
 628:	0000005b 	andeq	r0, r0, fp, asr r0
 62c:	73095401 	movwvc	r5, #37889	; 0x9401
 630:	01007263 	tsteq	r0, r3, ror #4
 634:	00028371 	andeq	r8, r2, r1, ror r3
 638:	5c910200 	lfmpl	f0, 4, [r1], {0}
 63c:	74756f0f 	ldrbtvc	r6, [r5], #-3855	; 0xf0f
 640:	b0a40100 	adclt	r0, r4, r0, lsl #2
 644:	0b82000f 	bleq	fe080688 <__bss_start+0x7c07f398>
 648:	82000e00 	andhi	r0, r0, #0, 28
 64c:	00000044 	andeq	r0, r0, r4, asr #32
 650:	01007309 	tsteq	r0, r9, lsl #6
 654:	00005b88 	andeq	r5, r0, r8, lsl #23
 658:	00580100 	subseq	r0, r8, r0, lsl #2
 65c:	68040400 	stmdavs	r4, {sl}
 660:	0d000000 	stceq	0, cr0, [r0, #-0]
 664:	00000061 	andeq	r0, r0, r1, rrx
 668:	00000293 	muleq	r0, r3, r2
 66c:	0001d80e 	andeq	sp, r1, lr, lsl #16
 670:	10000100 	andne	r0, r0, r0, lsl #2
 674:	000001af 	andeq	r0, r0, pc, lsr #3
 678:	1000b001 	andne	fp, r0, r1
 67c:	00148200 	andseq	r8, r4, r0, lsl #4
 680:	9c010000 	stcls	0, cr0, [r1], {-0}
 684:	00015300 	andeq	r5, r1, r0, lsl #6
 688:	7c000200 	sfmvc	f0, 4, [r0], {-0}
 68c:	04000002 	streq	r0, [r0], #-2
 690:	00036901 	andeq	r6, r3, r1, lsl #18
 694:	00101400 	andseq	r1, r0, r0, lsl #8
 698:	00122082 	andseq	r2, r2, r2, lsl #1
 69c:	6f682f82 	svcvs	0x00682f82
 6a0:	622f656d 	eorvs	r6, pc, #457179136	; 0x1b400000
 6a4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 6a8:	76616c73 			; <UNDEFINED> instruction: 0x76616c73
 6ac:	6f772f65 	svcvs	0x00772f65
 6b0:	70736b72 	rsbsvc	r6, r3, r2, ror fp
 6b4:	2f656361 	svccs	0x00656361
 6b8:	616e6942 	cmnvs	lr, r2, asr #18
 6bc:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0x972
 6c0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 6c4:	616c2f65 	cmnvs	ip, r5, ror #30
 6c8:	2f6c6562 	svccs	0x006c6562
 6cc:	7a746568 	bvc	1d19c74 <shift+0x1d19c74>
 6d0:	2f72656e 	svccs	0x0072656e
 6d4:	67726174 			; <UNDEFINED> instruction: 0x67726174
 6d8:	612f7465 	teqvs	pc, r5, ror #8
 6dc:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 6e0:	2f696261 	svccs	0x00696261
 6e4:	70616e73 	rsbvc	r6, r1, r3, ror lr
 6e8:	746f6873 	strbtvc	r6, [pc], #-2163	; 6f0 <shift+0x6f0>
 6ec:	63672f73 	cmnvs	r7, #460	; 0x1cc
 6f0:	696c2d63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sl, fp, sp}^
 6f4:	6f72616e 	svcvs	0x0072616e
 6f8:	392e342d 	stmdbcc	lr!, {r0, r2, r3, r5, sl, ip, sp}
 6fc:	3130322d 	teqcc	r0, sp, lsr #4
 700:	31302e35 	teqcc	r0, r5, lsr lr
 704:	6c2f332d 	stcvs	3, cr3, [pc], #-180	; 658 <shift+0x658>
 708:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
 70c:	6f632f63 	svcvs	0x00632f63
 710:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 714:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 718:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 71c:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
 720:	532e7363 	teqpl	lr, #-1946157055	; 0x8c000001
 724:	6f682f00 	svcvs	0x00682f00
 728:	622f656d 	eorvs	r6, pc, #457179136	; 0x1b400000
 72c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 730:	76616c73 			; <UNDEFINED> instruction: 0x76616c73
 734:	6f772f65 	svcvs	0x00772f65
 738:	70736b72 	rsbsvc	r6, r3, r2, ror fp
 73c:	2f656361 	svccs	0x00656361
 740:	616e6942 	cmnvs	lr, r2, asr #18
 744:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0x972
 748:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 74c:	616c2f65 	cmnvs	ip, r5, ror #30
 750:	2f6c6562 	svccs	0x006c6562
 754:	7a746568 	bvc	1d19cfc <shift+0x1d19cfc>
 758:	2f72656e 	svccs	0x0072656e
 75c:	67726174 			; <UNDEFINED> instruction: 0x67726174
 760:	612f7465 	teqvs	pc, r5, ror #8
 764:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 768:	2f696261 	svccs	0x00696261
 76c:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
 770:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
 774:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
 778:	38782f73 	ldmdacc	r8!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 77c:	34365f36 	ldrtcc	r5, [r6], #-3894	; 0xf36
 780:	6b6e752d 	blvs	1b9dc3c <shift+0x1b9dc3c>
 784:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
 788:	6e696c2d 	cdpvs	12, 6, cr6, cr9, cr13, {1}
 78c:	672d7875 			; <UNDEFINED> instruction: 0x672d7875
 790:	612f756e 	teqvs	pc, lr, ror #10
 794:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 798:	2f696261 	svccs	0x00696261
 79c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 7a0:	616e696c 	cmnvs	lr, ip, ror #18
 7a4:	342d6f72 	strtcc	r6, [sp], #-3954	; 0xf72
 7a8:	322d392e 	eorcc	r3, sp, #753664	; 0xb8000
 7ac:	2e353130 	mrccs	1, 1, r3, cr5, cr0, {1}
 7b0:	332d3130 	teqcc	sp, #48, 2
 7b4:	6174732d 	cmnvs	r4, sp, lsr #6
 7b8:	2f326567 	svccs	0x00326567
 7bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 7c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 7c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 7c8:	00636367 	rsbeq	r6, r3, r7, ror #6
 7cc:	20554e47 	subscs	r4, r5, r7, asr #28
 7d0:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
 7d4:	2e34322e 	cdpcs	2, 3, cr3, cr4, cr14, {1}
 7d8:	80010030 	andhi	r0, r1, r0, lsr r0
 7dc:	00000153 	andeq	r0, r0, r3, asr r1
 7e0:	02900002 	addseq	r0, r0, #2
 7e4:	01040000 	mrseq	r0, (UNDEF: 4)
 7e8:	00000444 	andeq	r0, r0, r4, asr #8
 7ec:	82001220 	andhi	r1, r0, #32, 4
 7f0:	82001224 	andhi	r1, r0, #36, 4	; 0x40000002
 7f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 740 <shift+0x740>
 7f8:	75622f65 	strbvc	r2, [r2, #-3941]!	; 0xf65
 7fc:	73646c69 	cmnvc	r4, #26880	; 0x6900
 800:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
 804:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
 808:	6170736b 	cmnvs	r0, fp, ror #6
 80c:	422f6563 	eormi	r6, pc, #415236096	; 0x18c00000
 810:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 814:	6c655279 	sfmvs	f5, 2, [r5], #-484	; 0xfffffe1c
 818:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
 81c:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 820:	682f6c65 	stmdavs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 824:	6e7a7465 	cdpvs	4, 7, cr7, cr10, cr5, {3}
 828:	742f7265 	strtvc	r7, [pc], #-613	; 830 <shift+0x830>
 82c:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
 830:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 834:	61652d6d 	cmnvs	r5, sp, ror #26
 838:	732f6962 	teqvc	pc, #1605632	; 0x188000
 83c:	7370616e 	cmnvc	r0, #-2147483621	; 0x8000001b
 840:	73746f68 	cmnvc	r4, #104, 30	; 0x1a0
 844:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 848:	6e696c2d 	cdpvs	12, 6, cr6, cr9, cr13, {1}
 84c:	2d6f7261 	sfmcs	f7, 2, [pc, #-388]!	; 6d0 <shift+0x6d0>
 850:	2d392e34 	ldccs	14, cr2, [r9, #-208]!	; 0xffffff30
 854:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
 858:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
 85c:	696c2f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, sp}^
 860:	63636762 	cmnvs	r3, #25690112	; 0x1880000
 864:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
 868:	2f676966 	svccs	0x00676966
 86c:	2f6d7261 	svccs	0x006d7261
 870:	3162696c 	cmncc	r2, ip, ror #18
 874:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 878:	00532e73 	subseq	r2, r3, r3, ror lr
 87c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7c8 <shift+0x7c8>
 880:	75622f65 	strbvc	r2, [r2, #-3941]!	; 0xf65
 884:	73646c69 	cmnvc	r4, #26880	; 0x6900
 888:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
 88c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
 890:	6170736b 	cmnvs	r0, fp, ror #6
 894:	422f6563 	eormi	r6, pc, #415236096	; 0x18c00000
 898:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 89c:	6c655279 	sfmvs	f5, 2, [r5], #-484	; 0xfffffe1c
 8a0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
 8a4:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 8a8:	682f6c65 	stmdavs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 8ac:	6e7a7465 	cdpvs	4, 7, cr7, cr10, cr5, {3}
 8b0:	742f7265 	strtvc	r7, [pc], #-613	; 8b8 <shift+0x8b8>
 8b4:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
 8b8:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 8bc:	61652d6d 	cmnvs	r5, sp, ror #26
 8c0:	5f2f6962 	svcpl	0x002f6962
 8c4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8c8:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
 8cc:	73646c69 	cmnvc	r4, #26880	; 0x6900
 8d0:	3638782f 	ldrtcc	r7, [r8], -pc, lsr #16
 8d4:	2d34365f 	ldccs	6, cr3, [r4, #-380]!	; 0xfffffe84
 8d8:	6e6b6e75 	mcrvs	14, 3, r6, cr11, cr5, {3}
 8dc:	2d6e776f 	stclcs	7, cr7, [lr, #-444]!	; 0xfffffe44
 8e0:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0x96c
 8e4:	6e672d78 	mcrvs	13, 3, r2, cr7, cr8, {3}
 8e8:	72612f75 	rsbvc	r2, r1, #468	; 0x1d4
 8ec:	61652d6d 	cmnvs	r5, sp, ror #26
 8f0:	672f6962 	strvs	r6, [pc, -r2, ror #18]!
 8f4:	6c2d6363 	stcvs	3, cr6, [sp], #-396	; 0xfffffe74
 8f8:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
 8fc:	2e342d6f 	cdpcs	13, 3, cr2, cr4, cr15, {3}
 900:	30322d39 	eorscc	r2, r2, r9, lsr sp
 904:	302e3531 	eorcc	r3, lr, r1, lsr r5
 908:	2d332d31 	ldccs	13, cr2, [r3, #-196]!	; 0xffffff3c
 90c:	67617473 			; <UNDEFINED> instruction: 0x67617473
 910:	612f3265 	teqvs	pc, r5, ror #4
 914:	652d6d72 	strvs	r6, [sp, #-3442]!	; 0xd72
 918:	2f696261 	svccs	0x00696261
 91c:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
 920:	47006363 	strmi	r6, [r0, -r3, ror #6]
 924:	4120554e 	teqmi	r0, lr, asr #10
 928:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
 92c:	302e3432 	eorcc	r3, lr, r2, lsr r4
 930:	Address 0x0000000000000930 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <shift+0x200c14>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  18:	030b130e 	movweq	r1, #45838	; 0xb30e
  1c:	110e1b0e 	tstne	lr, lr, lsl #22
  20:	10061201 	andne	r1, r6, r1, lsl #4
  24:	02000017 	andeq	r0, r0, #23
  28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <shift+0xe83840>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	01111349 	tsteq	r1, r9, asr #6
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	03000013 	movweq	r0, #19
  44:	08030034 	stmdaeq	r3, {r2, r4, r5}
  48:	0b3b0b3a 	bleq	ec2d38 <shift+0xec2d38>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	24040000 	strcs	r0, [r4], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	0008030b 	andeq	r0, r8, fp, lsl #6
  5c:	00240500 	eoreq	r0, r4, r0, lsl #10
  60:	0b3e0b0b 	bleq	f82c94 <shift+0xf82c94>
  64:	00000e03 	andeq	r0, r0, r3, lsl #28
  68:	49010106 	stmdbmi	r1, {r1, r2, r8}
  6c:	00130113 	andseq	r0, r3, r3, lsl r1
  70:	00210700 	eoreq	r0, r1, r0, lsl #14
  74:	052f1349 	streq	r1, [pc, #-841]!	; fffffd33 <__bss_start+0x7dffea43>
  78:	01000000 	mrseq	r0, (UNDEF: 0)
  7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  80:	0e030b13 	vmoveq.32	d3[0], r0
  84:	01110e1b 	tsteq	r1, fp, lsl lr
  88:	17100612 			; <UNDEFINED> instruction: 0x17100612
  8c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
  90:	03193f01 	tsteq	r9, #1, 30
  94:	3b0b3a0e 	blcc	2ce8d4 <shift+0x2ce8d4>
  98:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  9c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  a0:	96184006 	ldrls	r4, [r8], -r6
  a4:	13011942 	movwne	r1, #6466	; 0x1942
  a8:	34030000 	strcc	r0, [r3], #-0
  ac:	3a080300 	bcc	200cb4 <shift+0x200cb4>
  b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b4:	00180213 	andseq	r0, r8, r3, lsl r2
  b8:	00240400 	eoreq	r0, r4, r0, lsl #8
  bc:	0b3e0b0b 	bleq	f82cf0 <shift+0xf82cf0>
  c0:	00000803 	andeq	r0, r0, r3, lsl #16
  c4:	0b002405 	bleq	90e0 <shift+0x90e0>
  c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  cc:	0600000e 	streq	r0, [r0], -lr
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <shift+0xec2dc4>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	05070000 	streq	r0, [r7, #-0]
  e0:	3a080300 	bcc	200ce8 <shift+0x200ce8>
  e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	00180213 	andseq	r0, r8, r3, lsl r2
  ec:	000f0800 	andeq	r0, pc, r0, lsl #16
  f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  f4:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  f8:	03193f01 	tsteq	r9, #1, 30
  fc:	3b0b3a0e 	blcc	2ce93c <shift+0x2ce93c>
 100:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 104:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 108:	97184006 	ldrls	r4, [r8, -r6]
 10c:	13011942 	movwne	r1, #6466	; 0x1942
 110:	260a0000 	strcs	r0, [sl], -r0
 114:	00134900 	andseq	r4, r3, r0, lsl #18
 118:	012e0b00 	teqeq	lr, r0, lsl #22
 11c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 120:	0b3b0b3a 	bleq	ec2e10 <shift+0xec2e10>
 124:	01111927 	tsteq	r1, r7, lsr #18
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 130:	0c000013 	stceq	0, cr0, [r0], {19}
 134:	13490101 	movtne	r0, #37121	; 0x9101
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 140:	000b2f13 	andeq	r2, fp, r3, lsl pc
 144:	00050e00 	andeq	r0, r5, r0, lsl #28
 148:	0b3a0e03 	bleq	e8395c <shift+0xe8395c>
 14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 150:	00001802 	andeq	r1, r0, r2, lsl #16
 154:	0000180f 	andeq	r1, r0, pc, lsl #16
 158:	012e1000 	teqeq	lr, r0
 15c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 160:	0b3b0b3a 	bleq	ec2e50 <shift+0xec2e50>
 164:	13491927 	movtne	r1, #39207	; 0x9927
 168:	1301193c 	movwne	r1, #6460	; 0x193c
 16c:	05110000 	ldreq	r0, [r1, #-0]
 170:	00134900 	andseq	r4, r3, r0, lsl #18
 174:	012e1200 	teqeq	lr, r0, lsl #4
 178:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 17c:	0b3b0b3a 	bleq	ec2e6c <shift+0xec2e6c>
 180:	13491927 	movtne	r1, #39207	; 0x9927
 184:	06120111 			; <UNDEFINED> instruction: 0x06120111
 188:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 18c:	00000019 	andeq	r0, r0, r9, lsl r0
 190:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 194:	030b130e 	movweq	r1, #45838	; 0xb30e
 198:	110e1b0e 	tstne	lr, lr, lsl #22
 19c:	10061201 	andne	r1, r6, r1, lsl #4
 1a0:	02000017 	andeq	r0, r0, #23
 1a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a8:	0b3a0e03 	bleq	e839bc <shift+0xe839bc>
 1ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b8:	00130119 	andseq	r0, r3, r9, lsl r1
 1bc:	00050300 	andeq	r0, r5, r0, lsl #6
 1c0:	0b3a0803 	bleq	e821d4 <shift+0xe821d4>
 1c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1c8:	00001802 	andeq	r1, r0, r2, lsl #16
 1cc:	0b000f04 	bleq	3de4 <shift+0x3de4>
 1d0:	0013490b 	andseq	r4, r3, fp, lsl #18
 1d4:	00240500 	eoreq	r0, r4, r0, lsl #10
 1d8:	0b3e0b0b 	bleq	f82e0c <shift+0xf82e0c>
 1dc:	00000e03 	andeq	r0, r0, r3, lsl #28
 1e0:	0b002406 	bleq	9200 <shift+0x9200>
 1e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e8:	07000008 	streq	r0, [r0, -r8]
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <shift+0xe83a04>
 1f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f8:	01111349 	tsteq	r1, r9, asr #6
 1fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 200:	01194296 			; <UNDEFINED> instruction: 0x01194296
 204:	08000013 	stmdaeq	r0, {r0, r1, r4}
 208:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 20c:	0b3b0b3a 	bleq	ec2efc <shift+0xec2efc>
 210:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 214:	34090000 	strcc	r0, [r9], #-0
 218:	3a080300 	bcc	200e20 <shift+0x200e20>
 21c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 220:	00180213 	andseq	r0, r8, r3, lsl r2
 224:	00340a00 	eorseq	r0, r4, r0, lsl #20
 228:	0b3a0e03 	bleq	e83a3c <shift+0xe83a3c>
 22c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 230:	00001802 	andeq	r1, r0, r2, lsl #16
 234:	11010b0b 	tstne	r1, fp, lsl #22
 238:	00061201 	andeq	r1, r6, r1, lsl #4
 23c:	00260c00 	eoreq	r0, r6, r0, lsl #24
 240:	00001349 	andeq	r1, r0, r9, asr #6
 244:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 248:	00130113 	andseq	r0, r3, r3, lsl r1
 24c:	00210e00 	eoreq	r0, r1, r0, lsl #28
 250:	0b2f1349 	bleq	bc4f7c <shift+0xbc4f7c>
 254:	0a0f0000 	beq	3c025c <shift+0x3c025c>
 258:	3a080300 	bcc	200e60 <shift+0x200e60>
 25c:	110b3b0b 	tstne	fp, fp, lsl #22
 260:	10000001 	andne	r0, r0, r1
 264:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 268:	0b3a0e03 	bleq	e83a7c <shift+0xe83a7c>
 26c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 270:	06120111 			; <UNDEFINED> instruction: 0x06120111
 274:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 278:	00000019 	andeq	r0, r0, r9, lsl r0
 27c:	10001101 	andne	r1, r0, r1, lsl #2
 280:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
 284:	1b080301 	blne	200e90 <shift+0x200e90>
 288:	13082508 	movwne	r2, #34056	; 0x8508
 28c:	00000005 	andeq	r0, r0, r5
 290:	10001101 	andne	r1, r0, r1, lsl #2
 294:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
 298:	1b080301 	blne	200ea4 <shift+0x200ea4>
 29c:	13082508 	movwne	r2, #34056	; 0x8508
 2a0:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	82000000 	andhi	r0, r0, #0
  14:	0000005c 	andeq	r0, r0, ip, asr r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00490002 	subeq	r0, r9, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	8200005c 	andhi	r0, r0, #92	; 0x5c
  34:	0000009c 	muleq	r0, ip, r0
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00d10002 	sbcseq	r0, r1, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	820000f8 	andhi	r0, r0, #248	; 0xf8
  54:	00000918 	andeq	r0, r0, r8, lsl r9
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	03e00002 	mvneq	r0, #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	82000a10 	andhi	r0, r0, #16, 20	; 0x10000
  74:	00000604 	andeq	r0, r0, r4, lsl #12
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	06850002 	streq	r0, [r5], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	82001014 	andhi	r1, r0, #20
  94:	0000020c 	andeq	r0, r0, ip, lsl #4
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07dc0002 	ldrbeq	r0, [ip, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	82001220 	andhi	r1, r0, #32, 4
  b4:	00000004 	andeq	r0, r0, r4
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
   c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  10:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  14:	332e392e 	teqcc	lr, #753664	; 0xb8000
  18:	31303220 	teqcc	r0, r0, lsr #4
  1c:	31313035 	teqcc	r1, r5, lsr r0
  20:	70282033 	eorvc	r2, r8, r3, lsr r0
  24:	65726572 	ldrbvs	r6, [r2, #-1394]!	; 0x572
  28:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  2c:	2d202965 	stccs	9, cr2, [r0, #-404]!	; 0xfffffe6c
  30:	6d72616d 	ldfvse	f6, [r2, #-436]!	; 0xfffffe4c
  34:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  38:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
  3c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
  40:	38612d78 	stmdacc	r1!, {r3, r4, r5, r6, r8, sl, fp, sp}^
  44:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  48:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  4c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  50:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  54:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  58:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  5c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
  60:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  64:	6962616d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  68:	7061613d 	rsbvc	r6, r1, sp, lsr r1
  6c:	6c2d7363 	stcvs	3, cr7, [sp], #-396	; 0xfffffe74
  70:	78756e69 	ldmdavc	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
  74:	00672d20 	rsbeq	r2, r7, r0, lsr #26
  78:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  7c:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
  80:	632e3174 	teqvs	lr, #116, 2
  84:	6f682f00 	svcvs	0x00682f00
  88:	732f656d 	teqvc	pc, #457179136	; 0x1b400000
  8c:	31313331 	teqcc	r1, r1, lsr r3
  90:	2f363231 	svccs	0x00363231
  94:	2f317365 	svccs	0x00317365
  98:	3062616c 	rsbcc	r6, r2, ip, ror #2
  9c:	69730034 	ldmdbvs	r3!, {r2, r4, r5}^
  a0:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
  a4:	6d006570 	cfstr32vs	mvfx6, [r0, #-448]	; 0xfffffe40
  a8:	006e6961 	rsbeq	r6, lr, r1, ror #18
  ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
  b0:	756e7900 	strbvc	r7, [lr, #-2304]!	; 0x900
  b4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
  b8:	52415500 	subpl	r5, r1, #0, 10
  bc:	72705f54 	rsbsvc	r5, r0, #84, 30	; 0x150
  c0:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
  c4:	52415500 	subpl	r5, r1, #0, 10
  c8:	70735f54 	rsbsvc	r5, r3, r4, asr pc
  cc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
  d0:	6f660066 	svcvs	0x00660066
  d4:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
  d8:	72617600 	rsbvc	r7, r1, #0, 12
  dc:	41550067 	cmpmi	r5, r7, rrx
  e0:	675f5452 			; <UNDEFINED> instruction: 0x675f5452
  e4:	5f637465 	svcpl	0x00637465
  e8:	6c626f6e 	stclvs	15, cr6, [r2], #-440	; 0xfffffe48
  ec:	006b636f 	rsbeq	r6, fp, pc, ror #6
  f0:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
  f4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
  f8:	72700063 	rsbsvc	r0, r0, #99	; 0x63
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	6f746f67 	svcvs	0x00746f67
 104:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0x573
 108:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
 10c:	41550031 	cmpmi	r5, r1, lsr r0
 110:	675f5452 			; <UNDEFINED> instruction: 0x675f5452
 114:	65687465 	strbvs	r7, [r8, #-1125]!	; 0x465
 118:	6e780078 	mrcvs	0, 3, r0, cr8, cr8, {3}
 11c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
 120:	61750072 	cmnvs	r5, r2, ror r0
 124:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 128:	52415500 	subpl	r5, r1, #0, 10
 12c:	65675f54 	strbvs	r5, [r7, #-3924]!	; 0xf54
 130:	55007374 	strpl	r7, [r0, #-884]	; 0x374
 134:	5f545241 	svcpl	0x00545241
 138:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 13c:	52415500 	subpl	r5, r1, #0, 10
 140:	6f675f54 	svcvs	0x00675f54
 144:	55006f74 	strpl	r6, [r0, #-3956]	; 0xf74
 148:	5f545241 	svcpl	0x00545241
 14c:	61656c63 	cmnvs	r5, r3, ror #24
 150:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0x72
 154:	6f63696d 	svcvs	0x0063696d
 158:	006e6f6c 	rsbeq	r6, lr, ip, ror #30
 15c:	73637365 	cmnvc	r3, #-1811939327	; 0x94000001
 160:	65636e71 	strbvs	r6, [r3, #-3697]!	; 0xe71
 164:	52415500 	subpl	r5, r1, #0, 10
 168:	75705f54 	ldrbvc	r5, [r0, #-3924]!	; 0xf54
 16c:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
 170:	61627465 	cmnvs	r2, r5, ror #8
 174:	73006573 	movwvc	r6, #1395	; 0x573
 178:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 17c:	61700067 	cmnvs	r0, r7, rrx
 180:	61686364 	cmnvs	r8, r4, ror #6
 184:	72700072 	rsbsvc	r0, r0, #114	; 0x72
 188:	63746e69 	cmnvs	r4, #1680	; 0x690
 18c:	00726168 	rsbseq	r6, r2, r8, ror #2
 190:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 194:	75625f74 	strbvc	r5, [r2, #-3956]!	; 0xf74
 198:	72700066 	rsbsvc	r0, r0, #102	; 0x66
 19c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 1a0:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
 1a4:	00687464 	rsbeq	r7, r8, r4, ror #8
 1a8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1ac:	72006974 	andvc	r6, r0, #116, 18	; 0x1d0000
 1b0:	65736961 	ldrbvs	r6, [r3, #-2401]!	; 0x961
 1b4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 1b8:	0073746e 	rsbseq	r7, r3, lr, ror #8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	8200005c 	andhi	r0, r0, #92	; 0x5c
  1c:	0000009c 	muleq	r0, ip, r0
  20:	8b080e42 	blhi	203930 <shift+0x203930>
  24:	42018e02 	andmi	r8, r1, #2, 28
  28:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  2c:	080d0c48 	stmdaeq	sp, {r3, r6, sl, fp}
  30:	0000000c 	andeq	r0, r0, ip
  34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  38:	7c020001 	stcvc	0, cr0, [r2], {1}
  3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000030 	andeq	r0, r0, r0, lsr r0
  48:	820000f8 	andhi	r0, r0, #248	; 0xf8
  4c:	00000054 	andeq	r0, r0, r4, asr r0
  50:	8b080e42 	blhi	203960 <shift+0x203960>
  54:	42018e02 	andmi	r8, r1, #2, 28
  58:	64040b0c 	strvs	r0, [r4], #-2828	; 0xb0c
  5c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000030 	andeq	r0, r0, r0, lsr r0
  68:	8200014c 	andhi	r0, r0, #76, 2
  6c:	00000038 	andeq	r0, r0, r8, lsr r0
  70:	8b080e42 	blhi	203980 <shift+0x203980>
  74:	42018e02 	andmi	r8, r1, #2, 28
  78:	56040b0c 	strpl	r0, [r4], -ip, lsl #22
  7c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  80:	00000020 	andeq	r0, r0, r0, lsr #32
  84:	00000030 	andeq	r0, r0, r0, lsr r0
  88:	82000184 	andhi	r0, r0, #132, 2	; 0x21
  8c:	000002a8 	andeq	r0, r0, r8, lsr #5
  90:	8b080e42 	blhi	2039a0 <shift+0x2039a0>
  94:	42018e02 	andmi	r8, r1, #2, 28
  98:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  9c:	0d0c014e 	stfeqs	f0, [ip, #-312]	; 0xfffffec8
  a0:	00000008 	andeq	r0, r0, r8
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	00000030 	andeq	r0, r0, r0, lsr r0
  ac:	8200042c 	andhi	r0, r0, #44, 8	; 0x2c000000
  b0:	000000d8 	ldrdeq	r0, [r0], -r8
  b4:	8b080e42 	blhi	2039c4 <shift+0x2039c4>
  b8:	42018e02 	andmi	r8, r1, #2, 28
  bc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  c0:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
  c4:	0000001c 	andeq	r0, r0, ip, lsl r0
  c8:	00000030 	andeq	r0, r0, r0, lsr r0
  cc:	82000504 	andhi	r0, r0, #4, 10	; 0x1000000
  d0:	000000a4 	andeq	r0, r0, r4, lsr #1
  d4:	8b040e42 	blhi	1039e4 <shift+0x1039e4>
  d8:	0b0d4201 	bleq	3508e4 <shift+0x3508e4>
  dc:	0d0d4a02 	vstreq	s8, [sp, #-8]
  e0:	000ecb42 	andeq	ip, lr, r2, asr #22
  e4:	0000001c 	andeq	r0, r0, ip, lsl r0
  e8:	00000030 	andeq	r0, r0, r0, lsr r0
  ec:	820005a8 	andhi	r0, r0, #168, 10	; 0x2a000000
  f0:	00000070 	andeq	r0, r0, r0, ror r0
  f4:	8b040e42 	blhi	103a04 <shift+0x103a04>
  f8:	0b0d4201 	bleq	350904 <shift+0x350904>
  fc:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 100:	00000ecb 	andeq	r0, r0, fp, asr #29
 104:	0000001c 	andeq	r0, r0, ip, lsl r0
 108:	00000030 	andeq	r0, r0, r0, lsr r0
 10c:	82000618 	andhi	r0, r0, #24, 12	; 0x1800000
 110:	000000b4 	strheq	r0, [r0], -r4
 114:	8b080e42 	blhi	203a24 <shift+0x203a24>
 118:	42018e02 	andmi	r8, r1, #2, 28
 11c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 120:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
 124:	00000020 	andeq	r0, r0, r0, lsr #32
 128:	00000030 	andeq	r0, r0, r0, lsr r0
 12c:	820006cc 	andhi	r0, r0, #204, 12	; 0xcc00000
 130:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 134:	8b080e42 	blhi	203a44 <shift+0x203a44>
 138:	42018e02 	andmi	r8, r1, #2, 28
 13c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 140:	0d0c0162 	stfeqs	f0, [ip, #-392]	; 0xfffffe78
 144:	00000008 	andeq	r0, r0, r8
 148:	00000034 	andeq	r0, r0, r4, lsr r0
 14c:	00000030 	andeq	r0, r0, r0, lsr r0
 150:	8200099c 	andhi	r0, r0, #156, 18	; 0x270000
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	810c0e42 	tsthi	ip, r2, asr #28
 15c:	83028203 	movwhi	r8, #8707	; 0x2203
 160:	180e4201 	stmdane	lr, {r0, r9, lr}
 164:	058b0684 	streq	r0, [fp, #1668]	; 0x684
 168:	0c42048e 	cfstrdeq	mvd0, [r2], {142}	; 0x8e
 16c:	0c54100b 	mrrceq	0, 0, r1, r4, cr11
 170:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 174:	0c0ec4cb 	cfstrseq	mvf12, [lr], {203}	; 0xcb
 178:	c1c2c342 	bicgt	ip, r2, r2, asr #6
 17c:	0000000e 	andeq	r0, r0, lr
 180:	00000038 	andeq	r0, r0, r8, lsr r0
 184:	00000030 	andeq	r0, r0, r0, lsr r0
 188:	820009dc 	andhi	r0, r0, #220, 18	; 0x370000
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	80100e42 	andshi	r0, r0, r2, asr #28
 194:	82038104 	andhi	r8, r3, #4, 2
 198:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 19c:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 1a0:	068b0785 	streq	r0, [fp], r5, lsl #15
 1a4:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 1a8:	0c4e140b 	cfstrdeq	mvd1, [lr], {11}
 1ac:	ce42200d 	cdpgt	0, 4, cr2, cr2, cr13, {0}
 1b0:	0ec4c5cb 	cdpeq	5, 12, cr12, cr4, cr11, {6}
 1b4:	c2c34210 	sbcgt	r4, r3, #16, 4
 1b8:	000ec0c1 	andeq	ip, lr, r1, asr #1
 1bc:	0000000c 	andeq	r0, r0, ip
 1c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1d4:	82000a10 	andhi	r0, r0, #16, 20	; 0x10000
 1d8:	0000005c 	andeq	r0, r0, ip, asr r0
 1dc:	8b080e42 	blhi	203aec <shift+0x203aec>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
 1e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1ec:	00000024 	andeq	r0, r0, r4, lsr #32
 1f0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1f4:	82000a6c 	andhi	r0, r0, #108, 20	; 0x6c000
 1f8:	00000138 	andeq	r0, r0, r8, lsr r1
 1fc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 200:	86058506 	strhi	r8, [r5], -r6, lsl #10
 204:	8b038704 	blhi	e1e1c <shift+0xe1e1c>
 208:	42018e02 	andmi	r8, r1, #2, 28
 20c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 210:	180d0c96 	stmdane	sp, {r1, r2, r4, r7, sl, fp}
 214:	00000028 	andeq	r0, r0, r8, lsr #32
 218:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 21c:	82000ba4 	andhi	r0, r0, #164, 22	; 0x29000
 220:	00000180 	andeq	r0, r0, r0, lsl #3
 224:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 228:	86068507 	strhi	r8, [r6], -r7, lsl #10
 22c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 230:	8e028b03 	vmlahi.f64	d8, d2, d3
 234:	0b0c4201 	bleq	310a40 <shift+0x310a40>
 238:	0cba0204 	lfmeq	f0, 4, [sl], #16
 23c:	00001c0d 	andeq	r1, r0, sp, lsl #24
 240:	00000028 	andeq	r0, r0, r8, lsr #32
 244:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 248:	82000d24 	andhi	r0, r0, #36, 26	; 0x900
 24c:	000002dc 	ldrdeq	r0, [r0], -ip
 250:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
 254:	86068507 	strhi	r8, [r6], -r7, lsl #10
 258:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 25c:	8e028b03 	vmlahi.f64	d8, d2, d3
 260:	0b0c4201 	bleq	310a6c <shift+0x310a6c>
 264:	01680304 	cmneq	r8, r4, lsl #6
 268:	001c0d0c 	andseq	r0, ip, ip, lsl #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 274:	82001000 	andhi	r1, r0, #0
 278:	00000014 	andeq	r0, r0, r4, lsl r0
 27c:	8b040e42 	blhi	103b8c <shift+0x103b8c>
 280:	0b0d4201 	bleq	350a8c <shift+0x350a8c>
 284:	420d0d42 	andmi	r0, sp, #4224	; 0x1080
 288:	00000ecb 	andeq	r0, r0, fp, asr #29
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c010001 	stcvc	0, cr0, [r1], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	82001014 	andhi	r1, r0, #20
 2a8:	000001ec 	andeq	r0, r0, ip, ror #3
